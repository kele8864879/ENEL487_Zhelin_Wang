
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a6c  08002a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a6c  08002a6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a6c  08002a6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08002a80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002a80  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a8f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000181f  00000000  00000000  00029ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b24  00000000  00000000  0002c950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008baf  00000000  00000000  00043474  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085e59  00000000  00000000  0004c023  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  000d1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c8 	.word	0x080028c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028c8 	.word	0x080028c8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b089      	sub	sp, #36	; 0x24
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fced 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f913 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f9c5 	bl	800050c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000182:	f000 f94b 	bl	800041c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000186:	f000 f997 	bl	80004b8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim4);              //running tim4
 800018a:	4876      	ldr	r0, [pc, #472]	; (8000364 <main+0x1f4>)
 800018c:	f001 fcd6 	bl	8001b3c <HAL_TIM_Base_Start>

  strcpy((char*)cliBufferTX, "\x1b[2J");                                         /*clear the screen*/
 8000190:	4b75      	ldr	r3, [pc, #468]	; (8000368 <main+0x1f8>)
 8000192:	4a76      	ldr	r2, [pc, #472]	; (800036c <main+0x1fc>)
 8000194:	6810      	ldr	r0, [r2, #0]
 8000196:	6018      	str	r0, [r3, #0]
 8000198:	7912      	ldrb	r2, [r2, #4]
 800019a:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800019c:	4872      	ldr	r0, [pc, #456]	; (8000368 <main+0x1f8>)
 800019e:	f7ff ffdf 	bl	8000160 <strlen>
 80001a2:	4603      	mov	r3, r0
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001aa:	496f      	ldr	r1, [pc, #444]	; (8000368 <main+0x1f8>)
 80001ac:	4870      	ldr	r0, [pc, #448]	; (8000370 <main+0x200>)
 80001ae:	f001 ff6a 	bl	8002086 <HAL_UART_Transmit>

  strcpy((char*)cliBufferTX, "\x1b[10;r");                                       /*scroll window*/
 80001b2:	4b6d      	ldr	r3, [pc, #436]	; (8000368 <main+0x1f8>)
 80001b4:	4a6f      	ldr	r2, [pc, #444]	; (8000374 <main+0x204>)
 80001b6:	6810      	ldr	r0, [r2, #0]
 80001b8:	6018      	str	r0, [r3, #0]
 80001ba:	8891      	ldrh	r1, [r2, #4]
 80001bc:	7992      	ldrb	r2, [r2, #6]
 80001be:	8099      	strh	r1, [r3, #4]
 80001c0:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001c2:	4869      	ldr	r0, [pc, #420]	; (8000368 <main+0x1f8>)
 80001c4:	f7ff ffcc 	bl	8000160 <strlen>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d0:	4965      	ldr	r1, [pc, #404]	; (8000368 <main+0x1f8>)
 80001d2:	4867      	ldr	r0, [pc, #412]	; (8000370 <main+0x200>)
 80001d4:	f001 ff57 	bl	8002086 <HAL_UART_Transmit>

  strcpy((char*)cliBufferTX, "\x1b[10;0H");                                      /*position the cursor*/
 80001d8:	4a63      	ldr	r2, [pc, #396]	; (8000368 <main+0x1f8>)
 80001da:	4b67      	ldr	r3, [pc, #412]	; (8000378 <main+0x208>)
 80001dc:	cb03      	ldmia	r3!, {r0, r1}
 80001de:	6010      	str	r0, [r2, #0]
 80001e0:	6051      	str	r1, [r2, #4]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001e2:	4861      	ldr	r0, [pc, #388]	; (8000368 <main+0x1f8>)
 80001e4:	f7ff ffbc 	bl	8000160 <strlen>
 80001e8:	4603      	mov	r3, r0
 80001ea:	b29a      	uxth	r2, r3
 80001ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f0:	495d      	ldr	r1, [pc, #372]	; (8000368 <main+0x1f8>)
 80001f2:	485f      	ldr	r0, [pc, #380]	; (8000370 <main+0x200>)
 80001f4:	f001 ff47 	bl	8002086 <HAL_UART_Transmit>

   strcpy((char*)cliBufferTX, "Testing CLI!\r\n");
 80001f8:	4a5b      	ldr	r2, [pc, #364]	; (8000368 <main+0x1f8>)
 80001fa:	4b60      	ldr	r3, [pc, #384]	; (800037c <main+0x20c>)
 80001fc:	4614      	mov	r4, r2
 80001fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000200:	6020      	str	r0, [r4, #0]
 8000202:	6061      	str	r1, [r4, #4]
 8000204:	60a2      	str	r2, [r4, #8]
 8000206:	881a      	ldrh	r2, [r3, #0]
 8000208:	789b      	ldrb	r3, [r3, #2]
 800020a:	81a2      	strh	r2, [r4, #12]
 800020c:	73a3      	strb	r3, [r4, #14]
   HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800020e:	4856      	ldr	r0, [pc, #344]	; (8000368 <main+0x1f8>)
 8000210:	f7ff ffa6 	bl	8000160 <strlen>
 8000214:	4603      	mov	r3, r0
 8000216:	b29a      	uxth	r2, r3
 8000218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021c:	4952      	ldr	r1, [pc, #328]	; (8000368 <main+0x1f8>)
 800021e:	4854      	ldr	r0, [pc, #336]	; (8000370 <main+0x200>)
 8000220:	f001 ff31 	bl	8002086 <HAL_UART_Transmit>

   HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	4956      	ldr	r1, [pc, #344]	; (8000380 <main+0x210>)
 8000228:	4851      	ldr	r0, [pc, #324]	; (8000370 <main+0x200>)
 800022a:	f001 ffbe 	bl	80021aa <HAL_UART_Receive_IT>
   i=0;
 800022e:	4b55      	ldr	r3, [pc, #340]	; (8000384 <main+0x214>)
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
   period=10000;
 8000234:	4b54      	ldr	r3, [pc, #336]	; (8000388 <main+0x218>)
 8000236:	f242 7210 	movw	r2, #10000	; 0x2710
 800023a:	801a      	strh	r2, [r3, #0]
   flag=0;
 800023c:	4b53      	ldr	r3, [pc, #332]	; (800038c <main+0x21c>)
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
   uint16_t counter=0,temp,timer;
 8000242:	2300      	movs	r3, #0
 8000244:	83fb      	strh	r3, [r7, #30]
   int8_t  j;
   char data[10],escape[10];
  while (1)
  {
      timer = __HAL_TIM_GET_COUNTER(&htim4);
 8000246:	4b47      	ldr	r3, [pc, #284]	; (8000364 <main+0x1f4>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800024c:	833b      	strh	r3, [r7, #24]
	  if(flag==3)                        //flag = 3 means change happen
 800024e:	4b4f      	ldr	r3, [pc, #316]	; (800038c <main+0x21c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b03      	cmp	r3, #3
 8000254:	d10e      	bne.n	8000274 <main+0x104>
	  	    {
	  		  if (!(timer%period))
 8000256:	4b4c      	ldr	r3, [pc, #304]	; (8000388 <main+0x218>)
 8000258:	881a      	ldrh	r2, [r3, #0]
 800025a:	8b3b      	ldrh	r3, [r7, #24]
 800025c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000260:	fb02 f201 	mul.w	r2, r2, r1
 8000264:	1a9b      	subs	r3, r3, r2
 8000266:	b29b      	uxth	r3, r3
 8000268:	2b00      	cmp	r3, #0
 800026a:	d103      	bne.n	8000274 <main+0x104>
	  	  	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800026c:	2120      	movs	r1, #32
 800026e:	4848      	ldr	r0, [pc, #288]	; (8000390 <main+0x220>)
 8000270:	f000 ffdf 	bl	8001232 <HAL_GPIO_TogglePin>

	  	    }



	  if(timer==0)        //refresh the page every second
 8000274:	8b3b      	ldrh	r3, [r7, #24]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1e5      	bne.n	8000246 <main+0xd6>
	   {
		  counter++;
 800027a:	8bfb      	ldrh	r3, [r7, #30]
 800027c:	3301      	adds	r3, #1
 800027e:	83fb      	strh	r3, [r7, #30]
		  temp = counter;
 8000280:	8bfb      	ldrh	r3, [r7, #30]
 8000282:	83bb      	strh	r3, [r7, #28]
		  for( j=0;j<5;j++) 	//	get formal output
 8000284:	2300      	movs	r3, #0
 8000286:	76fb      	strb	r3, [r7, #27]
 8000288:	e023      	b.n	80002d2 <main+0x162>
		   {  data[4-j]=(temp%10)^0x30;
 800028a:	8bba      	ldrh	r2, [r7, #28]
 800028c:	4b41      	ldr	r3, [pc, #260]	; (8000394 <main+0x224>)
 800028e:	fba3 1302 	umull	r1, r3, r3, r2
 8000292:	08d9      	lsrs	r1, r3, #3
 8000294:	460b      	mov	r3, r1
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	440b      	add	r3, r1
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	1ad3      	subs	r3, r2, r3
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80002a6:	f1c3 0304 	rsb	r3, r3, #4
 80002aa:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	f107 0120 	add.w	r1, r7, #32
 80002b4:	440b      	add	r3, r1
 80002b6:	f803 2c14 	strb.w	r2, [r3, #-20]
		      temp=temp/10;
 80002ba:	8bbb      	ldrh	r3, [r7, #28]
 80002bc:	4a35      	ldr	r2, [pc, #212]	; (8000394 <main+0x224>)
 80002be:	fba2 2303 	umull	r2, r3, r2, r3
 80002c2:	08db      	lsrs	r3, r3, #3
 80002c4:	83bb      	strh	r3, [r7, #28]
		  for( j=0;j<5;j++) 	//	get formal output
 80002c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	76fb      	strb	r3, [r7, #27]
 80002d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	ddd7      	ble.n	800028a <main+0x11a>
		   }

		  data[5]='\0';
 80002da:	2300      	movs	r3, #0
 80002dc:	747b      	strb	r3, [r7, #17]
		  strcpy((char*)escape, "\x1b[s");                                            /*save cursor*/
 80002de:	463b      	mov	r3, r7
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <main+0x228>)
 80002e2:	601a      	str	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, escape, strlen((char*)escape),1000);
 80002e4:	463b      	mov	r3, r7
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff3a 	bl	8000160 <strlen>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4639      	mov	r1, r7
 80002f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002f6:	481e      	ldr	r0, [pc, #120]	; (8000370 <main+0x200>)
 80002f8:	f001 fec5 	bl	8002086 <HAL_UART_Transmit>
	      strcpy((char*)escape, "\x1b[0;0H");                                         /*cursor go begin*/
 80002fc:	463b      	mov	r3, r7
 80002fe:	4a27      	ldr	r2, [pc, #156]	; (800039c <main+0x22c>)
 8000300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000304:	6018      	str	r0, [r3, #0]
 8000306:	3304      	adds	r3, #4
 8000308:	8019      	strh	r1, [r3, #0]
 800030a:	3302      	adds	r3, #2
 800030c:	0c0a      	lsrs	r2, r1, #16
 800030e:	701a      	strb	r2, [r3, #0]
   	      HAL_UART_Transmit(&huart3, escape, strlen((char*)escape),1000);
 8000310:	463b      	mov	r3, r7
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff24 	bl	8000160 <strlen>
 8000318:	4603      	mov	r3, r0
 800031a:	b29a      	uxth	r2, r3
 800031c:	4639      	mov	r1, r7
 800031e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000322:	4813      	ldr	r0, [pc, #76]	; (8000370 <main+0x200>)
 8000324:	f001 feaf 	bl	8002086 <HAL_UART_Transmit>
   	      HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 8000328:	f107 030c 	add.w	r3, r7, #12
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff17 	bl	8000160 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	b29a      	uxth	r2, r3
 8000336:	f107 010c 	add.w	r1, r7, #12
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <main+0x200>)
 8000340:	f001 fea1 	bl	8002086 <HAL_UART_Transmit>
   	      strcpy((char*)escape, "\x1b[u");
 8000344:	463b      	mov	r3, r7
 8000346:	4a16      	ldr	r2, [pc, #88]	; (80003a0 <main+0x230>)
 8000348:	601a      	str	r2, [r3, #0]
   	      HAL_UART_Transmit(&huart3, escape, strlen((char*)escape),1000);
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff07 	bl	8000160 <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	b29a      	uxth	r2, r3
 8000356:	4639      	mov	r1, r7
 8000358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <main+0x200>)
 800035e:	f001 fe92 	bl	8002086 <HAL_UART_Transmit>
      timer = __HAL_TIM_GET_COUNTER(&htim4);
 8000362:	e770      	b.n	8000246 <main+0xd6>
 8000364:	2000002c 	.word	0x2000002c
 8000368:	200000b4 	.word	0x200000b4
 800036c:	080028e0 	.word	0x080028e0
 8000370:	20000074 	.word	0x20000074
 8000374:	080028e8 	.word	0x080028e8
 8000378:	080028f0 	.word	0x080028f0
 800037c:	080028f8 	.word	0x080028f8
 8000380:	20000184 	.word	0x20000184
 8000384:	20000180 	.word	0x20000180
 8000388:	20000198 	.word	0x20000198
 800038c:	2000017c 	.word	0x2000017c
 8000390:	40010800 	.word	0x40010800
 8000394:	cccccccd 	.word	0xcccccccd
 8000398:	00735b1b 	.word	0x00735b1b
 800039c:	08002908 	.word	0x08002908
 80003a0:	00755b1b 	.word	0x00755b1b

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	; 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fa7f 	bl	80028b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	2310      	movs	r3, #16
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 ff42 	bl	8001264 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003e6:	f000 faab 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80003f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80003fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f001 f9ad 	bl	8001764 <HAL_RCC_ClockConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000410:	f000 fa96 	bl	8000940 <Error_Handler>
  }
}
 8000414:	bf00      	nop
 8000416:	3740      	adds	r7, #64	; 0x40
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	463b      	mov	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_TIM4_Init+0x94>)
 800043a:	4a1e      	ldr	r2, [pc, #120]	; (80004b4 <MX_TIM4_Init+0x98>)
 800043c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_TIM4_Init+0x94>)
 8000440:	2263      	movs	r2, #99	; 0x63
 8000442:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_TIM4_Init+0x94>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_TIM4_Init+0x94>)
 800044c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000450:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_TIM4_Init+0x94>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_TIM4_Init+0x94>)
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800045e:	4814      	ldr	r0, [pc, #80]	; (80004b0 <MX_TIM4_Init+0x94>)
 8000460:	f001 fb1c 	bl	8001a9c <HAL_TIM_Base_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800046a:	f000 fa69 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	4619      	mov	r1, r3
 800047a:	480d      	ldr	r0, [pc, #52]	; (80004b0 <MX_TIM4_Init+0x94>)
 800047c:	f001 fba8 	bl	8001bd0 <HAL_TIM_ConfigClockSource>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 fa5b 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000492:	463b      	mov	r3, r7
 8000494:	4619      	mov	r1, r3
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <MX_TIM4_Init+0x94>)
 8000498:	f001 fd4a 	bl	8001f30 <HAL_TIMEx_MasterConfigSynchronization>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80004a2:	f000 fa4d 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	40000800 	.word	0x40000800

080004b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004be:	4a12      	ldr	r2, [pc, #72]	; (8000508 <MX_USART3_UART_Init+0x50>)
 80004c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_USART3_UART_Init+0x4c>)
 80004f0:	f001 fd7c 	bl	8001fec <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004fa:	f000 fa21 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000074 	.word	0x20000074
 8000508:	40004800 	.word	0x40004800

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_GPIO_Init+0x74>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <MX_GPIO_Init+0x74>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_GPIO_Init+0x74>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_GPIO_Init+0x74>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <MX_GPIO_Init+0x74>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_GPIO_Init+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0x78>)
 8000556:	f000 fe54 	bl	8001202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800055a:	2320      	movs	r3, #32
 800055c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2302      	movs	r3, #2
 8000568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	4619      	mov	r1, r3
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0x78>)
 8000572:	f000 fcd5 	bl	8000f20 <HAL_GPIO_Init>

}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000
 8000584:	40010800 	.word	0x40010800

08000588 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	cliBufferTX[i] = cliBufferRX[0];
 8000590:	4ba6      	ldr	r3, [pc, #664]	; (800082c <HAL_UART_RxCpltCallback+0x2a4>)
 8000592:	f993 3000 	ldrsb.w	r3, [r3]
 8000596:	461a      	mov	r2, r3
 8000598:	4ba5      	ldr	r3, [pc, #660]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 800059a:	7819      	ldrb	r1, [r3, #0]
 800059c:	4ba5      	ldr	r3, [pc, #660]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 800059e:	5499      	strb	r1, [r3, r2]
	if( cliBufferTX[i]=='\r')                             //get enter command
 80005a0:	4ba2      	ldr	r3, [pc, #648]	; (800082c <HAL_UART_RxCpltCallback+0x2a4>)
 80005a2:	f993 3000 	ldrsb.w	r3, [r3]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4ba2      	ldr	r3, [pc, #648]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80005aa:	5c9b      	ldrb	r3, [r3, r2]
 80005ac:	2b0d      	cmp	r3, #13
 80005ae:	f040 816b 	bne.w	8000888 <HAL_UART_RxCpltCallback+0x300>
	{
		cliBufferTX[i]='\0';                              //end input
 80005b2:	4b9e      	ldr	r3, [pc, #632]	; (800082c <HAL_UART_RxCpltCallback+0x2a4>)
 80005b4:	f993 3000 	ldrsb.w	r3, [r3]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b9e      	ldr	r3, [pc, #632]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80005bc:	2100      	movs	r1, #0
 80005be:	5499      	strb	r1, [r3, r2]
		cliBufferRX[0]='\r';                              //putty enter
 80005c0:	4b9b      	ldr	r3, [pc, #620]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005c2:	220d      	movs	r2, #13
 80005c4:	701a      	strb	r2, [r3, #0]
		cliBufferRX[1]='\n';                              //putty go next line
 80005c6:	4b9a      	ldr	r3, [pc, #616]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005c8:	220a      	movs	r2, #10
 80005ca:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3,cliBufferRX,2,1000);
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	2202      	movs	r2, #2
 80005d2:	4997      	ldr	r1, [pc, #604]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005d4:	4898      	ldr	r0, [pc, #608]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 80005d6:	f001 fd56 	bl	8002086 <HAL_UART_Transmit>
		strcpy((char*)cliBufferRX, "\x1b[s");                                            /*save cursor*/
 80005da:	4b95      	ldr	r3, [pc, #596]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005dc:	4a97      	ldr	r2, [pc, #604]	; (800083c <HAL_UART_RxCpltCallback+0x2b4>)
 80005de:	6810      	ldr	r0, [r2, #0]
 80005e0:	6018      	str	r0, [r3, #0]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 80005e2:	4893      	ldr	r0, [pc, #588]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005e4:	f7ff fdbc 	bl	8000160 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	498f      	ldr	r1, [pc, #572]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005f2:	4891      	ldr	r0, [pc, #580]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 80005f4:	f001 fd47 	bl	8002086 <HAL_UART_Transmit>
        strcpy((char*)cliBufferRX, "\x1b[9;0H");                                         /*cursor at 9.0*/
 80005f8:	4b8d      	ldr	r3, [pc, #564]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 80005fa:	4a91      	ldr	r2, [pc, #580]	; (8000840 <HAL_UART_RxCpltCallback+0x2b8>)
 80005fc:	6810      	ldr	r0, [r2, #0]
 80005fe:	6018      	str	r0, [r3, #0]
 8000600:	8891      	ldrh	r1, [r2, #4]
 8000602:	7992      	ldrb	r2, [r2, #6]
 8000604:	8099      	strh	r1, [r3, #4]
 8000606:	719a      	strb	r2, [r3, #6]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000608:	4889      	ldr	r0, [pc, #548]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 800060a:	f7ff fda9 	bl	8000160 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	4986      	ldr	r1, [pc, #536]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 8000618:	4887      	ldr	r0, [pc, #540]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 800061a:	f001 fd34 	bl	8002086 <HAL_UART_Transmit>
        strcpy((char*)cliBufferRX, "\x1b[1J");                                           /*clean the line*/
 800061e:	4b84      	ldr	r3, [pc, #528]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 8000620:	4a88      	ldr	r2, [pc, #544]	; (8000844 <HAL_UART_RxCpltCallback+0x2bc>)
 8000622:	6810      	ldr	r0, [r2, #0]
 8000624:	6018      	str	r0, [r3, #0]
 8000626:	7912      	ldrb	r2, [r2, #4]
 8000628:	711a      	strb	r2, [r3, #4]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 800062a:	4881      	ldr	r0, [pc, #516]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 800062c:	f7ff fd98 	bl	8000160 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	497d      	ldr	r1, [pc, #500]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 800063a:	487f      	ldr	r0, [pc, #508]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 800063c:	f001 fd23 	bl	8002086 <HAL_UART_Transmit>
        strcpy((char*)cliBufferRX, "\x1b[2;0H");                                         /*光cursor at second line*/
 8000640:	4b7b      	ldr	r3, [pc, #492]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 8000642:	4a81      	ldr	r2, [pc, #516]	; (8000848 <HAL_UART_RxCpltCallback+0x2c0>)
 8000644:	6810      	ldr	r0, [r2, #0]
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	8891      	ldrh	r1, [r2, #4]
 800064a:	7992      	ldrb	r2, [r2, #6]
 800064c:	8099      	strh	r1, [r3, #4]
 800064e:	719a      	strb	r2, [r3, #6]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000650:	4877      	ldr	r0, [pc, #476]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 8000652:	f7ff fd85 	bl	8000160 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	4974      	ldr	r1, [pc, #464]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 8000660:	4875      	ldr	r0, [pc, #468]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 8000662:	f001 fd10 	bl	8002086 <HAL_UART_Transmit>
		if(strcmp(cliBufferTX,"turn")==0)
 8000666:	4979      	ldr	r1, [pc, #484]	; (800084c <HAL_UART_RxCpltCallback+0x2c4>)
 8000668:	4872      	ldr	r0, [pc, #456]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 800066a:	f7ff fd6f 	bl	800014c <strcmp>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d123      	bne.n	80006bc <HAL_UART_RxCpltCallback+0x134>
		  {  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000674:	2120      	movs	r1, #32
 8000676:	4876      	ldr	r0, [pc, #472]	; (8000850 <HAL_UART_RxCpltCallback+0x2c8>)
 8000678:	f000 fddb 	bl	8001232 <HAL_GPIO_TogglePin>
             flag=1;
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <HAL_UART_RxCpltCallback+0x2cc>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]

             strcpy((char*)cliBufferTX, "turn to open and close LED");
 8000682:	4a6c      	ldr	r2, [pc, #432]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000684:	4b74      	ldr	r3, [pc, #464]	; (8000858 <HAL_UART_RxCpltCallback+0x2d0>)
 8000686:	4615      	mov	r5, r2
 8000688:	461c      	mov	r4, r3
 800068a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800068c:	6028      	str	r0, [r5, #0]
 800068e:	6069      	str	r1, [r5, #4]
 8000690:	60aa      	str	r2, [r5, #8]
 8000692:	60eb      	str	r3, [r5, #12]
 8000694:	cc03      	ldmia	r4!, {r0, r1}
 8000696:	6128      	str	r0, [r5, #16]
 8000698:	6169      	str	r1, [r5, #20]
 800069a:	8823      	ldrh	r3, [r4, #0]
 800069c:	78a2      	ldrb	r2, [r4, #2]
 800069e:	832b      	strh	r3, [r5, #24]
 80006a0:	4613      	mov	r3, r2
 80006a2:	76ab      	strb	r3, [r5, #26]
             HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80006a4:	4863      	ldr	r0, [pc, #396]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80006a6:	f7ff fd5b 	bl	8000160 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	4960      	ldr	r1, [pc, #384]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80006b4:	4860      	ldr	r0, [pc, #384]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 80006b6:	f001 fce6 	bl	8002086 <HAL_UART_Transmit>
 80006ba:	e09e      	b.n	80007fa <HAL_UART_RxCpltCallback+0x272>

		  }

		else if (strcmp(cliBufferTX,"query")==0)
 80006bc:	4967      	ldr	r1, [pc, #412]	; (800085c <HAL_UART_RxCpltCallback+0x2d4>)
 80006be:	485d      	ldr	r0, [pc, #372]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80006c0:	f7ff fd44 	bl	800014c <strcmp>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d12e      	bne.n	8000728 <HAL_UART_RxCpltCallback+0x1a0>
		  {
			flag=2;
 80006ca:	4b62      	ldr	r3, [pc, #392]	; (8000854 <HAL_UART_RxCpltCallback+0x2cc>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	601a      	str	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 80006d0:	2120      	movs	r1, #32
 80006d2:	485f      	ldr	r0, [pc, #380]	; (8000850 <HAL_UART_RxCpltCallback+0x2c8>)
 80006d4:	f000 fd7e 	bl	80011d4 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d113      	bne.n	8000706 <HAL_UART_RxCpltCallback+0x17e>
			  {

				strcpy((char *)cliBufferTX, "LED on");
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80006e0:	4a5f      	ldr	r2, [pc, #380]	; (8000860 <HAL_UART_RxCpltCallback+0x2d8>)
 80006e2:	6810      	ldr	r0, [r2, #0]
 80006e4:	6018      	str	r0, [r3, #0]
 80006e6:	8891      	ldrh	r1, [r2, #4]
 80006e8:	7992      	ldrb	r2, [r2, #6]
 80006ea:	8099      	strh	r1, [r3, #4]
 80006ec:	719a      	strb	r2, [r3, #6]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 80006ee:	4851      	ldr	r0, [pc, #324]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80006f0:	f7ff fd36 	bl	8000160 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	494d      	ldr	r1, [pc, #308]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80006fe:	484e      	ldr	r0, [pc, #312]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 8000700:	f001 fcc1 	bl	8002086 <HAL_UART_Transmit>
 8000704:	e079      	b.n	80007fa <HAL_UART_RxCpltCallback+0x272>

			  }
			else
			  {
				strcpy((char *)cliBufferTX, "LED off");
 8000706:	4a4b      	ldr	r2, [pc, #300]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000708:	4b56      	ldr	r3, [pc, #344]	; (8000864 <HAL_UART_RxCpltCallback+0x2dc>)
 800070a:	cb03      	ldmia	r3!, {r0, r1}
 800070c:	6010      	str	r0, [r2, #0]
 800070e:	6051      	str	r1, [r2, #4]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 8000710:	4848      	ldr	r0, [pc, #288]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000712:	f7ff fd25 	bl	8000160 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	4945      	ldr	r1, [pc, #276]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000720:	4845      	ldr	r0, [pc, #276]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 8000722:	f001 fcb0 	bl	8002086 <HAL_UART_Transmit>
 8000726:	e068      	b.n	80007fa <HAL_UART_RxCpltCallback+0x272>

			  }
		   }
		else if (strcmp(cliBufferTX,"change")==0)
 8000728:	494f      	ldr	r1, [pc, #316]	; (8000868 <HAL_UART_RxCpltCallback+0x2e0>)
 800072a:	4842      	ldr	r0, [pc, #264]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 800072c:	f7ff fd0e 	bl	800014c <strcmp>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d136      	bne.n	80007a4 <HAL_UART_RxCpltCallback+0x21c>
		   {  flag=3;
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <HAL_UART_RxCpltCallback+0x2cc>)
 8000738:	2203      	movs	r2, #3
 800073a:	601a      	str	r2, [r3, #0]
			  if(period==10000)
 800073c:	4b4b      	ldr	r3, [pc, #300]	; (800086c <HAL_UART_RxCpltCallback+0x2e4>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	f242 7210 	movw	r2, #10000	; 0x2710
 8000744:	4293      	cmp	r3, r2
 8000746:	d116      	bne.n	8000776 <HAL_UART_RxCpltCallback+0x1ee>
		      {period=1000;
 8000748:	4b48      	ldr	r3, [pc, #288]	; (800086c <HAL_UART_RxCpltCallback+0x2e4>)
 800074a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074e:	801a      	strh	r2, [r3, #0]
				strcpy((char *)cliBufferTX, "period:0.1s");
 8000750:	4a38      	ldr	r2, [pc, #224]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000752:	4b47      	ldr	r3, [pc, #284]	; (8000870 <HAL_UART_RxCpltCallback+0x2e8>)
 8000754:	4614      	mov	r4, r2
 8000756:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000758:	6020      	str	r0, [r4, #0]
 800075a:	6061      	str	r1, [r4, #4]
 800075c:	60a2      	str	r2, [r4, #8]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 800075e:	4835      	ldr	r0, [pc, #212]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000760:	f7ff fcfe 	bl	8000160 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076c:	4931      	ldr	r1, [pc, #196]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 800076e:	4832      	ldr	r0, [pc, #200]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 8000770:	f001 fc89 	bl	8002086 <HAL_UART_Transmit>
 8000774:	e041      	b.n	80007fa <HAL_UART_RxCpltCallback+0x272>
		      }

		      else
		      {period=10000;
 8000776:	4b3d      	ldr	r3, [pc, #244]	; (800086c <HAL_UART_RxCpltCallback+0x2e4>)
 8000778:	f242 7210 	movw	r2, #10000	; 0x2710
 800077c:	801a      	strh	r2, [r3, #0]
				strcpy((char *)cliBufferTX, "period:1s");
 800077e:	4a2d      	ldr	r2, [pc, #180]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <HAL_UART_RxCpltCallback+0x2ec>)
 8000782:	cb03      	ldmia	r3!, {r0, r1}
 8000784:	6010      	str	r0, [r2, #0]
 8000786:	6051      	str	r1, [r2, #4]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	8113      	strh	r3, [r2, #8]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 800078c:	4829      	ldr	r0, [pc, #164]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 800078e:	f7ff fce7 	bl	8000160 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	4926      	ldr	r1, [pc, #152]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 800079c:	4826      	ldr	r0, [pc, #152]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 800079e:	f001 fc72 	bl	8002086 <HAL_UART_Transmit>
 80007a2:	e02a      	b.n	80007fa <HAL_UART_RxCpltCallback+0x272>
		      }

		   }
		 else if (strcmp(cliBufferTX,"help")==0)
 80007a4:	4934      	ldr	r1, [pc, #208]	; (8000878 <HAL_UART_RxCpltCallback+0x2f0>)
 80007a6:	4823      	ldr	r0, [pc, #140]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007a8:	f7ff fcd0 	bl	800014c <strcmp>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d113      	bne.n	80007da <HAL_UART_RxCpltCallback+0x252>
		  	  {
		    	  strcpy(( char*)cliBufferTX, " enter 'turn' to open and close LED\r\n enter 'query' to see the state of LED\r\n enter 'Change'to Change the period of the Blinking light\r\n enter 'help' to get help\r\n");
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <HAL_UART_RxCpltCallback+0x2f4>)
 80007b6:	4610      	mov	r0, r2
 80007b8:	4619      	mov	r1, r3
 80007ba:	23a4      	movs	r3, #164	; 0xa4
 80007bc:	461a      	mov	r2, r3
 80007be:	f002 f86f 	bl	80028a0 <memcpy>
			  	  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80007c2:	481c      	ldr	r0, [pc, #112]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007c4:	f7ff fccc 	bl	8000160 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	4918      	ldr	r1, [pc, #96]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007d2:	4819      	ldr	r0, [pc, #100]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 80007d4:	f001 fc57 	bl	8002086 <HAL_UART_Transmit>
 80007d8:	e00f      	b.n	80007fa <HAL_UART_RxCpltCallback+0x272>
			  }
			 else
			  { strcpy(( char*)cliBufferTX, "error\r\n");
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HAL_UART_RxCpltCallback+0x2f8>)
 80007de:	cb03      	ldmia	r3!, {r0, r1}
 80007e0:	6010      	str	r0, [r2, #0]
 80007e2:	6051      	str	r1, [r2, #4]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80007e4:	4813      	ldr	r0, [pc, #76]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007e6:	f7ff fcbb 	bl	8000160 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	4910      	ldr	r1, [pc, #64]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 80007f6:	f001 fc46 	bl	8002086 <HAL_UART_Transmit>
			  }
        strcpy((char*)cliBufferTX, "\x1b[u");                                                 /**/
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <HAL_UART_RxCpltCallback+0x2fc>)
 80007fe:	6810      	ldr	r0, [r2, #0]
 8000800:	6018      	str	r0, [r3, #0]
        HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000804:	f7ff fcac 	bl	8000160 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	4908      	ldr	r1, [pc, #32]	; (8000834 <HAL_UART_RxCpltCallback+0x2ac>)
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 8000814:	f001 fc37 	bl	8002086 <HAL_UART_Transmit>
		i=0;
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_UART_RxCpltCallback+0x2a4>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	4903      	ldr	r1, [pc, #12]	; (8000830 <HAL_UART_RxCpltCallback+0x2a8>)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_UART_RxCpltCallback+0x2b0>)
 8000824:	f001 fcc1 	bl	80021aa <HAL_UART_Receive_IT>
		 HAL_UART_Transmit(&huart3,p,1,1000);
		 i++;
		 HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);

		}
}
 8000828:	e07b      	b.n	8000922 <HAL_UART_RxCpltCallback+0x39a>
 800082a:	bf00      	nop
 800082c:	20000180 	.word	0x20000180
 8000830:	20000184 	.word	0x20000184
 8000834:	200000b4 	.word	0x200000b4
 8000838:	20000074 	.word	0x20000074
 800083c:	08002910 	.word	0x08002910
 8000840:	08002914 	.word	0x08002914
 8000844:	0800291c 	.word	0x0800291c
 8000848:	08002924 	.word	0x08002924
 800084c:	0800292c 	.word	0x0800292c
 8000850:	40010800 	.word	0x40010800
 8000854:	2000017c 	.word	0x2000017c
 8000858:	08002934 	.word	0x08002934
 800085c:	08002950 	.word	0x08002950
 8000860:	08002958 	.word	0x08002958
 8000864:	08002960 	.word	0x08002960
 8000868:	08002968 	.word	0x08002968
 800086c:	20000198 	.word	0x20000198
 8000870:	08002970 	.word	0x08002970
 8000874:	0800297c 	.word	0x0800297c
 8000878:	08002988 	.word	0x08002988
 800087c:	08002990 	.word	0x08002990
 8000880:	08002a34 	.word	0x08002a34
 8000884:	08002a3c 	.word	0x08002a3c
	else if( cliBufferTX[i]=='\177')								//if it is backspace,
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 800088a:	f993 3000 	ldrsb.w	r3, [r3]
 800088e:	461a      	mov	r2, r3
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <HAL_UART_RxCpltCallback+0x3a8>)
 8000892:	5c9b      	ldrb	r3, [r3, r2]
 8000894:	2b7f      	cmp	r3, #127	; 0x7f
 8000896:	d126      	bne.n	80008e6 <HAL_UART_RxCpltCallback+0x35e>
		  p=&cliBufferTX[i];
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 800089a:	f993 3000 	ldrsb.w	r3, [r3]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <HAL_UART_RxCpltCallback+0x3a8>)
 80008a2:	4413      	add	r3, r2
 80008a4:	4a23      	ldr	r2, [pc, #140]	; (8000934 <HAL_UART_RxCpltCallback+0x3ac>)
 80008a6:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart3,p,1,1000);
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <HAL_UART_RxCpltCallback+0x3ac>)
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	2201      	movs	r2, #1
 80008b2:	4821      	ldr	r0, [pc, #132]	; (8000938 <HAL_UART_RxCpltCallback+0x3b0>)
 80008b4:	f001 fbe7 	bl	8002086 <HAL_UART_Transmit>
		  i--;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 80008ba:	f993 3000 	ldrsb.w	r3, [r3]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 80008c8:	701a      	strb	r2, [r3, #0]
		  if(i<0) i=0;                                              //if it is begin location
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 80008cc:	f993 3000 	ldrsb.w	r3, [r3]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da02      	bge.n	80008da <HAL_UART_RxCpltCallback+0x352>
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 80008da:	2201      	movs	r2, #1
 80008dc:	4917      	ldr	r1, [pc, #92]	; (800093c <HAL_UART_RxCpltCallback+0x3b4>)
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <HAL_UART_RxCpltCallback+0x3b0>)
 80008e0:	f001 fc63 	bl	80021aa <HAL_UART_Receive_IT>
}
 80008e4:	e01d      	b.n	8000922 <HAL_UART_RxCpltCallback+0x39a>
		 p=&cliBufferTX[i];
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 80008e8:	f993 3000 	ldrsb.w	r3, [r3]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_UART_RxCpltCallback+0x3a8>)
 80008f0:	4413      	add	r3, r2
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_RxCpltCallback+0x3ac>)
 80008f4:	6013      	str	r3, [r2, #0]
		 HAL_UART_Transmit(&huart3,p,1,1000);
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_UART_RxCpltCallback+0x3ac>)
 80008f8:	6819      	ldr	r1, [r3, #0]
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	2201      	movs	r2, #1
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <HAL_UART_RxCpltCallback+0x3b0>)
 8000902:	f001 fbc0 	bl	8002086 <HAL_UART_Transmit>
		 i++;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 8000908:	f993 3000 	ldrsb.w	r3, [r3]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3301      	adds	r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	b25a      	sxtb	r2, r3
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_UART_RxCpltCallback+0x3a4>)
 8000916:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 8000918:	2201      	movs	r2, #1
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <HAL_UART_RxCpltCallback+0x3b4>)
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <HAL_UART_RxCpltCallback+0x3b0>)
 800091e:	f001 fc44 	bl	80021aa <HAL_UART_Receive_IT>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bdb0      	pop	{r4, r5, r7, pc}
 800092a:	bf00      	nop
 800092c:	20000180 	.word	0x20000180
 8000930:	200000b4 	.word	0x200000b4
 8000934:	20000028 	.word	0x20000028
 8000938:	20000074 	.word	0x20000074
 800093c:	20000184 	.word	0x20000184

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <HAL_MspInit+0x5c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x5c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_MspInit+0x60>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_MspInit+0x60>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010000 	.word	0x40010000

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0x34>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10b      	bne.n	80009da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_TIM_Base_MspInit+0x38>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_TIM_Base_MspInit+0x38>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_TIM_Base_MspInit+0x38>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40000800 	.word	0x40000800
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <HAL_UART_MspInit+0x9c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d139      	bne.n	8000a80 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_UART_MspInit+0xa0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480f      	ldr	r0, [pc, #60]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a52:	f000 fa65 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4809      	ldr	r0, [pc, #36]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a6c:	f000 fa58 	bl	8000f20 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2027      	movs	r0, #39	; 0x27
 8000a76:	f000 f9a6 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a7a:	2027      	movs	r0, #39	; 0x27
 8000a7c:	f000 f9bf 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f87e 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART3_IRQHandler+0x10>)
 8000aee:	f001 fbb1 	bl	8002254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000074 	.word	0x20000074

08000afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b0a:	e003      	b.n	8000b14 <LoopCopyDataInit>

08000b0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b12:	3104      	adds	r1, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b1c:	d3f6      	bcc.n	8000b0c <CopyDataInit>
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b20:	e002      	b.n	8000b28 <LoopFillZerobss>

08000b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b24:	f842 3b04 	str.w	r3, [r2], #4

08000b28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b2c:	d3f9      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2e:	f7ff ffe5 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f001 fe91 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fb1b 	bl	8000170 <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b3c:	08002a74 	.word	0x08002a74
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b44:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b4c:	200001a0 	.word	0x200001a0

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f923 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff feec 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f93b 	bl	8000e1a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f903 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	2000019c 	.word	0x2000019c

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	2000019c 	.word	0x2000019c

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4906      	ldr	r1, [pc, #24]	; (8000cb0 <__NVIC_EnableIRQ+0x34>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff90 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff2d 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff42 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff35 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d005      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e051      	b.n	8000efa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 020e 	bic.w	r2, r2, #14
 8000e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_DMA_Abort_IT+0xd0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d029      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0xa0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_DMA_Abort_IT+0xd4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d022      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x9c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_DMA_Abort_IT+0xd8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01a      	beq.n	8000eca <HAL_DMA_Abort_IT+0x96>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_DMA_Abort_IT+0xdc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d012      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x90>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_DMA_Abort_IT+0xe0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00a      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x8a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_DMA_Abort_IT+0xe4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d102      	bne.n	8000eb8 <HAL_DMA_Abort_IT+0x84>
 8000eb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eb6:	e00e      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ebc:	e00b      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	e008      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	e005      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ece:	e002      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	e000      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_DMA_Abort_IT+0xe8>)
 8000ed8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	4798      	blx	r3
    } 
  }
  return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40020008 	.word	0x40020008
 8000f08:	4002001c 	.word	0x4002001c
 8000f0c:	40020030 	.word	0x40020030
 8000f10:	40020044 	.word	0x40020044
 8000f14:	40020058 	.word	0x40020058
 8000f18:	4002006c 	.word	0x4002006c
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e127      	b.n	8001184 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8116 	bne.w	800117e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d034      	beq.n	8000fc4 <HAL_GPIO_Init+0xa4>
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d80d      	bhi.n	8000f7a <HAL_GPIO_Init+0x5a>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x9a>
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d804      	bhi.n	8000f70 <HAL_GPIO_Init+0x50>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d031      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d01c      	beq.n	8000fa8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6e:	e048      	b.n	8001002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d043      	beq.n	8000ffc <HAL_GPIO_Init+0xdc>
 8000f74:	2b11      	cmp	r3, #17
 8000f76:	d01b      	beq.n	8000fb0 <HAL_GPIO_Init+0x90>
          break;
 8000f78:	e043      	b.n	8001002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f7a:	4a89      	ldr	r2, [pc, #548]	; (80011a0 <HAL_GPIO_Init+0x280>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d026      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f80:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <HAL_GPIO_Init+0x280>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d806      	bhi.n	8000f94 <HAL_GPIO_Init+0x74>
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_GPIO_Init+0x284>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d020      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f8c:	4a86      	ldr	r2, [pc, #536]	; (80011a8 <HAL_GPIO_Init+0x288>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01d      	beq.n	8000fce <HAL_GPIO_Init+0xae>
          break;
 8000f92:	e036      	b.n	8001002 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f94:	4a85      	ldr	r2, [pc, #532]	; (80011ac <HAL_GPIO_Init+0x28c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000f9a:	4a85      	ldr	r2, [pc, #532]	; (80011b0 <HAL_GPIO_Init+0x290>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d016      	beq.n	8000fce <HAL_GPIO_Init+0xae>
 8000fa0:	4a84      	ldr	r2, [pc, #528]	; (80011b4 <HAL_GPIO_Init+0x294>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0xae>
          break;
 8000fa6:	e02c      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e028      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e023      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	623b      	str	r3, [r7, #32]
          break;
 8000fc2:	e01e      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	330c      	adds	r3, #12
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e019      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e012      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d105      	bne.n	8000ff0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	611a      	str	r2, [r3, #16]
          break;
 8000fee:	e008      	b.n	8001002 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	615a      	str	r2, [r3, #20]
          break;
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2bff      	cmp	r3, #255	; 0xff
 8001006:	d801      	bhi.n	800100c <HAL_GPIO_Init+0xec>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	e001      	b.n	8001010 <HAL_GPIO_Init+0xf0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3304      	adds	r3, #4
 8001010:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2bff      	cmp	r3, #255	; 0xff
 8001016:	d802      	bhi.n	800101e <HAL_GPIO_Init+0xfe>
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x104>
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3b08      	subs	r3, #8
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	210f      	movs	r1, #15
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	401a      	ands	r2, r3
 8001036:	6a39      	ldr	r1, [r7, #32]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	431a      	orrs	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8096 	beq.w	800117e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001052:	4b59      	ldr	r3, [pc, #356]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a58      	ldr	r2, [pc, #352]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x298>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800106a:	4a54      	ldr	r2, [pc, #336]	; (80011bc <HAL_GPIO_Init+0x29c>)
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x19e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4a      	ldr	r2, [pc, #296]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x19a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x196>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x192>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x1a0>
 80010be:	2300      	movs	r3, #0
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d0:	493a      	ldr	r1, [pc, #232]	; (80011bc <HAL_GPIO_Init+0x29c>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ea:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4938      	ldr	r1, [pc, #224]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4933      	ldr	r1, [pc, #204]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001102:	4013      	ands	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	492e      	ldr	r1, [pc, #184]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
 800111e:	e006      	b.n	800112e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	43db      	mvns	r3, r3
 8001128:	4929      	ldr	r1, [pc, #164]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800112a:	4013      	ands	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4924      	ldr	r1, [pc, #144]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	43db      	mvns	r3, r3
 8001150:	491f      	ldr	r1, [pc, #124]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001152:	4013      	ands	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	491a      	ldr	r1, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	60cb      	str	r3, [r1, #12]
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	43db      	mvns	r3, r3
 8001178:	4915      	ldr	r1, [pc, #84]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 800117a:	4013      	ands	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	fa22 f303 	lsr.w	r3, r2, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f47f aed0 	bne.w	8000f34 <HAL_GPIO_Init+0x14>
  }
}
 8001194:	bf00      	nop
 8001196:	372c      	adds	r7, #44	; 0x2c
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	10210000 	.word	0x10210000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	10120000 	.word	0x10120000
 80011ac:	10310000 	.word	0x10310000
 80011b0:	10320000 	.word	0x10320000
 80011b4:	10220000 	.word	0x10220000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40011400 	.word	0x40011400
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e001      	b.n	80011f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	807b      	strh	r3, [r7, #2]
 800120e:	4613      	mov	r3, r2
 8001210:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001212:	787b      	ldrb	r3, [r7, #1]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800121e:	e003      	b.n	8001228 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	041a      	lsls	r2, r3, #16
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	611a      	str	r2, [r3, #16]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001232:	b480      	push	{r7}
 8001234:	b085      	sub	sp, #20
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	041a      	lsls	r2, r3, #16
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43d9      	mvns	r1, r3
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	400b      	ands	r3, r1
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e26c      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8087 	beq.w	8001392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001284:	4b92      	ldr	r3, [pc, #584]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b04      	cmp	r3, #4
 800128e:	d00c      	beq.n	80012aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001290:	4b8f      	ldr	r3, [pc, #572]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d112      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5e>
 800129c:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d10b      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012aa:	4b89      	ldr	r3, [pc, #548]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d06c      	beq.n	8001390 <HAL_RCC_OscConfig+0x12c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d168      	bne.n	8001390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e246      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x76>
 80012cc:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a7f      	ldr	r2, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e02e      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x98>
 80012e2:	4b7b      	ldr	r3, [pc, #492]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a7a      	ldr	r2, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a77      	ldr	r2, [pc, #476]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0xbc>
 8001306:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a71      	ldr	r2, [pc, #452]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6e      	ldr	r2, [pc, #440]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 8001320:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a6a      	ldr	r2, [pc, #424]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc60 	bl	8000c04 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc5c 	bl	8000c04 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1fa      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5d      	ldr	r3, [pc, #372]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xe4>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc4c 	bl	8000c04 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fc48 	bl	8000c04 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1e6      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x10c>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139e:	4b4c      	ldr	r3, [pc, #304]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x18c>
 80013b6:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x176>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1ba      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4939      	ldr	r1, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc01 	bl	8000c04 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fbfd 	bl	8000c04 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e19b      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4927      	ldr	r1, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fbe0 	bl	8000c04 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fbdc 	bl	8000c04 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e17a      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03a      	beq.n	80014e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d019      	beq.n	80014ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_RCC_OscConfig+0x274>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff fbc0 	bl	8000c04 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fbbc 	bl	8000c04 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e15a      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f000 fada 	bl	8001a60 <RCC_Delay>
 80014ac:	e01c      	b.n	80014e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_RCC_OscConfig+0x274>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fba6 	bl	8000c04 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ba:	e00f      	b.n	80014dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fba2 	bl	8000c04 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d908      	bls.n	80014dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e140      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	42420000 	.word	0x42420000
 80014d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	4b9e      	ldr	r3, [pc, #632]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1e9      	bne.n	80014bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a6 	beq.w	8001642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b97      	ldr	r3, [pc, #604]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b94      	ldr	r3, [pc, #592]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a93      	ldr	r2, [pc, #588]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b91      	ldr	r3, [pc, #580]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b8e      	ldr	r3, [pc, #568]	; (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d118      	bne.n	8001560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a8a      	ldr	r2, [pc, #552]	; (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fb63 	bl	8000c04 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001542:	f7ff fb5f 	bl	8000c04 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b64      	cmp	r3, #100	; 0x64
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0fd      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x312>
 8001568:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4a7a      	ldr	r2, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6213      	str	r3, [r2, #32]
 8001574:	e02d      	b.n	80015d2 <HAL_RCC_OscConfig+0x36e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x334>
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b73      	ldr	r3, [pc, #460]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a72      	ldr	r2, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	e01c      	b.n	80015d2 <HAL_RCC_OscConfig+0x36e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d10c      	bne.n	80015ba <HAL_RCC_OscConfig+0x356>
 80015a0:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6213      	str	r3, [r2, #32]
 80015ac:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a69      	ldr	r2, [pc, #420]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0x36e>
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a66      	ldr	r2, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	4b64      	ldr	r3, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a63      	ldr	r2, [pc, #396]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d015      	beq.n	8001606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fb13 	bl	8000c04 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff fb0f 	bl	8000c04 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0ab      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	4b57      	ldr	r3, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ee      	beq.n	80015e2 <HAL_RCC_OscConfig+0x37e>
 8001604:	e014      	b.n	8001630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fafd 	bl	8000c04 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff faf9 	bl	8000c04 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e095      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ee      	bne.n	800160e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d105      	bne.n	8001642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001636:	4b48      	ldr	r3, [pc, #288]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a47      	ldr	r2, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8081 	beq.w	800174e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d061      	beq.n	800171c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d146      	bne.n	80016ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x4fc>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff facd 	bl	8000c04 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fac9 	bl	8000c04 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e067      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	492d      	ldr	r1, [pc, #180]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a19      	ldr	r1, [r3, #32]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	430b      	orrs	r3, r1
 80016ba:	4927      	ldr	r1, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x4fc>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fa9d 	bl	8000c04 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fa99 	bl	8000c04 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e037      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x46a>
 80016ec:	e02f      	b.n	800174e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_RCC_OscConfig+0x4fc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa86 	bl	8000c04 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa82 	bl	8000c04 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e020      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x498>
 800171a:	e018      	b.n	800174e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e013      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	429a      	cmp	r2, r3
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	40007000 	.word	0x40007000
 8001760:	42420060 	.word	0x42420060

08001764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0d0      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d910      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0207 	bic.w	r2, r3, #7
 800178e:	4965      	ldr	r1, [pc, #404]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d040      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d115      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e073      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4936      	ldr	r1, [pc, #216]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff f9d6 	bl	8000c04 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff f9d2 	bl	8000c04 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e053      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d210      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 0207 	bic.w	r2, r3, #7
 800189a:	4922      	ldr	r1, [pc, #136]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4601      	mov	r1, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	fa21 f303 	lsr.w	r3, r1, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1cc>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f934 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40022000 	.word	0x40022000
 8001928:	40021000 	.word	0x40021000
 800192c:	08002a54 	.word	0x08002a54
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b490      	push	{r4, r7}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001940:	1d3c      	adds	r4, r7, #4
 8001942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b04      	cmp	r3, #4
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 8001972:	2b08      	cmp	r3, #8
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x46>
 8001976:	e02d      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800197a:	623b      	str	r3, [r7, #32]
      break;
 800197c:	e02d      	b.n	80019da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	0c9b      	lsrs	r3, r3, #18
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800198a:	4413      	add	r3, r2
 800198c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001990:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0c5b      	lsrs	r3, r3, #17
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019aa:	4413      	add	r3, r2
 80019ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019b6:	fb02 f203 	mul.w	r2, r2, r3
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	e004      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	623b      	str	r3, [r7, #32]
      break;
 80019d2:	e002      	b.n	80019da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d6:	623b      	str	r3, [r7, #32]
      break;
 80019d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019da:	6a3b      	ldr	r3, [r7, #32]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc90      	pop	{r4, r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	08002a40 	.word	0x08002a40
 80019ec:	08002a50 	.word	0x08002a50
 80019f0:	40021000 	.word	0x40021000
 80019f4:	007a1200 	.word	0x007a1200
 80019f8:	003d0900 	.word	0x003d0900

080019fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000000 	.word	0x20000000

08001a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a14:	f7ff fff2 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a18:	4601      	mov	r1, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08002a64 	.word	0x08002a64

08001a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a40:	4601      	mov	r1, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0adb      	lsrs	r3, r3, #11
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	08002a64 	.word	0x08002a64

08001a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <RCC_Delay+0x34>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <RCC_Delay+0x38>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0a5b      	lsrs	r3, r3, #9
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a7c:	bf00      	nop
  }
  while (Delay --);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	60fa      	str	r2, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f9      	bne.n	8001a7c <RCC_Delay+0x1c>
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e041      	b.n	8001b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe ff74 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f000 f930 	bl	8001d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d001      	beq.n	8001b54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_TIM_Base_Start+0x88>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00e      	beq.n	8001b84 <HAL_TIM_Base_Start+0x48>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6e:	d009      	beq.n	8001b84 <HAL_TIM_Base_Start+0x48>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_TIM_Base_Start+0x8c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_TIM_Base_Start+0x48>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_TIM_Base_Start+0x90>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d111      	bne.n	8001ba8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d010      	beq.n	8001bb8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba6:	e007      	b.n	8001bb8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800

08001bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_TIM_ConfigClockSource+0x18>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0a6      	b.n	8001d36 <HAL_TIM_ConfigClockSource+0x166>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d067      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0x120>
 8001c20:	2b40      	cmp	r3, #64	; 0x40
 8001c22:	d80b      	bhi.n	8001c3c <HAL_TIM_ConfigClockSource+0x6c>
 8001c24:	2b10      	cmp	r3, #16
 8001c26:	d073      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x140>
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d802      	bhi.n	8001c32 <HAL_TIM_ConfigClockSource+0x62>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06f      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001c30:	e078      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d06c      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x140>
 8001c36:	2b30      	cmp	r3, #48	; 0x30
 8001c38:	d06a      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001c3a:	e073      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c3c:	2b70      	cmp	r3, #112	; 0x70
 8001c3e:	d00d      	beq.n	8001c5c <HAL_TIM_ConfigClockSource+0x8c>
 8001c40:	2b70      	cmp	r3, #112	; 0x70
 8001c42:	d804      	bhi.n	8001c4e <HAL_TIM_ConfigClockSource+0x7e>
 8001c44:	2b50      	cmp	r3, #80	; 0x50
 8001c46:	d033      	beq.n	8001cb0 <HAL_TIM_ConfigClockSource+0xe0>
 8001c48:	2b60      	cmp	r3, #96	; 0x60
 8001c4a:	d041      	beq.n	8001cd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001c4c:	e06a      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c52:	d066      	beq.n	8001d22 <HAL_TIM_ConfigClockSource+0x152>
 8001c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c58:	d017      	beq.n	8001c8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001c5a:	e063      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f000 f941 	bl	8001ef2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]
      break;
 8001c88:	e04c      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f000 f92a 	bl	8001ef2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cac:	609a      	str	r2, [r3, #8]
      break;
 8001cae:	e039      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f000 f8a1 	bl	8001e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2150      	movs	r1, #80	; 0x50
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f8f8 	bl	8001ebe <TIM_ITRx_SetConfig>
      break;
 8001cce:	e029      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f000 f8bf 	bl	8001e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2160      	movs	r1, #96	; 0x60
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f8e8 	bl	8001ebe <TIM_ITRx_SetConfig>
      break;
 8001cee:	e019      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f000 f881 	bl	8001e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f8d8 	bl	8001ebe <TIM_ITRx_SetConfig>
      break;
 8001d0e:	e009      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 f8cf 	bl	8001ebe <TIM_ITRx_SetConfig>
        break;
 8001d20:	e000      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <TIM_Base_SetConfig+0xb8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <TIM_Base_SetConfig+0xbc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <TIM_Base_SetConfig+0xc0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <TIM_Base_SetConfig+0xb8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <TIM_Base_SetConfig+0xbc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <TIM_Base_SetConfig+0xc0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <TIM_Base_SetConfig+0xb8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d103      	bne.n	8001de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	615a      	str	r2, [r3, #20]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40000800 	.word	0x40000800

08001e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f023 0201 	bic.w	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f023 030a 	bic.w	r3, r3, #10
 8001e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	621a      	str	r2, [r3, #32]
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f023 0210 	bic.w	r2, r3, #16
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	621a      	str	r2, [r3, #32]
}
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f043 0307 	orr.w	r3, r3, #7
 8001ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e046      	b.n	8001fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d009      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800

08001fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e03f      	b.n	800207e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fcea 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2224      	movs	r2, #36	; 0x24
 800201c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800202e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fb83 	bl	800273c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08a      	sub	sp, #40	; 0x28
 800208a:	af02      	add	r7, sp, #8
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d17c      	bne.n	80021a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_UART_Transmit+0x2c>
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e075      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_UART_Transmit+0x3e>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e06e      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	; 0x21
 80020d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020da:	f7fe fd93 	bl	8000c04 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	d108      	bne.n	8002108 <HAL_UART_Transmit+0x82>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	e003      	b.n	8002110 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002118:	e02a      	b.n	8002170 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f9a7 	bl	8002478 <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e036      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002148:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3302      	adds	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e007      	b.n	8002162 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3301      	adds	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1cf      	bne.n	800211a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2200      	movs	r2, #0
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f977 	bl	8002478 <UART_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e006      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	4613      	mov	r3, r2
 80021b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d140      	bne.n	8002246 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_UART_Receive_IT+0x26>
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e039      	b.n	8002248 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Receive_IT+0x38>
 80021de:	2302      	movs	r3, #2
 80021e0:	e032      	b.n	8002248 <HAL_UART_Receive_IT+0x9e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2222      	movs	r2, #34	; 0x22
 8002206:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002220:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_UART_IRQHandler+0x52>
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f9cc 	bl	800263c <UART_Receive_IT>
      return;
 80022a4:	e0d1      	b.n	800244a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80b0 	beq.w	800240e <HAL_UART_IRQHandler+0x1ba>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_UART_IRQHandler+0x70>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a5 	beq.w	800240e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_UART_IRQHandler+0x90>
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_UART_IRQHandler+0xb0>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	f043 0202 	orr.w	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_UART_IRQHandler+0xd0>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00f      	beq.n	800234e <HAL_UART_IRQHandler+0xfa>
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <HAL_UART_IRQHandler+0xee>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	f043 0208 	orr.w	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d078      	beq.n	8002448 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_UART_IRQHandler+0x11c>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f966 	bl	800263c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_UART_IRQHandler+0x144>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d031      	beq.n	80023fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8b7 	bl	800250c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_UART_IRQHandler+0x1fc>)
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fd2f 	bl	8000e34 <HAL_DMA_Abort_IT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e6:	4610      	mov	r0, r2
 80023e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ea:	e00e      	b.n	800240a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f83a 	bl	8002466 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f2:	e00a      	b.n	800240a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f836 	bl	8002466 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fa:	e006      	b.n	800240a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f832 	bl	8002466 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002408:	e01e      	b.n	8002448 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240a:	bf00      	nop
    return;
 800240c:	e01c      	b.n	8002448 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_UART_IRQHandler+0x1d6>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8a3 	bl	800256e <UART_Transmit_IT>
    return;
 8002428:	e00f      	b.n	800244a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_UART_IRQHandler+0x1f6>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f8e4 	bl	800260c <UART_EndTransmit_IT>
    return;
 8002444:	bf00      	nop
 8002446:	e000      	b.n	800244a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002448:	bf00      	nop
  }
}
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	08002547 	.word	0x08002547

08002454 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002488:	e02c      	b.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d028      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002498:	f7fe fbb4 	bl	8000c04 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d21d      	bcs.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e00f      	b.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d0c3      	beq.n	800248a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002522:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff ff80 	bl	8002466 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b21      	cmp	r3, #33	; 0x21
 8002580:	d13e      	bne.n	8002600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d114      	bne.n	80025b6 <UART_Transmit_IT+0x48>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d110      	bne.n	80025b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	1c9a      	adds	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	621a      	str	r2, [r3, #32]
 80025b4:	e008      	b.n	80025c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6211      	str	r1, [r2, #32]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4619      	mov	r1, r3
 80025d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10f      	bne.n	80025fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff11 	bl	8002454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b22      	cmp	r3, #34	; 0x22
 800264e:	d170      	bne.n	8002732 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002658:	d117      	bne.n	800268a <UART_Receive_IT+0x4e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002678:	b29a      	uxth	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	1c9a      	adds	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
 8002688:	e026      	b.n	80026d8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	d007      	beq.n	80026ae <UART_Receive_IT+0x72>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <UART_Receive_IT+0x80>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e008      	b.n	80026ce <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4619      	mov	r1, r3
 80026e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d120      	bne.n	800272e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0220 	bic.w	r2, r2, #32
 80026fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800270a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7fd ff2f 	bl	8000588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e002      	b.n	8002734 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002776:	f023 030c 	bic.w	r3, r3, #12
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	430b      	orrs	r3, r1
 8002782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <UART_SetConfig+0x114>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027a4:	f7ff f948 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	e002      	b.n	80027b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027ac:	f7ff f930 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
 80027b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009a      	lsls	r2, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <UART_SetConfig+0x118>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	0119      	lsls	r1, r3, #4
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <UART_SetConfig+0x118>)
 80027ea:	fba3 0302 	umull	r0, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2064      	movs	r0, #100	; 0x64
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <UART_SetConfig+0x118>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	4419      	add	r1, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <UART_SetConfig+0x118>)
 8002822:	fba3 0302 	umull	r0, r3, r3, r2
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2064      	movs	r0, #100	; 0x64
 800282a:	fb00 f303 	mul.w	r3, r0, r3
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	3332      	adds	r3, #50	; 0x32
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <UART_SetConfig+0x118>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	440a      	add	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40013800 	.word	0x40013800
 8002854:	51eb851f 	.word	0x51eb851f

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2500      	movs	r5, #0
 800285c:	4e0c      	ldr	r6, [pc, #48]	; (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <__libc_init_array+0x3c>)
 8002860:	1ba4      	subs	r4, r4, r6
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a5      	cmp	r5, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	f000 f82e 	bl	80028c8 <_init>
 800286c:	2500      	movs	r5, #0
 800286e:	4e0a      	ldr	r6, [pc, #40]	; (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <__libc_init_array+0x44>)
 8002872:	1ba4      	subs	r4, r4, r6
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a5      	cmp	r5, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002880:	4798      	blx	r3
 8002882:	3501      	adds	r5, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800288a:	4798      	blx	r3
 800288c:	3501      	adds	r5, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	08002a6c 	.word	0x08002a6c
 8002894:	08002a6c 	.word	0x08002a6c
 8002898:	08002a6c 	.word	0x08002a6c
 800289c:	08002a70 	.word	0x08002a70

080028a0 <memcpy>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	1e43      	subs	r3, r0, #1
 80028a4:	440a      	add	r2, r1
 80028a6:	4291      	cmp	r1, r2
 80028a8:	d100      	bne.n	80028ac <memcpy+0xc>
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028b4:	e7f7      	b.n	80028a6 <memcpy+0x6>

080028b6 <memset>:
 80028b6:	4603      	mov	r3, r0
 80028b8:	4402      	add	r2, r0
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d100      	bne.n	80028c0 <memset+0xa>
 80028be:	4770      	bx	lr
 80028c0:	f803 1b01 	strb.w	r1, [r3], #1
 80028c4:	e7f9      	b.n	80028ba <memset+0x4>
	...

080028c8 <_init>:
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	bf00      	nop
 80028cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ce:	bc08      	pop	{r3}
 80028d0:	469e      	mov	lr, r3
 80028d2:	4770      	bx	lr

080028d4 <_fini>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr
