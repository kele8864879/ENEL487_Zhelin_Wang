
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002814  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002be8  08002be8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be8  08002be8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08002c60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002c60  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa8f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001954  00000000  00000000  0002ab28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  0002cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b15  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008eae  00000000  00000000  0004557d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a3ed  00000000  00000000  0004e42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e0  00000000  00000000  000d8894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002908 	.word	0x08002908

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002908 	.word	0x08002908

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fe92 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 fbce 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 fc86 	bl	8000a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000184:	f000 fc5a 	bl	8000a3c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000188:	f000 fc0a 	bl	80009a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800018c:	48c9      	ldr	r0, [pc, #804]	; (80004b4 <main+0x344>)
 800018e:	f001 fe27 	bl	8001de0 <HAL_TIM_Base_Start>
    uint8_t *p;
    uint8_t cliBufferTX[200];
    uint8_t cliBufferRX[1024];


    strcpy((char*)cliBufferTX, "Testing CLI!\r\n");
 8000192:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000196:	4ac8      	ldr	r2, [pc, #800]	; (80004b8 <main+0x348>)
 8000198:	461c      	mov	r4, r3
 800019a:	4613      	mov	r3, r2
 800019c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019e:	c407      	stmia	r4!, {r0, r1, r2}
 80001a0:	8023      	strh	r3, [r4, #0]
 80001a2:	3402      	adds	r4, #2
 80001a4:	0c1b      	lsrs	r3, r3, #16
 80001a6:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001a8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80001ac:	4618      	mov	r0, r3
 80001ae:	f7ff ffd7 	bl	8000160 <strlen>
 80001b2:	4603      	mov	r3, r0
 80001b4:	b29a      	uxth	r2, r3
 80001b6:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80001ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001be:	48bf      	ldr	r0, [pc, #764]	; (80004bc <main+0x34c>)
 80001c0:	f002 f8b3 	bl	800232a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   i=0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
	   while(i<=10)
 80001ca:	e052      	b.n	8000272 <main+0x102>
	      {
	   	   if((HAL_UART_Receive(&huart2,cliBufferRX, 1,300) == HAL_OK))
 80001cc:	4639      	mov	r1, r7
 80001ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80001d2:	2201      	movs	r2, #1
 80001d4:	48b9      	ldr	r0, [pc, #740]	; (80004bc <main+0x34c>)
 80001d6:	f002 f93a 	bl	800244e <HAL_UART_Receive>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d148      	bne.n	8000272 <main+0x102>
	    	 	  {
	   		     cliBufferTX[i] = cliBufferRX[0];
 80001e0:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 80001e4:	463a      	mov	r2, r7
 80001e6:	7811      	ldrb	r1, [r2, #0]
 80001e8:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80001ec:	54d1      	strb	r1, [r2, r3]
	   		     if( cliBufferTX[i]=='\r')
 80001ee:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 80001f2:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80001f6:	5cd3      	ldrb	r3, [r2, r3]
 80001f8:	2b0d      	cmp	r3, #13
 80001fa:	d03f      	beq.n	800027c <main+0x10c>
	   		         break;
	   		     else if( cliBufferTX[i]=='\177')
 80001fc:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000200:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000204:	5cd3      	ldrb	r3, [r2, r3]
 8000206:	2b7f      	cmp	r3, #127	; 0x7f
 8000208:	d11d      	bne.n	8000246 <main+0xd6>
	   		    	 {
	   		    		p=&cliBufferTX[i];
 800020a:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 800020e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000212:	4413      	add	r3, r2
 8000214:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	   		    		HAL_UART_Transmit(&huart2,p,1,1000);
 8000218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021c:	2201      	movs	r2, #1
 800021e:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8000222:	48a6      	ldr	r0, [pc, #664]	; (80004bc <main+0x34c>)
 8000224:	f002 f881 	bl	800232a <HAL_UART_Transmit>
	   		    		i--;
 8000228:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 800022c:	b29b      	uxth	r3, r3
 800022e:	3b01      	subs	r3, #1
 8000230:	b29b      	uxth	r3, r3
 8000232:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
	   		    		if(i<0)i=0;
 8000236:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 800023a:	2b00      	cmp	r3, #0
 800023c:	da19      	bge.n	8000272 <main+0x102>
 800023e:	2300      	movs	r3, #0
 8000240:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 8000244:	e015      	b.n	8000272 <main+0x102>
	   	             }

	   	        else
	   	        {
	   	        	p=&cliBufferTX[i];
 8000246:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 800024a:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800024e:	4413      	add	r3, r2
 8000250:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	   	        	HAL_UART_Transmit(&huart2,p,1,1000);
 8000254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000258:	2201      	movs	r2, #1
 800025a:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 800025e:	4897      	ldr	r0, [pc, #604]	; (80004bc <main+0x34c>)
 8000260:	f002 f863 	bl	800232a <HAL_UART_Transmit>
	   	        	i++;
 8000264:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000268:	b29b      	uxth	r3, r3
 800026a:	3301      	adds	r3, #1
 800026c:	b29b      	uxth	r3, r3
 800026e:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
	   while(i<=10)
 8000272:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000276:	2b0a      	cmp	r3, #10
 8000278:	dda8      	ble.n	80001cc <main+0x5c>
 800027a:	e000      	b.n	800027e <main+0x10e>
	   		         break;
 800027c:	bf00      	nop
	   	        }
	    	 	 }
	       }

	      cliBufferTX[i]='\0';
 800027e:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000282:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000286:	2100      	movs	r1, #0
 8000288:	54d1      	strb	r1, [r2, r3]
	   	  cliBufferRX[0]='\r';
 800028a:	463b      	mov	r3, r7
 800028c:	220d      	movs	r2, #13
 800028e:	701a      	strb	r2, [r3, #0]
	   	  cliBufferRX[1]='\n';
 8000290:	463b      	mov	r3, r7
 8000292:	220a      	movs	r2, #10
 8000294:	705a      	strb	r2, [r3, #1]

	   	  HAL_UART_Transmit(&huart2,cliBufferRX,2,1000);
 8000296:	4639      	mov	r1, r7
 8000298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029c:	2202      	movs	r2, #2
 800029e:	4887      	ldr	r0, [pc, #540]	; (80004bc <main+0x34c>)
 80002a0:	f002 f843 	bl	800232a <HAL_UART_Transmit>

	   	  if(strcmp(cliBufferTX,"turn")==0)
 80002a4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80002a8:	4985      	ldr	r1, [pc, #532]	; (80004c0 <main+0x350>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff4e 	bl	800014c <strcmp>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <main+0x150>
	   	    	  {  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);}
 80002b6:	2120      	movs	r1, #32
 80002b8:	4882      	ldr	r0, [pc, #520]	; (80004c4 <main+0x354>)
 80002ba:	f001 f8ea 	bl	8001492 <HAL_GPIO_TogglePin>
 80002be:	e781      	b.n	80001c4 <main+0x54>

	   	  else if (strcmp(cliBufferTX,"query")==0)
 80002c0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80002c4:	4980      	ldr	r1, [pc, #512]	; (80004c8 <main+0x358>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff40 	bl	800014c <strcmp>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d130      	bne.n	8000334 <main+0x1c4>
	   	      			  {
	   	      		  	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 80002d2:	2120      	movs	r1, #32
 80002d4:	487b      	ldr	r0, [pc, #492]	; (80004c4 <main+0x354>)
 80002d6:	f001 f8ad 	bl	8001434 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d114      	bne.n	800030a <main+0x19a>
	   	      		  	  	  {
	   	      		  	  		strcpy((char *)cliBufferTX, "LED on\r\n");
 80002e0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80002e4:	4a79      	ldr	r2, [pc, #484]	; (80004cc <main+0x35c>)
 80002e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e8:	c303      	stmia	r3!, {r0, r1}
 80002ea:	701a      	strb	r2, [r3, #0]
	   	      		  	  		HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *) cliBufferTX), 1000) ;
 80002ec:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff35 	bl	8000160 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80002fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000302:	486e      	ldr	r0, [pc, #440]	; (80004bc <main+0x34c>)
 8000304:	f002 f811 	bl	800232a <HAL_UART_Transmit>
 8000308:	e75c      	b.n	80001c4 <main+0x54>
	   	      		  	  	  }
	   	      		  	  	  else
	   	      		  	  	  {
	   	      		  	  		strcpy((char *)cliBufferTX, "LED off\r\n");
 800030a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800030e:	4a70      	ldr	r2, [pc, #448]	; (80004d0 <main+0x360>)
 8000310:	ca07      	ldmia	r2, {r0, r1, r2}
 8000312:	c303      	stmia	r3!, {r0, r1}
 8000314:	801a      	strh	r2, [r3, #0]
	   	      		  	  		HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *) cliBufferTX), 1000) ;
 8000316:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff20 	bl	8000160 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	b29a      	uxth	r2, r3
 8000324:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8000328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032c:	4863      	ldr	r0, [pc, #396]	; (80004bc <main+0x34c>)
 800032e:	f001 fffc 	bl	800232a <HAL_UART_Transmit>
 8000332:	e747      	b.n	80001c4 <main+0x54>
	   	      		  	  	  }
	   	      			  }

	   	   else if (strcmp(cliBufferTX,"help")==0)
 8000334:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000338:	4966      	ldr	r1, [pc, #408]	; (80004d4 <main+0x364>)
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff06 	bl	800014c <strcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d117      	bne.n	8000376 <main+0x206>
	   	      	  	  	  {
	   	      		  	  	  strcpy(( char*)cliBufferTX, " enter 'turn' to open and close LED\r\n enter 'query' to see the state of LED\r\n enter 'measure' to measure a number of basic arithmetic operations\r\n enter 'help' to get help\r\n");
 8000346:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800034a:	4a63      	ldr	r2, [pc, #396]	; (80004d8 <main+0x368>)
 800034c:	4618      	mov	r0, r3
 800034e:	4611      	mov	r1, r2
 8000350:	23ae      	movs	r3, #174	; 0xae
 8000352:	461a      	mov	r2, r3
 8000354:	f002 fa1c 	bl	8002790 <memcpy>
	   	      		  	  	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000358:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff feff 	bl	8000160 <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	b29a      	uxth	r2, r3
 8000366:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	4853      	ldr	r0, [pc, #332]	; (80004bc <main+0x34c>)
 8000370:	f001 ffdb 	bl	800232a <HAL_UART_Transmit>
 8000374:	e726      	b.n	80001c4 <main+0x54>
	   	      	  	  	  }

	   	   else if (strcmp(cliBufferTX,"measure")==0)
 8000376:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800037a:	4958      	ldr	r1, [pc, #352]	; (80004dc <main+0x36c>)
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <strcmp>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 82a9 	bne.w	80008dc <main+0x76c>
	   	      {
	   		        int32_t a_32,b_32;
	   		        int64_t a_64,b_64;
	   		        int16_t previous;
	   		        uint32_t tick1 = 0,tick2 = 0,tick3 = 0,tick4 = 0,tick5 = 0,tick6 = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8000390:	2300      	movs	r3, #0
 8000392:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8000396:	2300      	movs	r3, #0
 8000398:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800039c:	2300      	movs	r3, #0
 800039e:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80003a2:	2300      	movs	r3, #0
 80003a4:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	   		        for (i = 0; i < 100; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 80003b4:	e0b5      	b.n	8000522 <main+0x3b2>
	   		          {
	   		            a_32 = rand();                                                               //generate the random values
 80003b6:	f002 f9ff 	bl	80027b8 <rand>
 80003ba:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
	   		            b_32 = rand();
 80003be:	f002 f9fb 	bl	80027b8 <rand>
 80003c2:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
	   		            a_64 = rand();
 80003c6:	f002 f9f7 	bl	80027b8 <rand>
 80003ca:	4603      	mov	r3, r0
 80003cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80003d0:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80003d4:	e9c2 3400 	strd	r3, r4, [r2]
	   		            b_64 = rand();
 80003d8:	f002 f9ee 	bl	80027b8 <rand>
 80003dc:	4603      	mov	r3, r0
 80003de:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80003e2:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80003e6:	e9c2 3400 	strd	r3, r4, [r2]

	   		            previous = timer_start();
 80003ea:	f000 fcc1 	bl	8000d70 <timer_start>
 80003ee:	4603      	mov	r3, r0
 80003f0:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		            a_32+b_32;
	   		            tick1 = tick1 + timer_stop(previous);
 80003f4:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fcc9 	bl	8000d90 <timer_stop>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8000406:	4413      	add	r3, r2
 8000408:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4

	   		            previous = timer_start();
 800040c:	f000 fcb0 	bl	8000d70 <timer_start>
 8000410:	4603      	mov	r3, r0
 8000412:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		            a_64+b_64;
	   		            tick2 = tick2 + timer_stop(previous);
 8000416:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fcb8 	bl	8000d90 <timer_stop>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8000428:	4413      	add	r3, r2
 800042a:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0

	   		            previous = timer_start();
 800042e:	f000 fc9f 	bl	8000d70 <timer_start>
 8000432:	4603      	mov	r3, r0
 8000434:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		            a_32*b_32;
	   		            tick3 = tick3 + timer_stop(previous);
 8000438:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fca7 	bl	8000d90 <timer_stop>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800044a:	4413      	add	r3, r2
 800044c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec

	   		            previous = timer_start();
 8000450:	f000 fc8e 	bl	8000d70 <timer_start>
 8000454:	4603      	mov	r3, r0
 8000456:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		            a_64*b_64;
	   		            tick4 = tick4 + timer_stop(previous);
 800045a:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fc96 	bl	8000d90 <timer_stop>
 8000464:	4603      	mov	r3, r0
 8000466:	461a      	mov	r2, r3
 8000468:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800046c:	4413      	add	r3, r2
 800046e:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8

	   		            previous = timer_start();
 8000472:	f000 fc7d 	bl	8000d70 <timer_start>
 8000476:	4603      	mov	r3, r0
 8000478:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		            while(!b_32)b_32 = rand();													 //make sure  don't divide by zero.
 800047c:	e003      	b.n	8000486 <main+0x316>
 800047e:	f002 f99b 	bl	80027b8 <rand>
 8000482:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
 8000486:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f7      	beq.n	800047e <main+0x30e>
	   		            a_32/b_32;
	   		            tick5 = tick5 + timer_stop(previous);
 800048e:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fc7c 	bl	8000d90 <timer_stop>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80004a0:	4413      	add	r3, r2
 80004a2:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4

	   		            previous = timer_start();
 80004a6:	f000 fc63 	bl	8000d70 <timer_start>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		            while(!b_64)b_64 = rand();
 80004b0:	e01f      	b.n	80004f2 <main+0x382>
 80004b2:	bf00      	nop
 80004b4:	20000098 	.word	0x20000098
 80004b8:	08002920 	.word	0x08002920
 80004bc:	200000e0 	.word	0x200000e0
 80004c0:	08002930 	.word	0x08002930
 80004c4:	40010800 	.word	0x40010800
 80004c8:	08002938 	.word	0x08002938
 80004cc:	08002940 	.word	0x08002940
 80004d0:	0800294c 	.word	0x0800294c
 80004d4:	08002958 	.word	0x08002958
 80004d8:	08002960 	.word	0x08002960
 80004dc:	08002a10 	.word	0x08002a10
 80004e0:	f002 f96a 	bl	80027b8 <rand>
 80004e4:	4603      	mov	r3, r0
 80004e6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80004ea:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80004ee:	e9c2 3400 	strd	r3, r4, [r2]
 80004f2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80004f6:	cb18      	ldmia	r3, {r3, r4}
 80004f8:	4323      	orrs	r3, r4
 80004fa:	d0f1      	beq.n	80004e0 <main+0x370>
	   		            a_64/b_64;
	   		            tick6 = tick6 + timer_stop(previous);
 80004fc:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fc45 	bl	8000d90 <timer_stop>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800050e:	4413      	add	r3, r2
 8000510:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	   		        for (i = 0; i < 100; i++)
 8000514:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000518:	b29b      	uxth	r3, r3
 800051a:	3301      	adds	r3, #1
 800051c:	b29b      	uxth	r3, r3
 800051e:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 8000522:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000526:	2b63      	cmp	r3, #99	; 0x63
 8000528:	f77f af45 	ble.w	80003b6 <main+0x246>


	   		          }

	   		        tick1 = tick1/100;
 800052c:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8000530:	4aa0      	ldr	r2, [pc, #640]	; (80007b4 <main+0x644>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
	   		        tick2 = tick2/100;
 800053c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8000540:	4a9c      	ldr	r2, [pc, #624]	; (80007b4 <main+0x644>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	095b      	lsrs	r3, r3, #5
 8000548:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	   		        tick3 = tick3/100;
 800054c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8000550:	4a98      	ldr	r2, [pc, #608]	; (80007b4 <main+0x644>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	095b      	lsrs	r3, r3, #5
 8000558:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	   		        tick4 = tick4/100;
 800055c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8000560:	4a94      	ldr	r2, [pc, #592]	; (80007b4 <main+0x644>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	095b      	lsrs	r3, r3, #5
 8000568:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
	   		        tick5 = tick5/100;
 800056c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000570:	4a90      	ldr	r2, [pc, #576]	; (80007b4 <main+0x644>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	095b      	lsrs	r3, r3, #5
 8000578:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
	   		        tick6 = tick6/100;
 800057c:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000580:	4a8c      	ldr	r2, [pc, #560]	; (80007b4 <main+0x644>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	095b      	lsrs	r3, r3, #5
 8000588:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

	   		        strcpy((char*)cliBufferTX, "add two random 32-bit integers: ");                    //prints the results on the screen.
 800058c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000590:	4a89      	ldr	r2, [pc, #548]	; (80007b8 <main+0x648>)
 8000592:	461c      	mov	r4, r3
 8000594:	4615      	mov	r5, r2
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	682b      	ldr	r3, [r5, #0]
 80005a0:	7023      	strb	r3, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80005a2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fdda 	bl	8000160 <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80005b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b8:	4880      	ldr	r0, [pc, #512]	; (80007bc <main+0x64c>)
 80005ba:	f001 feb6 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick1);                                                                    //Converts tick to ASCII
 80005be:	f8d7 04f4 	ldr.w	r0, [r7, #1268]	; 0x4f4
 80005c2:	f000 fbfb 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "add two random 64-bit integers: ");
 80005c6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80005ca:	4a7d      	ldr	r2, [pc, #500]	; (80007c0 <main+0x650>)
 80005cc:	461c      	mov	r4, r3
 80005ce:	4615      	mov	r5, r2
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	682b      	ldr	r3, [r5, #0]
 80005da:	7023      	strb	r3, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80005dc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fdbd 	bl	8000160 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	4872      	ldr	r0, [pc, #456]	; (80007bc <main+0x64c>)
 80005f4:	f001 fe99 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick2);
 80005f8:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 80005fc:	f000 fbde 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "multiply two random 32-bit integers: ");
 8000600:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000604:	4a6f      	ldr	r2, [pc, #444]	; (80007c4 <main+0x654>)
 8000606:	461c      	mov	r4, r3
 8000608:	4615      	mov	r5, r2
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000616:	6020      	str	r0, [r4, #0]
 8000618:	3404      	adds	r4, #4
 800061a:	8021      	strh	r1, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800061c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fd9d 	bl	8000160 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	4862      	ldr	r0, [pc, #392]	; (80007bc <main+0x64c>)
 8000634:	f001 fe79 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick3);
 8000638:	f8d7 04ec 	ldr.w	r0, [r7, #1260]	; 0x4ec
 800063c:	f000 fbbe 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "multiply two random 64-bit integers: ");
 8000640:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000644:	4a60      	ldr	r2, [pc, #384]	; (80007c8 <main+0x658>)
 8000646:	461c      	mov	r4, r3
 8000648:	4615      	mov	r5, r2
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000656:	6020      	str	r0, [r4, #0]
 8000658:	3404      	adds	r4, #4
 800065a:	8021      	strh	r1, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800065c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fd7d 	bl	8000160 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	4852      	ldr	r0, [pc, #328]	; (80007bc <main+0x64c>)
 8000674:	f001 fe59 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick4);
 8000678:	f8d7 04e8 	ldr.w	r0, [r7, #1256]	; 0x4e8
 800067c:	f000 fb9e 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "divide two random 32-bit integers: ");
 8000680:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000684:	4a51      	ldr	r2, [pc, #324]	; (80007cc <main+0x65c>)
 8000686:	461c      	mov	r4, r3
 8000688:	4615      	mov	r5, r2
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	682b      	ldr	r3, [r5, #0]
 8000694:	6023      	str	r3, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000696:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fd60 	bl	8000160 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	4843      	ldr	r0, [pc, #268]	; (80007bc <main+0x64c>)
 80006ae:	f001 fe3c 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick5);
 80006b2:	f8d7 04e4 	ldr.w	r0, [r7, #1252]	; 0x4e4
 80006b6:	f000 fb81 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "divide two random 64-bit integers: ");
 80006ba:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80006be:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <main+0x660>)
 80006c0:	461c      	mov	r4, r3
 80006c2:	4615      	mov	r5, r2
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	682b      	ldr	r3, [r5, #0]
 80006ce:	6023      	str	r3, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80006d0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fd43 	bl	8000160 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	4835      	ldr	r0, [pc, #212]	; (80007bc <main+0x64c>)
 80006e8:	f001 fe1f 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick6);
 80006ec:	f8d7 04e0 	ldr.w	r0, [r7, #1248]	; 0x4e0
 80006f0:	f000 fb64 	bl	8000dbc <tickasc>

	   		        tick1 = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
	   		        previous = timer_start();
 80006fa:	f000 fb39 	bl	8000d70 <timer_start>
 80006fe:	4603      	mov	r3, r0
 8000700:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		        for (i = 0; i < 8; i++)
 8000704:	2300      	movs	r3, #0
 8000706:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 800070a:	e00d      	b.n	8000728 <main+0x5b8>
	   		           {
	   		        	cliBufferRX[i] = i;
 800070c:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000710:	f8b7 2506 	ldrh.w	r2, [r7, #1286]	; 0x506
 8000714:	b2d1      	uxtb	r1, r2
 8000716:	463a      	mov	r2, r7
 8000718:	54d1      	strb	r1, [r2, r3]
	   		        for (i = 0; i < 8; i++)
 800071a:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 8000728:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 800072c:	2b07      	cmp	r3, #7
 800072e:	dded      	ble.n	800070c <main+0x59c>
	   		           }
	   		        tick1 = tick1 + timer_stop(previous);
 8000730:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fb2b 	bl	8000d90 <timer_stop>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8000742:	4413      	add	r3, r2
 8000744:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4

	   		        tick2 = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	   		        previous = timer_start();
 800074e:	f000 fb0f 	bl	8000d70 <timer_start>
 8000752:	4603      	mov	r3, r0
 8000754:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		        for (i = 0; i < 128; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 800075e:	e00d      	b.n	800077c <main+0x60c>
	   		           {
	   		        	cliBufferRX[i] = i;
 8000760:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000764:	f8b7 2506 	ldrh.w	r2, [r7, #1286]	; 0x506
 8000768:	b2d1      	uxtb	r1, r2
 800076a:	463a      	mov	r2, r7
 800076c:	54d1      	strb	r1, [r2, r3]
	   		        for (i = 0; i < 128; i++)
 800076e:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000772:	b29b      	uxth	r3, r3
 8000774:	3301      	adds	r3, #1
 8000776:	b29b      	uxth	r3, r3
 8000778:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 800077c:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 8000780:	2b7f      	cmp	r3, #127	; 0x7f
 8000782:	dded      	ble.n	8000760 <main+0x5f0>
	   		           }
	   		        tick2 = tick2 + timer_stop(previous);
 8000784:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fb01 	bl	8000d90 <timer_stop>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8000796:	4413      	add	r3, r2
 8000798:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0


	   		        tick3 = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	   		        previous = timer_start();
 80007a2:	f000 fae5 	bl	8000d70 <timer_start>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	   		        for (i = 0; i <1024; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 80007b2:	e01d      	b.n	80007f0 <main+0x680>
 80007b4:	51eb851f 	.word	0x51eb851f
 80007b8:	08002a18 	.word	0x08002a18
 80007bc:	200000e0 	.word	0x200000e0
 80007c0:	08002a3c 	.word	0x08002a3c
 80007c4:	08002a60 	.word	0x08002a60
 80007c8:	08002a88 	.word	0x08002a88
 80007cc:	08002ab0 	.word	0x08002ab0
 80007d0:	08002ad4 	.word	0x08002ad4
	   		           {
	   		        	cliBufferRX[i] = i;
 80007d4:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 80007d8:	f8b7 2506 	ldrh.w	r2, [r7, #1286]	; 0x506
 80007dc:	b2d1      	uxtb	r1, r2
 80007de:	463a      	mov	r2, r7
 80007e0:	54d1      	strb	r1, [r2, r3]
	   		        for (i = 0; i <1024; i++)
 80007e2:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	3301      	adds	r3, #1
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	f8a7 3506 	strh.w	r3, [r7, #1286]	; 0x506
 80007f0:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	; 0x506
 80007f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007f8:	dbec      	blt.n	80007d4 <main+0x664>
	   		           }
	   		        tick3 = tick3 + timer_stop(previous);
 80007fa:	f9b7 34da 	ldrsh.w	r3, [r7, #1242]	; 0x4da
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fac6 	bl	8000d90 <timer_stop>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800080c:	4413      	add	r3, r2
 800080e:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec

	   		        strcpy((char*)cliBufferTX, "copy an 8-byte struct using the assignment operator: ");
 8000812:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000816:	4a3c      	ldr	r2, [pc, #240]	; (8000908 <main+0x798>)
 8000818:	461c      	mov	r4, r3
 800081a:	4615      	mov	r5, r2
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000828:	e895 0003 	ldmia.w	r5, {r0, r1}
 800082c:	6020      	str	r0, [r4, #0]
 800082e:	3404      	adds	r4, #4
 8000830:	8021      	strh	r1, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000832:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fc92 	bl	8000160 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	4830      	ldr	r0, [pc, #192]	; (800090c <main+0x79c>)
 800084a:	f001 fd6e 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick1);
 800084e:	f8d7 04f4 	ldr.w	r0, [r7, #1268]	; 0x4f4
 8000852:	f000 fab3 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "copy an 128-byte struct using the assignment operator: ");
 8000856:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <main+0x7a0>)
 800085c:	461c      	mov	r4, r3
 800085e:	4615      	mov	r5, r2
 8000860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000870:	e884 0003 	stmia.w	r4, {r0, r1}
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000874:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fc71 	bl	8000160 <strlen>
 800087e:	4603      	mov	r3, r0
 8000880:	b29a      	uxth	r2, r3
 8000882:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	4820      	ldr	r0, [pc, #128]	; (800090c <main+0x79c>)
 800088c:	f001 fd4d 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick2);
 8000890:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8000894:	f000 fa92 	bl	8000dbc <tickasc>

	   		        strcpy((char*)cliBufferTX, "copy an 1024-byte struct using the assignment operator: ");
 8000898:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <main+0x7a4>)
 800089e:	461c      	mov	r4, r3
 80008a0:	4615      	mov	r5, r2
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b2:	c403      	stmia	r4!, {r0, r1}
 80008b4:	7022      	strb	r2, [r4, #0]
	   		        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80008b6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fc50 	bl	8000160 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80008c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <main+0x79c>)
 80008ce:	f001 fd2c 	bl	800232a <HAL_UART_Transmit>
	   		        tickasc(tick3);
 80008d2:	f8d7 04ec 	ldr.w	r0, [r7, #1260]	; 0x4ec
 80008d6:	f000 fa71 	bl	8000dbc <tickasc>
 80008da:	e473      	b.n	80001c4 <main+0x54>
	   	      }
	   	         else
	   	      	  	  	  { strcpy(( char*)cliBufferTX, "error\r\n");
 80008dc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <main+0x7a8>)
 80008e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e6:	e883 0003 	stmia.w	r3, {r0, r1}
	   	      	  	        HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80008ea:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc36 	bl	8000160 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <main+0x79c>)
 8000902:	f001 fd12 	bl	800232a <HAL_UART_Transmit>
	   i=0;
 8000906:	e45d      	b.n	80001c4 <main+0x54>
 8000908:	08002af8 	.word	0x08002af8
 800090c:	200000e0 	.word	0x200000e0
 8000910:	08002b30 	.word	0x08002b30
 8000914:	08002b68 	.word	0x08002b68
 8000918:	08002ba4 	.word	0x08002ba4

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	; 0x40
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2228      	movs	r2, #40	; 0x28
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 ff3b 	bl	80027a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000942:	2301      	movs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000946:	2310      	movs	r3, #16
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000952:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fdd3 	bl	8001508 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000968:	f000 f900 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f83e 	bl	8001a08 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000992:	f000 f8eb 	bl	8000b6c <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3740      	adds	r7, #64	; 0x40
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <MX_TIM4_Init+0x98>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009ca:	2210      	movs	r2, #16
 80009cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <MX_TIM4_Init+0x94>)
 80009e4:	f001 f9ac 	bl	8001d40 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f8bd 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_TIM4_Init+0x94>)
 8000a00:	f001 fa38 	bl	8001e74 <HAL_TIM_ConfigClockSource>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000a0a:	f000 f8af 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_TIM4_Init+0x94>)
 8000a1c:	f001 fbda 	bl	80021d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000a26:	f000 f8a1 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000098 	.word	0x20000098
 8000a38:	40000800 	.word	0x40000800

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f001 fc0c 	bl	8002290 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f875 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000e0 	.word	0x200000e0
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_GPIO_Init+0xcc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2120      	movs	r1, #32
 8000b08:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_GPIO_Init+0xd0>)
 8000b0a:	f000 fcaa 	bl	8001462 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_GPIO_Init+0xd4>)
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0xd8>)
 8000b24:	f000 fb2c 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_GPIO_Init+0xd0>)
 8000b40:	f000 fb1e 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2028      	movs	r0, #40	; 0x28
 8000b4a:	f000 fae2 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4e:	2028      	movs	r0, #40	; 0x28
 8000b50:	f000 fafb 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800
 8000b64:	10110000 	.word	0x10110000
 8000b68:	40011000 	.word	0x40011000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6193      	str	r3, [r2, #24]
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_MspInit+0x60>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_MspInit+0x60>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_TIM_Base_MspInit+0x34>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40000800 	.word	0x40000800
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x70>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d123      	bne.n	8000c80 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0x74>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0x74>)
 8000c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c42:	61d3      	str	r3, [r2, #28]
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x74>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x74>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_UART_MspInit+0x74>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_UART_MspInit+0x74>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x78>)
 8000c7c:	f000 fa80 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010800 	.word	0x40010800

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <MemManage_Handler+0x4>

08000cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <BusFault_Handler+0x4>

08000cb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <UsageFault_Handler+0x4>

08000cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f924 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf0:	f000 fbe8 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f001 fd08 	bl	800273c <__errno>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	230c      	movs	r3, #12
 8000d30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20005000 	.word	0x20005000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	2000008c 	.word	0x2000008c
 8000d60:	20000128 	.word	0x20000128

08000d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <timer_start>:
 */
#include "timer.h"


int16_t timer_start(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
	int16_t current = __HAL_TIM_GET_COUNTER(&htim4);
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <timer_start+0x1c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	80fb      	strh	r3, [r7, #6]
	return current;
 8000d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000098 	.word	0x20000098

08000d90 <timer_stop>:



uint16_t timer_stop(int16_t previous)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	int16_t temp = __HAL_TIM_GET_COUNTER(&htim4);
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <timer_stop+0x28>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	81fb      	strh	r3, [r7, #14]
	uint16_t ticks = previous - temp;
 8000da2:	88fa      	ldrh	r2, [r7, #6]
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	81bb      	strh	r3, [r7, #12]

	return ticks;
 8000daa:	89bb      	ldrh	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000098 	.word	0x20000098

08000dbc <tickasc>:


void tickasc(uint32_t Hex)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint8_t j;
    char result[20];
    strcpy((char*)result, "       ticks\r\n");
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <tickasc+0x8c>)
 8000dca:	461c      	mov	r4, r3
 8000dcc:	4613      	mov	r3, r2
 8000dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd0:	c407      	stmia	r4!, {r0, r1, r2}
 8000dd2:	8023      	strh	r3, [r4, #0]
 8000dd4:	3402      	adds	r4, #2
 8000dd6:	0c1b      	lsrs	r3, r3, #16
 8000dd8:	7023      	strb	r3, [r4, #0]

	for( j = 0;j < 6; j++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	77fb      	strb	r3, [r7, #31]
 8000dde:	e01e      	b.n	8000e1e <tickasc+0x62>
     {  result[5-j] = (Hex%10)^0x30;
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <tickasc+0x90>)
 8000de4:	fba3 2301 	umull	r2, r3, r3, r1
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	1aca      	subs	r2, r1, r3
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	7ffb      	ldrb	r3, [r7, #31]
 8000df8:	f1c3 0305 	rsb	r3, r3, #5
 8000dfc:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	f107 0120 	add.w	r1, r7, #32
 8000e06:	440b      	add	r3, r1
 8000e08:	f803 2c18 	strb.w	r2, [r3, #-24]
      Hex = Hex / 10;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <tickasc+0x90>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	607b      	str	r3, [r7, #4]
	for( j = 0;j < 6; j++)
 8000e18:	7ffb      	ldrb	r3, [r7, #31]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	77fb      	strb	r3, [r7, #31]
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d9dd      	bls.n	8000de0 <tickasc+0x24>
     }

    HAL_UART_Transmit(&huart2, result, strlen((char*)result),1000);
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f999 	bl	8000160 <strlen>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	f107 0108 	add.w	r1, r7, #8
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <tickasc+0x94>)
 8000e3c:	f001 fa75 	bl	800232a <HAL_UART_Transmit>

}
 8000e40:	bf00      	nop
 8000e42:	3724      	adds	r7, #36	; 0x24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	08002bac 	.word	0x08002bac
 8000e4c:	cccccccd 	.word	0xcccccccd
 8000e50:	200000e0 	.word	0x200000e0

08000e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e56:	e003      	b.n	8000e60 <LoopCopyDataInit>

08000e58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e5e:	3104      	adds	r1, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e68:	d3f6      	bcc.n	8000e58 <CopyDataInit>
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e6c:	e002      	b.n	8000e74 <LoopFillZerobss>

08000e6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e70:	f842 3b04 	str.w	r3, [r2], #4

08000e74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e78:	d3f9      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff ff73 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f001 fc63 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff f975 	bl	8000170 <main>
  bx lr
 8000e86:	4770      	bx	lr
  ldr r3, =_sidata
 8000e88:	08002bf0 	.word	0x08002bf0
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e90:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e94:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e98:	20000128 	.word	0x20000128

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x28>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f923 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fe5c 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f93b 	bl	8001166 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f903 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000120 	.word	0x20000120

08000f50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000120 	.word	0x20000120

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <__NVIC_EnableIRQ+0x34>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff90 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff2d 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff42 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff35 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e127      	b.n	80013e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8116 	bne.w	80013de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d034      	beq.n	8001224 <HAL_GPIO_Init+0xa4>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d80d      	bhi.n	80011da <HAL_GPIO_Init+0x5a>
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x9a>
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d804      	bhi.n	80011d0 <HAL_GPIO_Init+0x50>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d01c      	beq.n	8001208 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e048      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d043      	beq.n	800125c <HAL_GPIO_Init+0xdc>
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d01b      	beq.n	8001210 <HAL_GPIO_Init+0x90>
          break;
 80011d8:	e043      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011da:	4a89      	ldr	r2, [pc, #548]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d026      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011e0:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d806      	bhi.n	80011f4 <HAL_GPIO_Init+0x74>
 80011e6:	4a87      	ldr	r2, [pc, #540]	; (8001404 <HAL_GPIO_Init+0x284>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d020      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ec:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_GPIO_Init+0x288>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01d      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 80011f2:	e036      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011f4:	4a85      	ldr	r2, [pc, #532]	; (800140c <HAL_GPIO_Init+0x28c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011fa:	4a85      	ldr	r2, [pc, #532]	; (8001410 <HAL_GPIO_Init+0x290>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d016      	beq.n	800122e <HAL_GPIO_Init+0xae>
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <HAL_GPIO_Init+0x294>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e028      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e023      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01e      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e019      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e012      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d801      	bhi.n	800126c <HAL_GPIO_Init+0xec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e001      	b.n	8001270 <HAL_GPIO_Init+0xf0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d802      	bhi.n	800127e <HAL_GPIO_Init+0xfe>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x104>
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	3b08      	subs	r3, #8
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	210f      	movs	r1, #15
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	6a39      	ldr	r1, [r7, #32]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8096 	beq.w	80013de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b56      	ldr	r3, [pc, #344]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ca:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_GPIO_Init+0x29c>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x19e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x19a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x196>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2ac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x192>
 800130e:	2303      	movs	r3, #3
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 8001312:	2304      	movs	r3, #4
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 800131e:	2300      	movs	r3, #0
 8001320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001330:	493a      	ldr	r1, [pc, #232]	; (800141c <HAL_GPIO_Init+0x29c>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4938      	ldr	r1, [pc, #224]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4933      	ldr	r1, [pc, #204]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	492e      	ldr	r1, [pc, #184]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
 800137e:	e006      	b.n	800138e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	4929      	ldr	r1, [pc, #164]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800138a:	4013      	ands	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4924      	ldr	r1, [pc, #144]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	491f      	ldr	r1, [pc, #124]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	491a      	ldr	r1, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4915      	ldr	r1, [pc, #84]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f aed0 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 80013f4:	bf00      	nop
 80013f6:	372c      	adds	r7, #44	; 0x2c
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	10210000 	.word	0x10210000
 8001404:	10110000 	.word	0x10110000
 8001408:	10120000 	.word	0x10120000
 800140c:	10310000 	.word	0x10310000
 8001410:	10320000 	.word	0x10320000
 8001414:	10220000 	.word	0x10220000
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40011000 	.word	0x40011000
 800142c:	40011400 	.word	0x40011400
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001472:	787b      	ldrb	r3, [r7, #1]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800147e:	e003      	b.n	8001488 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	611a      	str	r2, [r3, #16]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	400b      	ands	r3, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f806 	bl	80014f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e26c      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00c      	beq.n	800154e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
 8001540:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d10b      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	4b89      	ldr	r3, [pc, #548]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06c      	beq.n	8001634 <HAL_RCC_OscConfig+0x12c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d168      	bne.n	8001634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e246      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x76>
 8001570:	4b80      	ldr	r3, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e02e      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7a      	ldr	r2, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b78      	ldr	r3, [pc, #480]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a77      	ldr	r2, [pc, #476]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0xbc>
 80015aa:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a71      	ldr	r2, [pc, #452]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015c4:	4b6b      	ldr	r3, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6a      	ldr	r2, [pc, #424]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fcb4 	bl	8000f50 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fcb0 	bl	8000f50 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1fa      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xe4>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fca0 	bl	8000f50 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fc9c 	bl	8000f50 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1e6      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x10c>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1ba      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4939      	ldr	r1, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc55 	bl	8000f50 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fc51 	bl	8000f50 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e19b      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4927      	ldr	r1, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc34 	bl	8000f50 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc30 	bl	8000f50 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e17a      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03a      	beq.n	800178c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d019      	beq.n	8001752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_RCC_OscConfig+0x274>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fc14 	bl	8000f50 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fc10 	bl	8000f50 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e15a      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fada 	bl	8001d04 <RCC_Delay>
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_OscConfig+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fbfa 	bl	8000f50 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fbf6 	bl	8000f50 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d908      	bls.n	8001780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e140      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	42420000 	.word	0x42420000
 800177c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b9e      	ldr	r3, [pc, #632]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e9      	bne.n	8001760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a6 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b97      	ldr	r3, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b94      	ldr	r3, [pc, #592]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a93      	ldr	r2, [pc, #588]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b91      	ldr	r3, [pc, #580]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a8a      	ldr	r2, [pc, #552]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fbb7 	bl	8000f50 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fbb3 	bl	8000f50 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0fd      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b81      	ldr	r3, [pc, #516]	; (8001a00 <HAL_RCC_OscConfig+0x4f8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 800180c:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a7a      	ldr	r2, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e02d      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x334>
 8001822:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a75      	ldr	r2, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	e01c      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x356>
 8001844:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a6c      	ldr	r2, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a69      	ldr	r2, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a66      	ldr	r2, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a63      	ldr	r2, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb67 	bl	8000f50 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fb63 	bl	8000f50 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0ab      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <HAL_RCC_OscConfig+0x37e>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb51 	bl	8000f50 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fb4d 	bl	8000f50 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e095      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8081 	beq.w	80019f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d061      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d146      	bne.n	8001992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x4fc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb21 	bl	8000f50 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fb1d 	bl	8000f50 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e067      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	492d      	ldr	r1, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a19      	ldr	r1, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	430b      	orrs	r3, r1
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x4fc>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff faf1 	bl	8000f50 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff faed 	bl	8000f50 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e037      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
 8001990:	e02f      	b.n	80019f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0x4fc>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fada 	bl	8000f50 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fad6 	bl	8000f50 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e020      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x498>
 80019be:	e018      	b.n	80019f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e013      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42420060 	.word	0x42420060

08001a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d0      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4965      	ldr	r1, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d040      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e073      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4936      	ldr	r1, [pc, #216]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa2a 	bl	8000f50 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff fa26 	bl	8000f50 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e053      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d210      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	fa21 f303 	lsr.w	r3, r1, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f988 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08002bd0 	.word	0x08002bd0
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b490      	push	{r4, r7}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be4:	1d3c      	adds	r4, r7, #4
 8001be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x46>
 8001c1a:	e02d      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	e02d      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2e:	4413      	add	r3, r2
 8001c30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c5b      	lsrs	r3, r3, #17
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4e:	4413      	add	r3, r2
 8001c50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c5a:	fb02 f203 	mul.w	r2, r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e004      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	623b      	str	r3, [r7, #32]
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7a:	623b      	str	r3, [r7, #32]
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc90      	pop	{r4, r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08002bbc 	.word	0x08002bbc
 8001c90:	08002bcc 	.word	0x08002bcc
 8001c94:	40021000 	.word	0x40021000
 8001c98:	007a1200 	.word	0x007a1200
 8001c9c:	003d0900 	.word	0x003d0900

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff2 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	08002be0 	.word	0x08002be0

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0adb      	lsrs	r3, r3, #11
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08002be0 	.word	0x08002be0

08001d04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <RCC_Delay+0x34>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <RCC_Delay+0x38>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d20:	bf00      	nop
  }
  while (Delay --);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f9      	bne.n	8001d20 <RCC_Delay+0x1c>
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	10624dd3 	.word	0x10624dd3

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe ff38 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f930 	bl	8001fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_TIM_Base_Start+0x88>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00e      	beq.n	8001e28 <HAL_TIM_Base_Start+0x48>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d009      	beq.n	8001e28 <HAL_TIM_Base_Start+0x48>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_TIM_Base_Start+0x8c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_TIM_Base_Start+0x48>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_TIM_Base_Start+0x90>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d010      	beq.n	8001e5c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800

08001e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_TIM_ConfigClockSource+0x18>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0a6      	b.n	8001fda <HAL_TIM_ConfigClockSource+0x166>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d067      	beq.n	8001f94 <HAL_TIM_ConfigClockSource+0x120>
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d80b      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x6c>
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d073      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0x140>
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d802      	bhi.n	8001ed6 <HAL_TIM_ConfigClockSource+0x62>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d06f      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ed4:	e078      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d06c      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0x140>
 8001eda:	2b30      	cmp	r3, #48	; 0x30
 8001edc:	d06a      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001ede:	e073      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ee0:	2b70      	cmp	r3, #112	; 0x70
 8001ee2:	d00d      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x8c>
 8001ee4:	2b70      	cmp	r3, #112	; 0x70
 8001ee6:	d804      	bhi.n	8001ef2 <HAL_TIM_ConfigClockSource+0x7e>
 8001ee8:	2b50      	cmp	r3, #80	; 0x50
 8001eea:	d033      	beq.n	8001f54 <HAL_TIM_ConfigClockSource+0xe0>
 8001eec:	2b60      	cmp	r3, #96	; 0x60
 8001eee:	d041      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001ef0:	e06a      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef6:	d066      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0x152>
 8001ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001efc:	d017      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001efe:	e063      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f000 f941 	bl	8002196 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
      break;
 8001f2c:	e04c      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f000 f92a 	bl	8002196 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f50:	609a      	str	r2, [r3, #8]
      break;
 8001f52:	e039      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f000 f8a1 	bl	80020a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2150      	movs	r1, #80	; 0x50
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f8f8 	bl	8002162 <TIM_ITRx_SetConfig>
      break;
 8001f72:	e029      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	461a      	mov	r2, r3
 8001f82:	f000 f8bf 	bl	8002104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2160      	movs	r1, #96	; 0x60
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f8e8 	bl	8002162 <TIM_ITRx_SetConfig>
      break;
 8001f92:	e019      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f000 f881 	bl	80020a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2140      	movs	r1, #64	; 0x40
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f8d8 	bl	8002162 <TIM_ITRx_SetConfig>
      break;
 8001fb2:	e009      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 f8cf 	bl	8002162 <TIM_ITRx_SetConfig>
        break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a29      	ldr	r2, [pc, #164]	; (800209c <TIM_Base_SetConfig+0xb8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00b      	beq.n	8002014 <TIM_Base_SetConfig+0x30>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002002:	d007      	beq.n	8002014 <TIM_Base_SetConfig+0x30>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <TIM_Base_SetConfig+0xbc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0x30>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <TIM_Base_SetConfig+0xc0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <TIM_Base_SetConfig+0xb8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00b      	beq.n	8002046 <TIM_Base_SetConfig+0x62>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d007      	beq.n	8002046 <TIM_Base_SetConfig+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <TIM_Base_SetConfig+0xbc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <TIM_Base_SetConfig+0x62>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <TIM_Base_SetConfig+0xc0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d108      	bne.n	8002058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <TIM_Base_SetConfig+0xb8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800

080020a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0201 	bic.w	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f023 030a 	bic.w	r3, r3, #10
 80020e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	621a      	str	r2, [r3, #32]
}
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f023 0210 	bic.w	r2, r3, #16
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800212e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	031b      	lsls	r3, r3, #12
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	621a      	str	r2, [r3, #32]
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	f043 0307 	orr.w	r3, r3, #7
 8002184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	609a      	str	r2, [r3, #8]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002196:	b480      	push	{r7}
 8002198:	b087      	sub	sp, #28
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4313      	orrs	r3, r2
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	609a      	str	r2, [r3, #8]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e046      	b.n	800227a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d009      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10c      	bne.n	8002268 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4313      	orrs	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800

08002290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e03f      	b.n	8002322 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fcae 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f9a3 	bl	8002620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b08a      	sub	sp, #40	; 0x28
 800232e:	af02      	add	r7, sp, #8
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b20      	cmp	r3, #32
 8002348:	d17c      	bne.n	8002444 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_UART_Transmit+0x2c>
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e075      	b.n	8002446 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_UART_Transmit+0x3e>
 8002364:	2302      	movs	r3, #2
 8002366:	e06e      	b.n	8002446 <HAL_UART_Transmit+0x11c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800237e:	f7fe fde7 	bl	8000f50 <HAL_GetTick>
 8002382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	88fa      	ldrh	r2, [r7, #6]
 800238e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002398:	d108      	bne.n	80023ac <HAL_UART_Transmit+0x82>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e003      	b.n	80023b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80023bc:	e02a      	b.n	8002414 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f8df 	bl	800258c <UART_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e036      	b.n	8002446 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10b      	bne.n	80023f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3302      	adds	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	e007      	b.n	8002406 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3301      	adds	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1cf      	bne.n	80023be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f8af 	bl	800258c <UART_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e006      	b.n	8002446 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b08a      	sub	sp, #40	; 0x28
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	f040 8089 	bne.w	8002582 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_UART_Receive+0x2e>
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e081      	b.n	8002584 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_UART_Receive+0x40>
 800248a:	2302      	movs	r3, #2
 800248c:	e07a      	b.n	8002584 <HAL_UART_Receive+0x136>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2222      	movs	r2, #34	; 0x22
 80024a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024a4:	f7fe fd54 	bl	8000f50 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d108      	bne.n	80024d2 <HAL_UART_Receive+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e003      	b.n	80024da <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024e2:	e043      	b.n	800256c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2120      	movs	r1, #32
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f84c 	bl	800258c <UART_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e042      	b.n	8002584 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10c      	bne.n	800251e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	b29a      	uxth	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	3302      	adds	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	e01f      	b.n	800255e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002526:	d007      	beq.n	8002538 <HAL_UART_Receive+0xea>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <HAL_UART_Receive+0xf8>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e008      	b.n	8002558 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002552:	b2da      	uxtb	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	3301      	adds	r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1b6      	bne.n	80024e4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259c:	e02c      	b.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d028      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <UART_WaitOnFlagUntilTimeout+0x30>
 80025ac:	f7fe fcd0 	bl	8000f50 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d21d      	bcs.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e00f      	b.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4013      	ands	r3, r2
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d0c3      	beq.n	800259e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800265a:	f023 030c 	bic.w	r3, r3, #12
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	430b      	orrs	r3, r1
 8002666:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2c      	ldr	r2, [pc, #176]	; (8002734 <UART_SetConfig+0x114>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d103      	bne.n	8002690 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002688:	f7ff fb28 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	e002      	b.n	8002696 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002690:	f7ff fb10 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8002694:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <UART_SetConfig+0x118>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	0119      	lsls	r1, r3, #4
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009a      	lsls	r2, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <UART_SetConfig+0x118>)
 80026ce:	fba3 0302 	umull	r0, r3, r3, r2
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	fb00 f303 	mul.w	r3, r0, r3
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	3332      	adds	r3, #50	; 0x32
 80026e0:	4a15      	ldr	r2, [pc, #84]	; (8002738 <UART_SetConfig+0x118>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ec:	4419      	add	r1, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb2 f2f3 	udiv	r2, r2, r3
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <UART_SetConfig+0x118>)
 8002706:	fba3 0302 	umull	r0, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2064      	movs	r0, #100	; 0x64
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	440a      	add	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40013800 	.word	0x40013800
 8002738:	51eb851f 	.word	0x51eb851f

0800273c <__errno>:
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <__errno+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000000c 	.word	0x2000000c

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2500      	movs	r5, #0
 800274c:	4e0c      	ldr	r6, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1ba4      	subs	r4, r4, r6
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a5      	cmp	r5, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	f000 f8d6 	bl	8002908 <_init>
 800275c:	2500      	movs	r5, #0
 800275e:	4e0a      	ldr	r6, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4c0a      	ldr	r4, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1ba4      	subs	r4, r4, r6
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a5      	cmp	r5, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002770:	4798      	blx	r3
 8002772:	3501      	adds	r5, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277a:	4798      	blx	r3
 800277c:	3501      	adds	r5, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	08002be8 	.word	0x08002be8
 8002784:	08002be8 	.word	0x08002be8
 8002788:	08002be8 	.word	0x08002be8
 800278c:	08002bec 	.word	0x08002bec

08002790 <memcpy>:
 8002790:	b510      	push	{r4, lr}
 8002792:	1e43      	subs	r3, r0, #1
 8002794:	440a      	add	r2, r1
 8002796:	4291      	cmp	r1, r2
 8002798:	d100      	bne.n	800279c <memcpy+0xc>
 800279a:	bd10      	pop	{r4, pc}
 800279c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027a4:	e7f7      	b.n	8002796 <memcpy+0x6>

080027a6 <memset>:
 80027a6:	4603      	mov	r3, r0
 80027a8:	4402      	add	r2, r0
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d100      	bne.n	80027b0 <memset+0xa>
 80027ae:	4770      	bx	lr
 80027b0:	f803 1b01 	strb.w	r1, [r3], #1
 80027b4:	e7f9      	b.n	80027aa <memset+0x4>
	...

080027b8 <rand>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <rand+0x50>)
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027c0:	b97b      	cbnz	r3, 80027e2 <rand+0x2a>
 80027c2:	2018      	movs	r0, #24
 80027c4:	f000 f82c 	bl	8002820 <malloc>
 80027c8:	4a10      	ldr	r2, [pc, #64]	; (800280c <rand+0x54>)
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <rand+0x58>)
 80027cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80027ce:	e9c0 2300 	strd	r2, r3, [r0]
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <rand+0x5c>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	6083      	str	r3, [r0, #8]
 80027d8:	230b      	movs	r3, #11
 80027da:	8183      	strh	r3, [r0, #12]
 80027dc:	2300      	movs	r3, #0
 80027de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80027e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <rand+0x60>)
 80027e6:	690a      	ldr	r2, [r1, #16]
 80027e8:	694b      	ldr	r3, [r1, #20]
 80027ea:	4350      	muls	r0, r2
 80027ec:	4c0b      	ldr	r4, [pc, #44]	; (800281c <rand+0x64>)
 80027ee:	fb04 0003 	mla	r0, r4, r3, r0
 80027f2:	fba2 2304 	umull	r2, r3, r2, r4
 80027f6:	4403      	add	r3, r0
 80027f8:	1c54      	adds	r4, r2, #1
 80027fa:	f143 0500 	adc.w	r5, r3, #0
 80027fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002802:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	2000000c 	.word	0x2000000c
 800280c:	abcd330e 	.word	0xabcd330e
 8002810:	e66d1234 	.word	0xe66d1234
 8002814:	0005deec 	.word	0x0005deec
 8002818:	5851f42d 	.word	0x5851f42d
 800281c:	4c957f2d 	.word	0x4c957f2d

08002820 <malloc>:
 8002820:	4b02      	ldr	r3, [pc, #8]	; (800282c <malloc+0xc>)
 8002822:	4601      	mov	r1, r0
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	f000 b803 	b.w	8002830 <_malloc_r>
 800282a:	bf00      	nop
 800282c:	2000000c 	.word	0x2000000c

08002830 <_malloc_r>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	1ccd      	adds	r5, r1, #3
 8002834:	f025 0503 	bic.w	r5, r5, #3
 8002838:	3508      	adds	r5, #8
 800283a:	2d0c      	cmp	r5, #12
 800283c:	bf38      	it	cc
 800283e:	250c      	movcc	r5, #12
 8002840:	2d00      	cmp	r5, #0
 8002842:	4606      	mov	r6, r0
 8002844:	db01      	blt.n	800284a <_malloc_r+0x1a>
 8002846:	42a9      	cmp	r1, r5
 8002848:	d903      	bls.n	8002852 <_malloc_r+0x22>
 800284a:	230c      	movs	r3, #12
 800284c:	6033      	str	r3, [r6, #0]
 800284e:	2000      	movs	r0, #0
 8002850:	bd70      	pop	{r4, r5, r6, pc}
 8002852:	f000 f857 	bl	8002904 <__malloc_lock>
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <_malloc_r+0xac>)
 8002858:	6814      	ldr	r4, [r2, #0]
 800285a:	4621      	mov	r1, r4
 800285c:	b991      	cbnz	r1, 8002884 <_malloc_r+0x54>
 800285e:	4c20      	ldr	r4, [pc, #128]	; (80028e0 <_malloc_r+0xb0>)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	b91b      	cbnz	r3, 800286c <_malloc_r+0x3c>
 8002864:	4630      	mov	r0, r6
 8002866:	f000 f83d 	bl	80028e4 <_sbrk_r>
 800286a:	6020      	str	r0, [r4, #0]
 800286c:	4629      	mov	r1, r5
 800286e:	4630      	mov	r0, r6
 8002870:	f000 f838 	bl	80028e4 <_sbrk_r>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d124      	bne.n	80028c2 <_malloc_r+0x92>
 8002878:	230c      	movs	r3, #12
 800287a:	4630      	mov	r0, r6
 800287c:	6033      	str	r3, [r6, #0]
 800287e:	f000 f842 	bl	8002906 <__malloc_unlock>
 8002882:	e7e4      	b.n	800284e <_malloc_r+0x1e>
 8002884:	680b      	ldr	r3, [r1, #0]
 8002886:	1b5b      	subs	r3, r3, r5
 8002888:	d418      	bmi.n	80028bc <_malloc_r+0x8c>
 800288a:	2b0b      	cmp	r3, #11
 800288c:	d90f      	bls.n	80028ae <_malloc_r+0x7e>
 800288e:	600b      	str	r3, [r1, #0]
 8002890:	18cc      	adds	r4, r1, r3
 8002892:	50cd      	str	r5, [r1, r3]
 8002894:	4630      	mov	r0, r6
 8002896:	f000 f836 	bl	8002906 <__malloc_unlock>
 800289a:	f104 000b 	add.w	r0, r4, #11
 800289e:	1d23      	adds	r3, r4, #4
 80028a0:	f020 0007 	bic.w	r0, r0, #7
 80028a4:	1ac3      	subs	r3, r0, r3
 80028a6:	d0d3      	beq.n	8002850 <_malloc_r+0x20>
 80028a8:	425a      	negs	r2, r3
 80028aa:	50e2      	str	r2, [r4, r3]
 80028ac:	e7d0      	b.n	8002850 <_malloc_r+0x20>
 80028ae:	684b      	ldr	r3, [r1, #4]
 80028b0:	428c      	cmp	r4, r1
 80028b2:	bf16      	itet	ne
 80028b4:	6063      	strne	r3, [r4, #4]
 80028b6:	6013      	streq	r3, [r2, #0]
 80028b8:	460c      	movne	r4, r1
 80028ba:	e7eb      	b.n	8002894 <_malloc_r+0x64>
 80028bc:	460c      	mov	r4, r1
 80028be:	6849      	ldr	r1, [r1, #4]
 80028c0:	e7cc      	b.n	800285c <_malloc_r+0x2c>
 80028c2:	1cc4      	adds	r4, r0, #3
 80028c4:	f024 0403 	bic.w	r4, r4, #3
 80028c8:	42a0      	cmp	r0, r4
 80028ca:	d005      	beq.n	80028d8 <_malloc_r+0xa8>
 80028cc:	1a21      	subs	r1, r4, r0
 80028ce:	4630      	mov	r0, r6
 80028d0:	f000 f808 	bl	80028e4 <_sbrk_r>
 80028d4:	3001      	adds	r0, #1
 80028d6:	d0cf      	beq.n	8002878 <_malloc_r+0x48>
 80028d8:	6025      	str	r5, [r4, #0]
 80028da:	e7db      	b.n	8002894 <_malloc_r+0x64>
 80028dc:	20000090 	.word	0x20000090
 80028e0:	20000094 	.word	0x20000094

080028e4 <_sbrk_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	2300      	movs	r3, #0
 80028e8:	4c05      	ldr	r4, [pc, #20]	; (8002900 <_sbrk_r+0x1c>)
 80028ea:	4605      	mov	r5, r0
 80028ec:	4608      	mov	r0, r1
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	f7fe fa02 	bl	8000cf8 <_sbrk>
 80028f4:	1c43      	adds	r3, r0, #1
 80028f6:	d102      	bne.n	80028fe <_sbrk_r+0x1a>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	b103      	cbz	r3, 80028fe <_sbrk_r+0x1a>
 80028fc:	602b      	str	r3, [r5, #0]
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
 8002900:	20000124 	.word	0x20000124

08002904 <__malloc_lock>:
 8002904:	4770      	bx	lr

08002906 <__malloc_unlock>:
 8002906:	4770      	bx	lr

08002908 <_init>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr

08002914 <_fini>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	bf00      	nop
 8002918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291a:	bc08      	pop	{r3}
 800291c:	469e      	mov	lr, r3
 800291e:	4770      	bx	lr
