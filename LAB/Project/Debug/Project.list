
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e7c  08005e7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005e7c  08005e7c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e7c  08005e7c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  200001e0  08006064  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db8  08006064  00021db8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016705  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b55  00000000  00000000  0003690e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  0003a708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000034fe  00000000  00000000  0003b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edb1  00000000  00000000  0003ed6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000943ba  00000000  00000000  0004db1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005070  00000000  00000000  000e1f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b68 	.word	0x08005b68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005b68 	.word	0x08005b68

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f001 f968 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f8b6 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f944 	bl	800040c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000184:	f000 f8ee 	bl	8000364 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000188:	f000 f916 	bl	80003b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  clean_screen;
 800018c:	4b43      	ldr	r3, [pc, #268]	; (800029c <main+0x128>)
 800018e:	4a44      	ldr	r2, [pc, #272]	; (80002a0 <main+0x12c>)
 8000190:	6810      	ldr	r0, [r2, #0]
 8000192:	6018      	str	r0, [r3, #0]
 8000194:	7912      	ldrb	r2, [r2, #4]
 8000196:	711a      	strb	r2, [r3, #4]
  transmit;
 8000198:	4840      	ldr	r0, [pc, #256]	; (800029c <main+0x128>)
 800019a:	f7ff ffe3 	bl	8000164 <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a6:	493d      	ldr	r1, [pc, #244]	; (800029c <main+0x128>)
 80001a8:	483e      	ldr	r0, [pc, #248]	; (80002a4 <main+0x130>)
 80001aa:	f002 fad0 	bl	800274e <HAL_UART_Transmit>
  cursor0_0
 80001ae:	4b3b      	ldr	r3, [pc, #236]	; (800029c <main+0x128>)
 80001b0:	4a3d      	ldr	r2, [pc, #244]	; (80002a8 <main+0x134>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
 80001b6:	8891      	ldrh	r1, [r2, #4]
 80001b8:	7992      	ldrb	r2, [r2, #6]
 80001ba:	8099      	strh	r1, [r3, #4]
 80001bc:	719a      	strb	r2, [r3, #6]
  transmit;
 80001be:	4837      	ldr	r0, [pc, #220]	; (800029c <main+0x128>)
 80001c0:	f7ff ffd0 	bl	8000164 <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001cc:	4933      	ldr	r1, [pc, #204]	; (800029c <main+0x128>)
 80001ce:	4835      	ldr	r0, [pc, #212]	; (80002a4 <main+0x130>)
 80001d0:	f002 fabd 	bl	800274e <HAL_UART_Transmit>
  scroll_window
 80001d4:	4b31      	ldr	r3, [pc, #196]	; (800029c <main+0x128>)
 80001d6:	4a35      	ldr	r2, [pc, #212]	; (80002ac <main+0x138>)
 80001d8:	6810      	ldr	r0, [r2, #0]
 80001da:	6018      	str	r0, [r3, #0]
 80001dc:	8891      	ldrh	r1, [r2, #4]
 80001de:	7992      	ldrb	r2, [r2, #6]
 80001e0:	8099      	strh	r1, [r3, #4]
 80001e2:	719a      	strb	r2, [r3, #6]
  transmit;
 80001e4:	482d      	ldr	r0, [pc, #180]	; (800029c <main+0x128>)
 80001e6:	f7ff ffbd 	bl	8000164 <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f2:	492a      	ldr	r1, [pc, #168]	; (800029c <main+0x128>)
 80001f4:	482b      	ldr	r0, [pc, #172]	; (80002a4 <main+0x130>)
 80001f6:	f002 faaa 	bl	800274e <HAL_UART_Transmit>
  cursor10_0
 80001fa:	4a28      	ldr	r2, [pc, #160]	; (800029c <main+0x128>)
 80001fc:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <main+0x13c>)
 80001fe:	cb03      	ldmia	r3!, {r0, r1}
 8000200:	6010      	str	r0, [r2, #0]
 8000202:	6051      	str	r1, [r2, #4]
  transmit;
 8000204:	4825      	ldr	r0, [pc, #148]	; (800029c <main+0x128>)
 8000206:	f7ff ffad 	bl	8000164 <strlen>
 800020a:	4603      	mov	r3, r0
 800020c:	b29a      	uxth	r2, r3
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	4922      	ldr	r1, [pc, #136]	; (800029c <main+0x128>)
 8000214:	4823      	ldr	r0, [pc, #140]	; (80002a4 <main+0x130>)
 8000216:	f002 fa9a 	bl	800274e <HAL_UART_Transmit>
  strcpy((char*)cliBufferTX, "Welcome!\r\n");
 800021a:	4a20      	ldr	r2, [pc, #128]	; (800029c <main+0x128>)
 800021c:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <main+0x140>)
 800021e:	cb03      	ldmia	r3!, {r0, r1}
 8000220:	6010      	str	r0, [r2, #0]
 8000222:	6051      	str	r1, [r2, #4]
 8000224:	8819      	ldrh	r1, [r3, #0]
 8000226:	789b      	ldrb	r3, [r3, #2]
 8000228:	8111      	strh	r1, [r2, #8]
 800022a:	7293      	strb	r3, [r2, #10]
  transmit;
 800022c:	481b      	ldr	r0, [pc, #108]	; (800029c <main+0x128>)
 800022e:	f7ff ff99 	bl	8000164 <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800023a:	4918      	ldr	r1, [pc, #96]	; (800029c <main+0x128>)
 800023c:	4819      	ldr	r0, [pc, #100]	; (80002a4 <main+0x130>)
 800023e:	f002 fa86 	bl	800274e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000242:	f002 fc8d 	bl	8002b60 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CLI_Queue */
  CLI_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &CLI_Queue_attributes);
 8000246:	4a1c      	ldr	r2, [pc, #112]	; (80002b8 <main+0x144>)
 8000248:	2102      	movs	r1, #2
 800024a:	2010      	movs	r0, #16
 800024c:	f002 fdc6 	bl	8002ddc <osMessageQueueNew>
 8000250:	4602      	mov	r2, r0
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <main+0x148>)
 8000254:	601a      	str	r2, [r3, #0]

  /* creation of Status_Queue */
  Status_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Status_Queue_attributes);
 8000256:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <main+0x14c>)
 8000258:	2102      	movs	r1, #2
 800025a:	2010      	movs	r0, #16
 800025c:	f002 fdbe 	bl	8002ddc <osMessageQueueNew>
 8000260:	4602      	mov	r2, r0
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0x150>)
 8000264:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Status_CLI_Task, NULL, &defaultTask_attributes);
 8000266:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <main+0x154>)
 8000268:	2100      	movs	r1, #0
 800026a:	4818      	ldr	r0, [pc, #96]	; (80002cc <main+0x158>)
 800026c:	f002 fcde 	bl	8002c2c <osThreadNew>
 8000270:	4602      	mov	r2, r0
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <main+0x15c>)
 8000274:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(RX_CLI_Task, NULL, &myTask02_attributes);
 8000276:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <main+0x160>)
 8000278:	2100      	movs	r1, #0
 800027a:	4817      	ldr	r0, [pc, #92]	; (80002d8 <main+0x164>)
 800027c:	f002 fcd6 	bl	8002c2c <osThreadNew>
 8000280:	4602      	mov	r2, r0
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <main+0x168>)
 8000284:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(stateControllerTask, NULL, &myTask03_attributes);
 8000286:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <main+0x16c>)
 8000288:	2100      	movs	r1, #0
 800028a:	4816      	ldr	r0, [pc, #88]	; (80002e4 <main+0x170>)
 800028c:	f002 fcce 	bl	8002c2c <osThreadNew>
 8000290:	4602      	mov	r2, r0
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0x174>)
 8000294:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000296:	f002 fc95 	bl	8002bc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800029a:	e7fe      	b.n	800029a <main+0x126>
 800029c:	20001b50 	.word	0x20001b50
 80002a0:	08005bc0 	.word	0x08005bc0
 80002a4:	20001ce8 	.word	0x20001ce8
 80002a8:	08005bc8 	.word	0x08005bc8
 80002ac:	08005bd0 	.word	0x08005bd0
 80002b0:	08005bd8 	.word	0x08005bd8
 80002b4:	08005be0 	.word	0x08005be0
 80002b8:	08005d04 	.word	0x08005d04
 80002bc:	20001b08 	.word	0x20001b08
 80002c0:	08005d1c 	.word	0x08005d1c
 80002c4:	20001b0c 	.word	0x20001b0c
 80002c8:	08005c98 	.word	0x08005c98
 80002cc:	080004e9 	.word	0x080004e9
 80002d0:	20001b04 	.word	0x20001b04
 80002d4:	08005cbc 	.word	0x08005cbc
 80002d8:	080009c1 	.word	0x080009c1
 80002dc:	20001c18 	.word	0x20001c18
 80002e0:	08005ce0 	.word	0x08005ce0
 80002e4:	08000e21 	.word	0x08000e21
 80002e8:	20001ce4 	.word	0x20001ce4

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f005 fb3b 	bl	8005976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fb30 	bl	8001988 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032e:	f000 ff2b 	bl	8001188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fd9c 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000356:	f000 ff17 	bl	8001188 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	; 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_USART2_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_USART2_UART_Init+0x4c>)
 800039c:	f002 f98a 	bl	80026b4 <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 feef 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20001ce8 	.word	0x20001ce8
 80003b4:	40004400 	.word	0x40004400

080003b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART3_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART3_UART_Init+0x4c>)
 80003f0:	f002 f960 	bl	80026b4 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 fec5 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20001b10 	.word	0x20001b10
 8000408:	40004800 	.word	0x40004800

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <MX_GPIO_Init+0xd0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a2d      	ldr	r2, [pc, #180]	; (80004dc <MX_GPIO_Init+0xd0>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <MX_GPIO_Init+0xd0>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b28      	ldr	r3, [pc, #160]	; (80004dc <MX_GPIO_Init+0xd0>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a27      	ldr	r2, [pc, #156]	; (80004dc <MX_GPIO_Init+0xd0>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b25      	ldr	r3, [pc, #148]	; (80004dc <MX_GPIO_Init+0xd0>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b22      	ldr	r3, [pc, #136]	; (80004dc <MX_GPIO_Init+0xd0>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a21      	ldr	r2, [pc, #132]	; (80004dc <MX_GPIO_Init+0xd0>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <MX_GPIO_Init+0xd0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <MX_GPIO_Init+0xd0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <MX_GPIO_Init+0xd0>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <MX_GPIO_Init+0xd0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000486:	4816      	ldr	r0, [pc, #88]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000488:	f001 fa4c 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000494:	f001 fa46 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000498:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <MX_GPIO_Init+0xd4>)
 80004b2:	f001 f8dd 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80004b6:	f44f 7358 	mov.w	r3, #864	; 0x360
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_GPIO_Init+0xd8>)
 80004d0:	f001 f8ce 	bl	8001670 <HAL_GPIO_Init>

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800
 80004e4:	40011000 	.word	0x40011000

080004e8 <Status_CLI_Task>:
  * @retval None
  */
/* USER CODE END Header_Status_CLI_Task */
// It is the status cli task, it receive the current running mode and atm value, then shows it on the screen
void Status_CLI_Task(void *argument)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 uint16_t statusMessage;	//take the message from queue
	 uint16_t message = 102;	//status message, 102 is mean the begin mode is FSM
 80004f0:	2366      	movs	r3, #102	; 0x66
 80004f2:	83fb      	strh	r3, [r7, #30]
	 osStatus_t status;			// check if queue get is OK
	 uint16_t x = 1;			//transfer the atm value
 80004f4:	2301      	movs	r3, #1
 80004f6:	83bb      	strh	r3, [r7, #28]
	 uint8_t period[3];			// save the atm_value transfered string, and it will be show on the putty.
  /* Infinite loop */
  for(;;)
  {
	  {
		  status = osMessageQueueGet(Status_QueueHandle, &statusMessage, NULL, 0U);
 80004f8:	4b92      	ldr	r3, [pc, #584]	; (8000744 <Status_CLI_Task+0x25c>)
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	f107 0112 	add.w	r1, r7, #18
 8000500:	2300      	movs	r3, #0
 8000502:	2200      	movs	r2, #0
 8000504:	f002 fd64 	bl	8002fd0 <osMessageQueueGet>
 8000508:	61b8      	str	r0, [r7, #24]
		        if (status == osOK)
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	2b00      	cmp	r3, #0
 800050e:	f040 8240 	bne.w	8000992 <Status_CLI_Task+0x4aa>
		        {
		         if(statusMessage == 101 || statusMessage == 102)//if received message is for status change
 8000512:	8a7b      	ldrh	r3, [r7, #18]
 8000514:	2b65      	cmp	r3, #101	; 0x65
 8000516:	d003      	beq.n	8000520 <Status_CLI_Task+0x38>
 8000518:	8a7b      	ldrh	r3, [r7, #18]
 800051a:	2b66      	cmp	r3, #102	; 0x66
 800051c:	f040 8126 	bne.w	800076c <Status_CLI_Task+0x284>
		         {
		        	message = statusMessage;	// transfer data from queue to message
 8000520:	8a7b      	ldrh	r3, [r7, #18]
 8000522:	83fb      	strh	r3, [r7, #30]
		        	 if (message == 101)		// scm mode renew
 8000524:	8bfb      	ldrh	r3, [r7, #30]
 8000526:	2b65      	cmp	r3, #101	; 0x65
 8000528:	f040 8084 	bne.w	8000634 <Status_CLI_Task+0x14c>
		        			        {
		        		 	 	 	 atm_value = x;
 800052c:	8bbb      	ldrh	r3, [r7, #28]
 800052e:	617b      	str	r3, [r7, #20]
		        		 	 	 	 itoa(atm_value,period,10);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	220a      	movs	r2, #10
 8000536:	4619      	mov	r1, r3
 8000538:	6978      	ldr	r0, [r7, #20]
 800053a:	f005 fa0f 	bl	800595c <itoa>
		        		 	 	 	save_cursor;
 800053e:	4b82      	ldr	r3, [pc, #520]	; (8000748 <Status_CLI_Task+0x260>)
 8000540:	4a82      	ldr	r2, [pc, #520]	; (800074c <Status_CLI_Task+0x264>)
 8000542:	6810      	ldr	r0, [r2, #0]
 8000544:	6018      	str	r0, [r3, #0]
		        		 	 	 	transmit;
 8000546:	4880      	ldr	r0, [pc, #512]	; (8000748 <Status_CLI_Task+0x260>)
 8000548:	f7ff fe0c 	bl	8000164 <strlen>
 800054c:	4603      	mov	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	497c      	ldr	r1, [pc, #496]	; (8000748 <Status_CLI_Task+0x260>)
 8000556:	487e      	ldr	r0, [pc, #504]	; (8000750 <Status_CLI_Task+0x268>)
 8000558:	f002 f8f9 	bl	800274e <HAL_UART_Transmit>
		        			  		  cursor0_0;
 800055c:	4b7a      	ldr	r3, [pc, #488]	; (8000748 <Status_CLI_Task+0x260>)
 800055e:	4a7d      	ldr	r2, [pc, #500]	; (8000754 <Status_CLI_Task+0x26c>)
 8000560:	6810      	ldr	r0, [r2, #0]
 8000562:	6018      	str	r0, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	7992      	ldrb	r2, [r2, #6]
 8000568:	8099      	strh	r1, [r3, #4]
 800056a:	719a      	strb	r2, [r3, #6]
		        			  		  transmit;
 800056c:	4876      	ldr	r0, [pc, #472]	; (8000748 <Status_CLI_Task+0x260>)
 800056e:	f7ff fdf9 	bl	8000164 <strlen>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	4973      	ldr	r1, [pc, #460]	; (8000748 <Status_CLI_Task+0x260>)
 800057c:	4874      	ldr	r0, [pc, #464]	; (8000750 <Status_CLI_Task+0x268>)
 800057e:	f002 f8e6 	bl	800274e <HAL_UART_Transmit>
		        			  		clean_line;
 8000582:	4b71      	ldr	r3, [pc, #452]	; (8000748 <Status_CLI_Task+0x260>)
 8000584:	4a74      	ldr	r2, [pc, #464]	; (8000758 <Status_CLI_Task+0x270>)
 8000586:	6810      	ldr	r0, [r2, #0]
 8000588:	6018      	str	r0, [r3, #0]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	711a      	strb	r2, [r3, #4]
		        			  		  transmit;
 800058e:	486e      	ldr	r0, [pc, #440]	; (8000748 <Status_CLI_Task+0x260>)
 8000590:	f7ff fde8 	bl	8000164 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	496a      	ldr	r1, [pc, #424]	; (8000748 <Status_CLI_Task+0x260>)
 800059e:	486c      	ldr	r0, [pc, #432]	; (8000750 <Status_CLI_Task+0x268>)
 80005a0:	f002 f8d5 	bl	800274e <HAL_UART_Transmit>
		        			  		  strcpy(( char*)cliBufferTX, "scm mode. ");
 80005a4:	4a68      	ldr	r2, [pc, #416]	; (8000748 <Status_CLI_Task+0x260>)
 80005a6:	4b6d      	ldr	r3, [pc, #436]	; (800075c <Status_CLI_Task+0x274>)
 80005a8:	cb03      	ldmia	r3!, {r0, r1}
 80005aa:	6010      	str	r0, [r2, #0]
 80005ac:	6051      	str	r1, [r2, #4]
 80005ae:	8819      	ldrh	r1, [r3, #0]
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	8111      	strh	r1, [r2, #8]
 80005b4:	7293      	strb	r3, [r2, #10]
		        			    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80005b6:	4864      	ldr	r0, [pc, #400]	; (8000748 <Status_CLI_Task+0x260>)
 80005b8:	f7ff fdd4 	bl	8000164 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	4960      	ldr	r1, [pc, #384]	; (8000748 <Status_CLI_Task+0x260>)
 80005c6:	4862      	ldr	r0, [pc, #392]	; (8000750 <Status_CLI_Task+0x268>)
 80005c8:	f002 f8c1 	bl	800274e <HAL_UART_Transmit>
		        			    	  HAL_UART_Transmit(&huart2, period, strlen((char*)period),1000);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fdc7 	bl	8000164 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f107 010c 	add.w	r1, r7, #12
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	485b      	ldr	r0, [pc, #364]	; (8000750 <Status_CLI_Task+0x268>)
 80005e4:	f002 f8b3 	bl	800274e <HAL_UART_Transmit>
		        			  		  strcpy(( char*)cliBufferTX, " is the atm value");
 80005e8:	4a57      	ldr	r2, [pc, #348]	; (8000748 <Status_CLI_Task+0x260>)
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <Status_CLI_Task+0x278>)
 80005ec:	4615      	mov	r5, r2
 80005ee:	461c      	mov	r4, r3
 80005f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f2:	6028      	str	r0, [r5, #0]
 80005f4:	6069      	str	r1, [r5, #4]
 80005f6:	60aa      	str	r2, [r5, #8]
 80005f8:	60eb      	str	r3, [r5, #12]
 80005fa:	8823      	ldrh	r3, [r4, #0]
 80005fc:	822b      	strh	r3, [r5, #16]
		        			    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80005fe:	4852      	ldr	r0, [pc, #328]	; (8000748 <Status_CLI_Task+0x260>)
 8000600:	f7ff fdb0 	bl	8000164 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	494e      	ldr	r1, [pc, #312]	; (8000748 <Status_CLI_Task+0x260>)
 800060e:	4850      	ldr	r0, [pc, #320]	; (8000750 <Status_CLI_Task+0x268>)
 8000610:	f002 f89d 	bl	800274e <HAL_UART_Transmit>
		        			    	  go_to_saved_cursor_point;
 8000614:	4b4c      	ldr	r3, [pc, #304]	; (8000748 <Status_CLI_Task+0x260>)
 8000616:	4a53      	ldr	r2, [pc, #332]	; (8000764 <Status_CLI_Task+0x27c>)
 8000618:	6810      	ldr	r0, [r2, #0]
 800061a:	6018      	str	r0, [r3, #0]
		        			    	  transmit;
 800061c:	484a      	ldr	r0, [pc, #296]	; (8000748 <Status_CLI_Task+0x260>)
 800061e:	f7ff fda1 	bl	8000164 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	4947      	ldr	r1, [pc, #284]	; (8000748 <Status_CLI_Task+0x260>)
 800062c:	4848      	ldr	r0, [pc, #288]	; (8000750 <Status_CLI_Task+0x268>)
 800062e:	f002 f88e 	bl	800274e <HAL_UART_Transmit>
		        	 if (message == 101)		// scm mode renew
 8000632:	e1ad      	b.n	8000990 <Status_CLI_Task+0x4a8>

		        			        }
		        	 else if (message == 102)// fsm mode renew
 8000634:	8bfb      	ldrh	r3, [r7, #30]
 8000636:	2b66      	cmp	r3, #102	; 0x66
 8000638:	f040 81aa 	bne.w	8000990 <Status_CLI_Task+0x4a8>
		        			       		  {
    		 	 	 	 	 	 	 	 atm_value = x;
 800063c:	8bbb      	ldrh	r3, [r7, #28]
 800063e:	617b      	str	r3, [r7, #20]
    		 	 	 	 	 	 	 	 itoa(atm_value,period,10);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	220a      	movs	r2, #10
 8000646:	4619      	mov	r1, r3
 8000648:	6978      	ldr	r0, [r7, #20]
 800064a:	f005 f987 	bl	800595c <itoa>
		        		 	 	 	 	save_cursor;
 800064e:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <Status_CLI_Task+0x260>)
 8000650:	4a3e      	ldr	r2, [pc, #248]	; (800074c <Status_CLI_Task+0x264>)
 8000652:	6810      	ldr	r0, [r2, #0]
 8000654:	6018      	str	r0, [r3, #0]
		        		 	 	 	 	transmit;
 8000656:	483c      	ldr	r0, [pc, #240]	; (8000748 <Status_CLI_Task+0x260>)
 8000658:	f7ff fd84 	bl	8000164 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	4938      	ldr	r1, [pc, #224]	; (8000748 <Status_CLI_Task+0x260>)
 8000666:	483a      	ldr	r0, [pc, #232]	; (8000750 <Status_CLI_Task+0x268>)
 8000668:	f002 f871 	bl	800274e <HAL_UART_Transmit>
		        				  		  cursor0_0;
 800066c:	4b36      	ldr	r3, [pc, #216]	; (8000748 <Status_CLI_Task+0x260>)
 800066e:	4a39      	ldr	r2, [pc, #228]	; (8000754 <Status_CLI_Task+0x26c>)
 8000670:	6810      	ldr	r0, [r2, #0]
 8000672:	6018      	str	r0, [r3, #0]
 8000674:	8891      	ldrh	r1, [r2, #4]
 8000676:	7992      	ldrb	r2, [r2, #6]
 8000678:	8099      	strh	r1, [r3, #4]
 800067a:	719a      	strb	r2, [r3, #6]
		        				  		  transmit;
 800067c:	4832      	ldr	r0, [pc, #200]	; (8000748 <Status_CLI_Task+0x260>)
 800067e:	f7ff fd71 	bl	8000164 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	492f      	ldr	r1, [pc, #188]	; (8000748 <Status_CLI_Task+0x260>)
 800068c:	4830      	ldr	r0, [pc, #192]	; (8000750 <Status_CLI_Task+0x268>)
 800068e:	f002 f85e 	bl	800274e <HAL_UART_Transmit>
		        				  		clean_line;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <Status_CLI_Task+0x260>)
 8000694:	4a30      	ldr	r2, [pc, #192]	; (8000758 <Status_CLI_Task+0x270>)
 8000696:	6810      	ldr	r0, [r2, #0]
 8000698:	6018      	str	r0, [r3, #0]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	711a      	strb	r2, [r3, #4]
		        				  		  transmit;
 800069e:	482a      	ldr	r0, [pc, #168]	; (8000748 <Status_CLI_Task+0x260>)
 80006a0:	f7ff fd60 	bl	8000164 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	4926      	ldr	r1, [pc, #152]	; (8000748 <Status_CLI_Task+0x260>)
 80006ae:	4828      	ldr	r0, [pc, #160]	; (8000750 <Status_CLI_Task+0x268>)
 80006b0:	f002 f84d 	bl	800274e <HAL_UART_Transmit>
		        				  		  strcpy(( char*)cliBufferTX, "fsm mode. ");
 80006b4:	4a24      	ldr	r2, [pc, #144]	; (8000748 <Status_CLI_Task+0x260>)
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <Status_CLI_Task+0x280>)
 80006b8:	cb03      	ldmia	r3!, {r0, r1}
 80006ba:	6010      	str	r0, [r2, #0]
 80006bc:	6051      	str	r1, [r2, #4]
 80006be:	8819      	ldrh	r1, [r3, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	8111      	strh	r1, [r2, #8]
 80006c4:	7293      	strb	r3, [r2, #10]
		        				    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80006c6:	4820      	ldr	r0, [pc, #128]	; (8000748 <Status_CLI_Task+0x260>)
 80006c8:	f7ff fd4c 	bl	8000164 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	491c      	ldr	r1, [pc, #112]	; (8000748 <Status_CLI_Task+0x260>)
 80006d6:	481e      	ldr	r0, [pc, #120]	; (8000750 <Status_CLI_Task+0x268>)
 80006d8:	f002 f839 	bl	800274e <HAL_UART_Transmit>
			        			    	  HAL_UART_Transmit(&huart2, period, strlen((char*)period),1000);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd3f 	bl	8000164 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f107 010c 	add.w	r1, r7, #12
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	4817      	ldr	r0, [pc, #92]	; (8000750 <Status_CLI_Task+0x268>)
 80006f4:	f002 f82b 	bl	800274e <HAL_UART_Transmit>
			        			  		  strcpy(( char*)cliBufferTX, " is the atm value");
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <Status_CLI_Task+0x260>)
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <Status_CLI_Task+0x278>)
 80006fc:	4615      	mov	r5, r2
 80006fe:	461c      	mov	r4, r3
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	6028      	str	r0, [r5, #0]
 8000704:	6069      	str	r1, [r5, #4]
 8000706:	60aa      	str	r2, [r5, #8]
 8000708:	60eb      	str	r3, [r5, #12]
 800070a:	8823      	ldrh	r3, [r4, #0]
 800070c:	822b      	strh	r3, [r5, #16]
			        			    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <Status_CLI_Task+0x260>)
 8000710:	f7ff fd28 	bl	8000164 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	490a      	ldr	r1, [pc, #40]	; (8000748 <Status_CLI_Task+0x260>)
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <Status_CLI_Task+0x268>)
 8000720:	f002 f815 	bl	800274e <HAL_UART_Transmit>
			        			    	  go_to_saved_cursor_point;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <Status_CLI_Task+0x260>)
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <Status_CLI_Task+0x27c>)
 8000728:	6810      	ldr	r0, [r2, #0]
 800072a:	6018      	str	r0, [r3, #0]
		        				    	  transmit;
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <Status_CLI_Task+0x260>)
 800072e:	f7ff fd19 	bl	8000164 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	4903      	ldr	r1, [pc, #12]	; (8000748 <Status_CLI_Task+0x260>)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <Status_CLI_Task+0x268>)
 800073e:	f002 f806 	bl	800274e <HAL_UART_Transmit>
		        	 if (message == 101)		// scm mode renew
 8000742:	e125      	b.n	8000990 <Status_CLI_Task+0x4a8>
 8000744:	20001b0c 	.word	0x20001b0c
 8000748:	20001b50 	.word	0x20001b50
 800074c:	08005bec 	.word	0x08005bec
 8000750:	20001ce8 	.word	0x20001ce8
 8000754:	08005bc8 	.word	0x08005bc8
 8000758:	08005bf0 	.word	0x08005bf0
 800075c:	08005bf8 	.word	0x08005bf8
 8000760:	08005c04 	.word	0x08005c04
 8000764:	08005c18 	.word	0x08005c18
 8000768:	08005c1c 	.word	0x08005c1c
		        			       		  }
		         }
		         else	// if the received message is for atm X change
		         {
		        	 x = statusMessage;
 800076c:	8a7b      	ldrh	r3, [r7, #18]
 800076e:	83bb      	strh	r3, [r7, #28]
		        	 if (message == 101)	// current scm mode
 8000770:	8bfb      	ldrh	r3, [r7, #30]
 8000772:	2b65      	cmp	r3, #101	; 0x65
 8000774:	f040 8084 	bne.w	8000880 <Status_CLI_Task+0x398>
		        			        {
		        		 	 	 	 atm_value = x;
 8000778:	8bbb      	ldrh	r3, [r7, #28]
 800077a:	617b      	str	r3, [r7, #20]
		        		 	 	 	 itoa(atm_value,period,10);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	220a      	movs	r2, #10
 8000782:	4619      	mov	r1, r3
 8000784:	6978      	ldr	r0, [r7, #20]
 8000786:	f005 f8e9 	bl	800595c <itoa>
		        		 	 	 	save_cursor;
 800078a:	4b84      	ldr	r3, [pc, #528]	; (800099c <Status_CLI_Task+0x4b4>)
 800078c:	4a84      	ldr	r2, [pc, #528]	; (80009a0 <Status_CLI_Task+0x4b8>)
 800078e:	6810      	ldr	r0, [r2, #0]
 8000790:	6018      	str	r0, [r3, #0]
		        		 	 	 	transmit;
 8000792:	4882      	ldr	r0, [pc, #520]	; (800099c <Status_CLI_Task+0x4b4>)
 8000794:	f7ff fce6 	bl	8000164 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	497e      	ldr	r1, [pc, #504]	; (800099c <Status_CLI_Task+0x4b4>)
 80007a2:	4880      	ldr	r0, [pc, #512]	; (80009a4 <Status_CLI_Task+0x4bc>)
 80007a4:	f001 ffd3 	bl	800274e <HAL_UART_Transmit>
		        			  		  cursor0_0;
 80007a8:	4b7c      	ldr	r3, [pc, #496]	; (800099c <Status_CLI_Task+0x4b4>)
 80007aa:	4a7f      	ldr	r2, [pc, #508]	; (80009a8 <Status_CLI_Task+0x4c0>)
 80007ac:	6810      	ldr	r0, [r2, #0]
 80007ae:	6018      	str	r0, [r3, #0]
 80007b0:	8891      	ldrh	r1, [r2, #4]
 80007b2:	7992      	ldrb	r2, [r2, #6]
 80007b4:	8099      	strh	r1, [r3, #4]
 80007b6:	719a      	strb	r2, [r3, #6]
		        			  		  transmit;
 80007b8:	4878      	ldr	r0, [pc, #480]	; (800099c <Status_CLI_Task+0x4b4>)
 80007ba:	f7ff fcd3 	bl	8000164 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	4975      	ldr	r1, [pc, #468]	; (800099c <Status_CLI_Task+0x4b4>)
 80007c8:	4876      	ldr	r0, [pc, #472]	; (80009a4 <Status_CLI_Task+0x4bc>)
 80007ca:	f001 ffc0 	bl	800274e <HAL_UART_Transmit>
		        			  		clean_line;
 80007ce:	4b73      	ldr	r3, [pc, #460]	; (800099c <Status_CLI_Task+0x4b4>)
 80007d0:	4a76      	ldr	r2, [pc, #472]	; (80009ac <Status_CLI_Task+0x4c4>)
 80007d2:	6810      	ldr	r0, [r2, #0]
 80007d4:	6018      	str	r0, [r3, #0]
 80007d6:	7912      	ldrb	r2, [r2, #4]
 80007d8:	711a      	strb	r2, [r3, #4]
		        			  		  transmit;
 80007da:	4870      	ldr	r0, [pc, #448]	; (800099c <Status_CLI_Task+0x4b4>)
 80007dc:	f7ff fcc2 	bl	8000164 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e8:	496c      	ldr	r1, [pc, #432]	; (800099c <Status_CLI_Task+0x4b4>)
 80007ea:	486e      	ldr	r0, [pc, #440]	; (80009a4 <Status_CLI_Task+0x4bc>)
 80007ec:	f001 ffaf 	bl	800274e <HAL_UART_Transmit>
		        			  		  strcpy(( char*)cliBufferTX, "scm mode. ");
 80007f0:	4a6a      	ldr	r2, [pc, #424]	; (800099c <Status_CLI_Task+0x4b4>)
 80007f2:	4b6f      	ldr	r3, [pc, #444]	; (80009b0 <Status_CLI_Task+0x4c8>)
 80007f4:	cb03      	ldmia	r3!, {r0, r1}
 80007f6:	6010      	str	r0, [r2, #0]
 80007f8:	6051      	str	r1, [r2, #4]
 80007fa:	8819      	ldrh	r1, [r3, #0]
 80007fc:	789b      	ldrb	r3, [r3, #2]
 80007fe:	8111      	strh	r1, [r2, #8]
 8000800:	7293      	strb	r3, [r2, #10]
		        			    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000802:	4866      	ldr	r0, [pc, #408]	; (800099c <Status_CLI_Task+0x4b4>)
 8000804:	f7ff fcae 	bl	8000164 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	4962      	ldr	r1, [pc, #392]	; (800099c <Status_CLI_Task+0x4b4>)
 8000812:	4864      	ldr	r0, [pc, #400]	; (80009a4 <Status_CLI_Task+0x4bc>)
 8000814:	f001 ff9b 	bl	800274e <HAL_UART_Transmit>
		        			    	  HAL_UART_Transmit(&huart2, period, strlen((char*)period),1000);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fca1 	bl	8000164 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 010c 	add.w	r1, r7, #12
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	485d      	ldr	r0, [pc, #372]	; (80009a4 <Status_CLI_Task+0x4bc>)
 8000830:	f001 ff8d 	bl	800274e <HAL_UART_Transmit>
		        			  		  strcpy(( char*)cliBufferTX, " is the atm value");
 8000834:	4a59      	ldr	r2, [pc, #356]	; (800099c <Status_CLI_Task+0x4b4>)
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <Status_CLI_Task+0x4cc>)
 8000838:	4615      	mov	r5, r2
 800083a:	461c      	mov	r4, r3
 800083c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083e:	6028      	str	r0, [r5, #0]
 8000840:	6069      	str	r1, [r5, #4]
 8000842:	60aa      	str	r2, [r5, #8]
 8000844:	60eb      	str	r3, [r5, #12]
 8000846:	8823      	ldrh	r3, [r4, #0]
 8000848:	822b      	strh	r3, [r5, #16]
		        			    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800084a:	4854      	ldr	r0, [pc, #336]	; (800099c <Status_CLI_Task+0x4b4>)
 800084c:	f7ff fc8a 	bl	8000164 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	4950      	ldr	r1, [pc, #320]	; (800099c <Status_CLI_Task+0x4b4>)
 800085a:	4852      	ldr	r0, [pc, #328]	; (80009a4 <Status_CLI_Task+0x4bc>)
 800085c:	f001 ff77 	bl	800274e <HAL_UART_Transmit>
		        			    	  go_to_saved_cursor_point;
 8000860:	4b4e      	ldr	r3, [pc, #312]	; (800099c <Status_CLI_Task+0x4b4>)
 8000862:	4a55      	ldr	r2, [pc, #340]	; (80009b8 <Status_CLI_Task+0x4d0>)
 8000864:	6810      	ldr	r0, [r2, #0]
 8000866:	6018      	str	r0, [r3, #0]
		        			    	  transmit;
 8000868:	484c      	ldr	r0, [pc, #304]	; (800099c <Status_CLI_Task+0x4b4>)
 800086a:	f7ff fc7b 	bl	8000164 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000876:	4949      	ldr	r1, [pc, #292]	; (800099c <Status_CLI_Task+0x4b4>)
 8000878:	484a      	ldr	r0, [pc, #296]	; (80009a4 <Status_CLI_Task+0x4bc>)
 800087a:	f001 ff68 	bl	800274e <HAL_UART_Transmit>
 800087e:	e088      	b.n	8000992 <Status_CLI_Task+0x4aa>

		        			        }
		        	 else if (message == 102)//current fsm mode
 8000880:	8bfb      	ldrh	r3, [r7, #30]
 8000882:	2b66      	cmp	r3, #102	; 0x66
 8000884:	f040 8085 	bne.w	8000992 <Status_CLI_Task+0x4aa>
		        			       		  {
    		 	 	 	 	 	 	 	 atm_value = x;
 8000888:	8bbb      	ldrh	r3, [r7, #28]
 800088a:	617b      	str	r3, [r7, #20]
    		 	 	 	 	 	 	 	 itoa(atm_value,period,10);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	220a      	movs	r2, #10
 8000892:	4619      	mov	r1, r3
 8000894:	6978      	ldr	r0, [r7, #20]
 8000896:	f005 f861 	bl	800595c <itoa>
		        		 	 	 	 	save_cursor;
 800089a:	4b40      	ldr	r3, [pc, #256]	; (800099c <Status_CLI_Task+0x4b4>)
 800089c:	4a40      	ldr	r2, [pc, #256]	; (80009a0 <Status_CLI_Task+0x4b8>)
 800089e:	6810      	ldr	r0, [r2, #0]
 80008a0:	6018      	str	r0, [r3, #0]
		        		 	 	 	 	transmit;
 80008a2:	483e      	ldr	r0, [pc, #248]	; (800099c <Status_CLI_Task+0x4b4>)
 80008a4:	f7ff fc5e 	bl	8000164 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	493a      	ldr	r1, [pc, #232]	; (800099c <Status_CLI_Task+0x4b4>)
 80008b2:	483c      	ldr	r0, [pc, #240]	; (80009a4 <Status_CLI_Task+0x4bc>)
 80008b4:	f001 ff4b 	bl	800274e <HAL_UART_Transmit>
		        				  		  cursor0_0;
 80008b8:	4b38      	ldr	r3, [pc, #224]	; (800099c <Status_CLI_Task+0x4b4>)
 80008ba:	4a3b      	ldr	r2, [pc, #236]	; (80009a8 <Status_CLI_Task+0x4c0>)
 80008bc:	6810      	ldr	r0, [r2, #0]
 80008be:	6018      	str	r0, [r3, #0]
 80008c0:	8891      	ldrh	r1, [r2, #4]
 80008c2:	7992      	ldrb	r2, [r2, #6]
 80008c4:	8099      	strh	r1, [r3, #4]
 80008c6:	719a      	strb	r2, [r3, #6]
		        				  		  transmit;
 80008c8:	4834      	ldr	r0, [pc, #208]	; (800099c <Status_CLI_Task+0x4b4>)
 80008ca:	f7ff fc4b 	bl	8000164 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	4931      	ldr	r1, [pc, #196]	; (800099c <Status_CLI_Task+0x4b4>)
 80008d8:	4832      	ldr	r0, [pc, #200]	; (80009a4 <Status_CLI_Task+0x4bc>)
 80008da:	f001 ff38 	bl	800274e <HAL_UART_Transmit>
		        				  		clean_line;
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <Status_CLI_Task+0x4b4>)
 80008e0:	4a32      	ldr	r2, [pc, #200]	; (80009ac <Status_CLI_Task+0x4c4>)
 80008e2:	6810      	ldr	r0, [r2, #0]
 80008e4:	6018      	str	r0, [r3, #0]
 80008e6:	7912      	ldrb	r2, [r2, #4]
 80008e8:	711a      	strb	r2, [r3, #4]
		        				  		  transmit;
 80008ea:	482c      	ldr	r0, [pc, #176]	; (800099c <Status_CLI_Task+0x4b4>)
 80008ec:	f7ff fc3a 	bl	8000164 <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f8:	4928      	ldr	r1, [pc, #160]	; (800099c <Status_CLI_Task+0x4b4>)
 80008fa:	482a      	ldr	r0, [pc, #168]	; (80009a4 <Status_CLI_Task+0x4bc>)
 80008fc:	f001 ff27 	bl	800274e <HAL_UART_Transmit>
		        				  		  strcpy(( char*)cliBufferTX, "fsm mode. ");
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <Status_CLI_Task+0x4b4>)
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <Status_CLI_Task+0x4d4>)
 8000904:	cb03      	ldmia	r3!, {r0, r1}
 8000906:	6010      	str	r0, [r2, #0]
 8000908:	6051      	str	r1, [r2, #4]
 800090a:	8819      	ldrh	r1, [r3, #0]
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	8111      	strh	r1, [r2, #8]
 8000910:	7293      	strb	r3, [r2, #10]
		        				    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <Status_CLI_Task+0x4b4>)
 8000914:	f7ff fc26 	bl	8000164 <strlen>
 8000918:	4603      	mov	r3, r0
 800091a:	b29a      	uxth	r2, r3
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	491e      	ldr	r1, [pc, #120]	; (800099c <Status_CLI_Task+0x4b4>)
 8000922:	4820      	ldr	r0, [pc, #128]	; (80009a4 <Status_CLI_Task+0x4bc>)
 8000924:	f001 ff13 	bl	800274e <HAL_UART_Transmit>
			        			    	  HAL_UART_Transmit(&huart2, period, strlen((char*)period),1000);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc19 	bl	8000164 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29a      	uxth	r2, r3
 8000936:	f107 010c 	add.w	r1, r7, #12
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	4819      	ldr	r0, [pc, #100]	; (80009a4 <Status_CLI_Task+0x4bc>)
 8000940:	f001 ff05 	bl	800274e <HAL_UART_Transmit>
			        			  		  strcpy(( char*)cliBufferTX, " is the atm value");
 8000944:	4a15      	ldr	r2, [pc, #84]	; (800099c <Status_CLI_Task+0x4b4>)
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <Status_CLI_Task+0x4cc>)
 8000948:	4615      	mov	r5, r2
 800094a:	461c      	mov	r4, r3
 800094c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094e:	6028      	str	r0, [r5, #0]
 8000950:	6069      	str	r1, [r5, #4]
 8000952:	60aa      	str	r2, [r5, #8]
 8000954:	60eb      	str	r3, [r5, #12]
 8000956:	8823      	ldrh	r3, [r4, #0]
 8000958:	822b      	strh	r3, [r5, #16]
			        			    	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800095a:	4810      	ldr	r0, [pc, #64]	; (800099c <Status_CLI_Task+0x4b4>)
 800095c:	f7ff fc02 	bl	8000164 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <Status_CLI_Task+0x4b4>)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <Status_CLI_Task+0x4bc>)
 800096c:	f001 feef 	bl	800274e <HAL_UART_Transmit>
			        			    	  go_to_saved_cursor_point;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <Status_CLI_Task+0x4b4>)
 8000972:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <Status_CLI_Task+0x4d0>)
 8000974:	6810      	ldr	r0, [r2, #0]
 8000976:	6018      	str	r0, [r3, #0]
		        				    	  transmit;
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <Status_CLI_Task+0x4b4>)
 800097a:	f7ff fbf3 	bl	8000164 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	4905      	ldr	r1, [pc, #20]	; (800099c <Status_CLI_Task+0x4b4>)
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <Status_CLI_Task+0x4bc>)
 800098a:	f001 fee0 	bl	800274e <HAL_UART_Transmit>
 800098e:	e000      	b.n	8000992 <Status_CLI_Task+0x4aa>
		        	 if (message == 101)		// scm mode renew
 8000990:	bf00      	nop
		         }
		        }


	  }
    osDelay(100);
 8000992:	2064      	movs	r0, #100	; 0x64
 8000994:	f002 f9f4 	bl	8002d80 <osDelay>
		  status = osMessageQueueGet(Status_QueueHandle, &statusMessage, NULL, 0U);
 8000998:	e5ae      	b.n	80004f8 <Status_CLI_Task+0x10>
 800099a:	bf00      	nop
 800099c:	20001b50 	.word	0x20001b50
 80009a0:	08005bec 	.word	0x08005bec
 80009a4:	20001ce8 	.word	0x20001ce8
 80009a8:	08005bc8 	.word	0x08005bc8
 80009ac:	08005bf0 	.word	0x08005bf0
 80009b0:	08005bf8 	.word	0x08005bf8
 80009b4:	08005c04 	.word	0x08005c04
 80009b8:	08005c18 	.word	0x08005c18
 80009bc:	08005c1c 	.word	0x08005c1c

080009c0 <RX_CLI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RX_CLI_Task */
void RX_CLI_Task(void *argument) // receive message from host, and send message to control part
{
 80009c0:	b5b0      	push	{r4, r5, r7, lr}
 80009c2:	b0b8      	sub	sp, #224	; 0xe0
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RX_CLI_Task */
	uint16_t cliMessage;
	int8_t i=0;				//the local position for cliBuffer
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	uint8_t *p;
	uint8_t cliBufferTX[200];
	 uint16_t x = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
  /* Infinite loop */
  for(;;)
  {
	  if((HAL_UART_Receive(&huart2,cliBufferRX, 1,300) == HAL_OK))
 80009d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009d8:	2201      	movs	r2, #1
 80009da:	49b2      	ldr	r1, [pc, #712]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 80009dc:	48b2      	ldr	r0, [pc, #712]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 80009de:	f001 ff48 	bl	8002872 <HAL_UART_Receive>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f040 8211 	bne.w	8000e0c <RX_CLI_Task+0x44c>
	  {
		  cliBufferTX[i] = cliBufferRX[0];
 80009ea:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80009ee:	4aad      	ldr	r2, [pc, #692]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80009f6:	440b      	add	r3, r1
 80009f8:	f803 2cd4 	strb.w	r2, [r3, #-212]
		  if( cliBufferTX[i]=='\r')	//	if enter
 80009fc:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000a00:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000a04:	4413      	add	r3, r2
 8000a06:	f813 3cd4 	ldrb.w	r3, [r3, #-212]
 8000a0a:	2b0d      	cmp	r3, #13
 8000a0c:	f040 81a1 	bne.w	8000d52 <RX_CLI_Task+0x392>
		 		  {
		 			cliBufferTX[i]='\0';
 8000a10:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000a14:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000a18:	4413      	add	r3, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f803 2cd4 	strb.w	r2, [r3, #-212]
		 			cliBufferRX[0]='\r';
 8000a20:	4ba0      	ldr	r3, [pc, #640]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000a22:	220d      	movs	r2, #13
 8000a24:	701a      	strb	r2, [r3, #0]
		 			cliBufferRX[1]='\n';
 8000a26:	4b9f      	ldr	r3, [pc, #636]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000a28:	220a      	movs	r2, #10
 8000a2a:	705a      	strb	r2, [r3, #1]
		 			HAL_UART_Transmit(&huart2,cliBufferRX,2,1000);
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	2202      	movs	r2, #2
 8000a32:	499c      	ldr	r1, [pc, #624]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000a34:	489c      	ldr	r0, [pc, #624]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000a36:	f001 fe8a 	bl	800274e <HAL_UART_Transmit>
					if(strcmp(cliBufferTX,"help")==0)	//execute help command
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	499b      	ldr	r1, [pc, #620]	; (8000cac <RX_CLI_Task+0x2ec>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fb85 	bl	8000150 <strcmp>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d161      	bne.n	8000b10 <RX_CLI_Task+0x150>
					  {
						  cursor0_0;
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4a97      	ldr	r2, [pc, #604]	; (8000cb0 <RX_CLI_Task+0x2f0>)
 8000a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	8019      	strh	r1, [r3, #0]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	0c0a      	lsrs	r2, r1, #16
 8000a60:	701a      	strb	r2, [r3, #0]
						  transmit;
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fb7c 	bl	8000164 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f107 010c 	add.w	r1, r7, #12
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	488b      	ldr	r0, [pc, #556]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000a7a:	f001 fe68 	bl	800274e <HAL_UART_Transmit>
						  clean_screen;
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4a8c      	ldr	r2, [pc, #560]	; (8000cb4 <RX_CLI_Task+0x2f4>)
 8000a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a88:	6018      	str	r0, [r3, #0]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	7019      	strb	r1, [r3, #0]
						  transmit;
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fb66 	bl	8000164 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa4:	4880      	ldr	r0, [pc, #512]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000aa6:	f001 fe52 	bl	800274e <HAL_UART_Transmit>
				  	  	  strcpy(( char*)cliBufferTX, "enter scm,fsm,or atm x");
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4a82      	ldr	r2, [pc, #520]	; (8000cb8 <RX_CLI_Task+0x2f8>)
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	4615      	mov	r5, r2
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000abc:	6020      	str	r0, [r4, #0]
 8000abe:	3404      	adds	r4, #4
 8000ac0:	8021      	strh	r1, [r4, #0]
 8000ac2:	3402      	adds	r4, #2
 8000ac4:	0c0b      	lsrs	r3, r1, #16
 8000ac6:	7023      	strb	r3, [r4, #0]
				  	  	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fb49 	bl	8000164 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	f107 010c 	add.w	r1, r7, #12
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	4872      	ldr	r0, [pc, #456]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000ae0:	f001 fe35 	bl	800274e <HAL_UART_Transmit>
				  	  	  cursor10_0;
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4a74      	ldr	r2, [pc, #464]	; (8000cbc <RX_CLI_Task+0x2fc>)
 8000aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aee:	e883 0003 	stmia.w	r3, {r0, r1}
				  	  	  transmit;
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fb34 	bl	8000164 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	4867      	ldr	r0, [pc, #412]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000b0a:	f001 fe20 	bl	800274e <HAL_UART_Transmit>
 8000b0e:	e11c      	b.n	8000d4a <RX_CLI_Task+0x38a>
					  }
					else if(strcmp(cliBufferTX,"scm")==0 || strcmp(cliBufferTX,"SCM")==0)//execute scm command
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	496a      	ldr	r1, [pc, #424]	; (8000cc0 <RX_CLI_Task+0x300>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb1a 	bl	8000150 <strcmp>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d008      	beq.n	8000b34 <RX_CLI_Task+0x174>
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4967      	ldr	r1, [pc, #412]	; (8000cc4 <RX_CLI_Task+0x304>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb11 	bl	8000150 <strcmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d111      	bne.n	8000b58 <RX_CLI_Task+0x198>
					  {
						cliMessage = 101;
 8000b34:	2365      	movs	r3, #101	; 0x65
 8000b36:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						 if (osMessageQueuePut(CLI_QueueHandle, &cliMessage, 1U, 0U) != osOK)
 8000b3a:	4b63      	ldr	r3, [pc, #396]	; (8000cc8 <RX_CLI_Task+0x308>)
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	f107 01d6 	add.w	r1, r7, #214	; 0xd6
 8000b42:	2300      	movs	r3, #0
 8000b44:	2201      	movs	r2, #1
 8000b46:	f002 f9cf 	bl	8002ee8 <osMessageQueuePut>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 80fc 	beq.w	8000d4a <RX_CLI_Task+0x38a>
								 		                {
								 		                    Error_Handler();
 8000b52:	f000 fb19 	bl	8001188 <Error_Handler>
						 if (osMessageQueuePut(CLI_QueueHandle, &cliMessage, 1U, 0U) != osOK)
 8000b56:	e0f8      	b.n	8000d4a <RX_CLI_Task+0x38a>
								 		                }
					  }
					else if(strcmp(cliBufferTX,"fsm")==0 || strcmp(cliBufferTX,"FSM")==0)//execute fsm command
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	495b      	ldr	r1, [pc, #364]	; (8000ccc <RX_CLI_Task+0x30c>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff faf6 	bl	8000150 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <RX_CLI_Task+0x1bc>
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4958      	ldr	r1, [pc, #352]	; (8000cd0 <RX_CLI_Task+0x310>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff faed 	bl	8000150 <strcmp>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d111      	bne.n	8000ba0 <RX_CLI_Task+0x1e0>
					  {
						cliMessage = 102;
 8000b7c:	2366      	movs	r3, #102	; 0x66
 8000b7e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						 if (osMessageQueuePut(CLI_QueueHandle, &cliMessage, 1U, 0U) != osOK)
 8000b82:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <RX_CLI_Task+0x308>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	f107 01d6 	add.w	r1, r7, #214	; 0xd6
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f002 f9ab 	bl	8002ee8 <osMessageQueuePut>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 80d8 	beq.w	8000d4a <RX_CLI_Task+0x38a>
								 		                {
								 		                    Error_Handler();
 8000b9a:	f000 faf5 	bl	8001188 <Error_Handler>
						 if (osMessageQueuePut(CLI_QueueHandle, &cliMessage, 1U, 0U) != osOK)
 8000b9e:	e0d4      	b.n	8000d4a <RX_CLI_Task+0x38a>
								 		                }
					  }
					else if((cliBufferTX[0]=='a' && cliBufferTX[1] == 't' && cliBufferTX[2] == 'm' && cliBufferTX[3] == ' ') || (cliBufferTX[0]=='A' && cliBufferTX[1] == 'T' && cliBufferTX[2] == 'M' && cliBufferTX[3] == ' '))
 8000ba0:	7b3b      	ldrb	r3, [r7, #12]
 8000ba2:	2b61      	cmp	r3, #97	; 0x61
 8000ba4:	d108      	bne.n	8000bb8 <RX_CLI_Task+0x1f8>
 8000ba6:	7b7b      	ldrb	r3, [r7, #13]
 8000ba8:	2b74      	cmp	r3, #116	; 0x74
 8000baa:	d105      	bne.n	8000bb8 <RX_CLI_Task+0x1f8>
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	2b6d      	cmp	r3, #109	; 0x6d
 8000bb0:	d102      	bne.n	8000bb8 <RX_CLI_Task+0x1f8>
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b20      	cmp	r3, #32
 8000bb6:	d00f      	beq.n	8000bd8 <RX_CLI_Task+0x218>
 8000bb8:	7b3b      	ldrb	r3, [r7, #12]
 8000bba:	2b41      	cmp	r3, #65	; 0x41
 8000bbc:	f040 808c 	bne.w	8000cd8 <RX_CLI_Task+0x318>
 8000bc0:	7b7b      	ldrb	r3, [r7, #13]
 8000bc2:	2b54      	cmp	r3, #84	; 0x54
 8000bc4:	f040 8088 	bne.w	8000cd8 <RX_CLI_Task+0x318>
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	2b4d      	cmp	r3, #77	; 0x4d
 8000bcc:	f040 8084 	bne.w	8000cd8 <RX_CLI_Task+0x318>
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	2b20      	cmp	r3, #32
 8000bd4:	f040 8080 	bne.w	8000cd8 <RX_CLI_Task+0x318>
					  {//execute ATM x command
						cliMessage = 3;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						uint8_t num[3];
						num[0] = cliBufferTX[4];
 8000bde:	7c3b      	ldrb	r3, [r7, #16]
 8000be0:	723b      	strb	r3, [r7, #8]
						num[1] = cliBufferTX[5];
 8000be2:	7c7b      	ldrb	r3, [r7, #17]
 8000be4:	727b      	strb	r3, [r7, #9]
						num[2] = cliBufferTX[6];
 8000be6:	7cbb      	ldrb	r3, [r7, #18]
 8000be8:	72bb      	strb	r3, [r7, #10]

						x = atoi(num);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fe74 	bl	80058dc <atoi>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
						if ((x >= 1) && (x <= 100))//make sure x is from 1 to 100
 8000bfa:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d015      	beq.n	8000c2e <RX_CLI_Task+0x26e>
 8000c02:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d811      	bhi.n	8000c2e <RX_CLI_Task+0x26e>
						{
							cliMessage = x;
 8000c0a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8000c0e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
				 			if (osMessageQueuePut(CLI_QueueHandle, &cliMessage, 1U, 0U) != osOK)
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <RX_CLI_Task+0x308>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f107 01d6 	add.w	r1, r7, #214	; 0xd6
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f002 f963 	bl	8002ee8 <osMessageQueuePut>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d03c      	beq.n	8000ca2 <RX_CLI_Task+0x2e2>
				 											 		                {
				 											 		                    Error_Handler();
 8000c28:	f000 faae 	bl	8001188 <Error_Handler>
				 			if (osMessageQueuePut(CLI_QueueHandle, &cliMessage, 1U, 0U) != osOK)
 8000c2c:	e039      	b.n	8000ca2 <RX_CLI_Task+0x2e2>
				 											 		                }
						}
						else {
							invalid_command;               //execute invalid command (for wrong number x)
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <RX_CLI_Task+0x314>)
 8000c32:	4615      	mov	r5, r2
 8000c34:	461c      	mov	r4, r3
 8000c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c38:	6028      	str	r0, [r5, #0]
 8000c3a:	6069      	str	r1, [r5, #4]
 8000c3c:	60aa      	str	r2, [r5, #8]
 8000c3e:	60eb      	str	r3, [r5, #12]
 8000c40:	8823      	ldrh	r3, [r4, #0]
 8000c42:	822b      	strh	r3, [r5, #16]
							HAL_UART_Transmit(&huart2, cliBufferRX, strlen((char*)cliBufferRX),1000);	//transfer invalid message
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000c46:	f7ff fa8d 	bl	8000164 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	4914      	ldr	r1, [pc, #80]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000c54:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000c56:	f001 fd7a 	bl	800274e <HAL_UART_Transmit>
							transmit;
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fa80 	bl	8000164 <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	f107 010c 	add.w	r1, r7, #12
 8000c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000c72:	f001 fd6c 	bl	800274e <HAL_UART_Transmit>
				 			cliBufferTX[i]='\0';
 8000c76:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000c7a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000c7e:	4413      	add	r3, r2
 8000c80:	2200      	movs	r2, #0
 8000c82:	f803 2cd4 	strb.w	r2, [r3, #-212]
				 			cliBufferRX[0]='\r';
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000c88:	220d      	movs	r2, #13
 8000c8a:	701a      	strb	r2, [r3, #0]
				 			cliBufferRX[1]='\n';
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000c8e:	220a      	movs	r2, #10
 8000c90:	705a      	strb	r2, [r3, #1]
				 			HAL_UART_Transmit(&huart2,cliBufferRX,2,1000);
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	2202      	movs	r2, #2
 8000c98:	4902      	ldr	r1, [pc, #8]	; (8000ca4 <RX_CLI_Task+0x2e4>)
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <RX_CLI_Task+0x2e8>)
 8000c9c:	f001 fd57 	bl	800274e <HAL_UART_Transmit>
					  {//execute ATM x command
 8000ca0:	e053      	b.n	8000d4a <RX_CLI_Task+0x38a>
 8000ca2:	e052      	b.n	8000d4a <RX_CLI_Task+0x38a>
 8000ca4:	20001c1c 	.word	0x20001c1c
 8000ca8:	20001ce8 	.word	0x20001ce8
 8000cac:	08005c28 	.word	0x08005c28
 8000cb0:	08005bc8 	.word	0x08005bc8
 8000cb4:	08005bc0 	.word	0x08005bc0
 8000cb8:	08005c30 	.word	0x08005c30
 8000cbc:	08005bd8 	.word	0x08005bd8
 8000cc0:	08005c48 	.word	0x08005c48
 8000cc4:	08005c4c 	.word	0x08005c4c
 8000cc8:	20001b08 	.word	0x20001b08
 8000ccc:	08005c50 	.word	0x08005c50
 8000cd0:	08005c54 	.word	0x08005c54
 8000cd4:	08005c58 	.word	0x08005c58
							}
					  }

					else
											{
											invalid_command;//execute invalid command
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	; (8000e14 <RX_CLI_Task+0x454>)
 8000cda:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <RX_CLI_Task+0x458>)
 8000cdc:	4615      	mov	r5, r2
 8000cde:	461c      	mov	r4, r3
 8000ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce2:	6028      	str	r0, [r5, #0]
 8000ce4:	6069      	str	r1, [r5, #4]
 8000ce6:	60aa      	str	r2, [r5, #8]
 8000ce8:	60eb      	str	r3, [r5, #12]
 8000cea:	8823      	ldrh	r3, [r4, #0]
 8000cec:	822b      	strh	r3, [r5, #16]
											HAL_UART_Transmit(&huart2, cliBufferRX, strlen((char*)cliBufferRX),1000);//transfer invalid message
 8000cee:	4849      	ldr	r0, [pc, #292]	; (8000e14 <RX_CLI_Task+0x454>)
 8000cf0:	f7ff fa38 	bl	8000164 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	4945      	ldr	r1, [pc, #276]	; (8000e14 <RX_CLI_Task+0x454>)
 8000cfe:	4847      	ldr	r0, [pc, #284]	; (8000e1c <RX_CLI_Task+0x45c>)
 8000d00:	f001 fd25 	bl	800274e <HAL_UART_Transmit>
											transmit;
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa2b 	bl	8000164 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f107 010c 	add.w	r1, r7, #12
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	4840      	ldr	r0, [pc, #256]	; (8000e1c <RX_CLI_Task+0x45c>)
 8000d1c:	f001 fd17 	bl	800274e <HAL_UART_Transmit>
								 			cliBufferTX[i]='\0';
 8000d20:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000d24:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000d28:	4413      	add	r3, r2
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f803 2cd4 	strb.w	r2, [r3, #-212]
								 			cliBufferRX[0]='\r';
 8000d30:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <RX_CLI_Task+0x454>)
 8000d32:	220d      	movs	r2, #13
 8000d34:	701a      	strb	r2, [r3, #0]
								 			cliBufferRX[1]='\n';
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <RX_CLI_Task+0x454>)
 8000d38:	220a      	movs	r2, #10
 8000d3a:	705a      	strb	r2, [r3, #1]
								 			HAL_UART_Transmit(&huart2,cliBufferRX,2,1000);
 8000d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d40:	2202      	movs	r2, #2
 8000d42:	4934      	ldr	r1, [pc, #208]	; (8000e14 <RX_CLI_Task+0x454>)
 8000d44:	4835      	ldr	r0, [pc, #212]	; (8000e1c <RX_CLI_Task+0x45c>)
 8000d46:	f001 fd02 	bl	800274e <HAL_UART_Transmit>
											}
		 		    i=0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8000d50:	e05c      	b.n	8000e0c <RX_CLI_Task+0x44c>
		 		  }
		  else if( cliBufferTX[i]=='\177') // if back
 8000d52:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000d56:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f813 3cd4 	ldrb.w	r3, [r3, #-212]
 8000d60:	2b7f      	cmp	r3, #127	; 0x7f
 8000d62:	d11d      	bne.n	8000da0 <RX_CLI_Task+0x3e0>
		  			{
		  			  p=&cliBufferTX[i];
 8000d64:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		  			  HAL_UART_Transmit(&huart2,p,1,1000);
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	2201      	movs	r2, #1
 8000d78:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000d7c:	4827      	ldr	r0, [pc, #156]	; (8000e1c <RX_CLI_Task+0x45c>)
 8000d7e:	f001 fce6 	bl	800274e <HAL_UART_Transmit>
		  			  i--;
 8000d82:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		  			  if(i<0) i=0;
 8000d90:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da39      	bge.n	8000e0c <RX_CLI_Task+0x44c>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8000d9e:	e035      	b.n	8000e0c <RX_CLI_Task+0x44c>
		  			}
		  else if( cliBufferTX[i]==' ')
 8000da0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000da4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000da8:	4413      	add	r3, r2
 8000daa:	f813 3cd4 	ldrb.w	r3, [r3, #-212]
 8000dae:	2b20      	cmp	r3, #32
 8000db0:	d116      	bne.n	8000de0 <RX_CLI_Task+0x420>
		  		    {
		  			   p=&cliBufferTX[i];
 8000db2:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000db6:	f107 020c 	add.w	r2, r7, #12
 8000dba:	4413      	add	r3, r2
 8000dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		  			   HAL_UART_Transmit(&huart2,p,1,1000);
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <RX_CLI_Task+0x45c>)
 8000dcc:	f001 fcbf 	bl	800274e <HAL_UART_Transmit>
		  			   i++;
 8000dd0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8000dde:	e015      	b.n	8000e0c <RX_CLI_Task+0x44c>
		  		    }
		  else
		 			{
			  	  	   p=&cliBufferTX[i];
 8000de0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	4413      	add	r3, r2
 8000dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		 			   HAL_UART_Transmit(&huart2,p,1,1000);
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	2201      	movs	r2, #1
 8000df4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <RX_CLI_Task+0x45c>)
 8000dfa:	f001 fca8 	bl	800274e <HAL_UART_Transmit>
		 			   i++;
 8000dfe:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		 			}
	  }
    osDelay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f001 ffb7 	bl	8002d80 <osDelay>
	  if((HAL_UART_Receive(&huart2,cliBufferRX, 1,300) == HAL_OK))
 8000e12:	e5df      	b.n	80009d4 <RX_CLI_Task+0x14>
 8000e14:	20001c1c 	.word	0x20001c1c
 8000e18:	08005c58 	.word	0x08005c58
 8000e1c:	20001ce8 	.word	0x20001ce8

08000e20 <stateControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stateControllerTask */
void stateControllerTask(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	  uint16_t cliMessage;
		  uint16_t statusMessage = 102;
 8000e28:	2366      	movs	r3, #102	; 0x66
 8000e2a:	81bb      	strh	r3, [r7, #12]
		  osStatus_t status;
		  int sequence_fsm = 0;//the time sequence the fsm mode at
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
		  int sequence_scm = 0;//the time sequence the scm mode at
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
		  uint16_t x = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	817b      	strh	r3, [r7, #10]


		  /* Infinite loop */
	  for(;;)
	  {
		  status = osMessageQueueGet(CLI_QueueHandle, &cliMessage, 1U, 0U);
 8000e38:	4b97      	ldr	r3, [pc, #604]	; (8001098 <stateControllerTask+0x278>)
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	f107 010e 	add.w	r1, r7, #14
 8000e40:	2300      	movs	r3, #0
 8000e42:	2201      	movs	r2, #1
 8000e44:	f002 f8c4 	bl	8002fd0 <osMessageQueueGet>
 8000e48:	6138      	str	r0, [r7, #16]
		  if (status == osOK)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d124      	bne.n	8000e9a <stateControllerTask+0x7a>
		  {
			  if(cliMessage == 101 || cliMessage == 102)
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	2b65      	cmp	r3, #101	; 0x65
 8000e54:	d002      	beq.n	8000e5c <stateControllerTask+0x3c>
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	2b66      	cmp	r3, #102	; 0x66
 8000e5a:	d10f      	bne.n	8000e7c <stateControllerTask+0x5c>
			  {
				  statusMessage = cliMessage;
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	81bb      	strh	r3, [r7, #12]
				  if (osMessageQueuePut(Status_QueueHandle, &statusMessage, 1U, 0U) != osOK)
 8000e60:	4b8e      	ldr	r3, [pc, #568]	; (800109c <stateControllerTask+0x27c>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	f107 010c 	add.w	r1, r7, #12
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f002 f83c 	bl	8002ee8 <osMessageQueuePut>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d011      	beq.n	8000e9a <stateControllerTask+0x7a>
				  		    {
				  		        Error_Handler();
 8000e76:	f000 f987 	bl	8001188 <Error_Handler>
				  if (osMessageQueuePut(Status_QueueHandle, &statusMessage, 1U, 0U) != osOK)
 8000e7a:	e00e      	b.n	8000e9a <stateControllerTask+0x7a>
				  		    }
			  }
			  else
			  {
				  x = cliMessage;
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	817b      	strh	r3, [r7, #10]
				  if (osMessageQueuePut(Status_QueueHandle, &x, 1U, 0U) != osOK)
 8000e80:	4b86      	ldr	r3, [pc, #536]	; (800109c <stateControllerTask+0x27c>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f107 010a 	add.w	r1, r7, #10
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f002 f82c 	bl	8002ee8 <osMessageQueuePut>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <stateControllerTask+0x7a>
				  				  		    {
				  				  		        Error_Handler();
 8000e96:	f000 f977 	bl	8001188 <Error_Handler>
				  				  		    }
			  }

		  }

		  	  if (statusMessage == 101)	// 0S - 70.5S
 8000e9a:	89bb      	ldrh	r3, [r7, #12]
 8000e9c:	2b65      	cmp	r3, #101	; 0x65
 8000e9e:	f040 8105 	bne.w	80010ac <stateControllerTask+0x28c>
		  	  {
		  		  if (sequence_scm == 0)
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d137      	bne.n	8000f18 <stateControllerTask+0xf8>
		  		  {
		  			P_RED_CLOSE;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	487c      	ldr	r0, [pc, #496]	; (80010a0 <stateControllerTask+0x280>)
 8000eae:	f000 fd39 	bl	8001924 <HAL_GPIO_WritePin>
		  			P_YELLOW_CLOSE;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	487a      	ldr	r0, [pc, #488]	; (80010a0 <stateControllerTask+0x280>)
 8000eb8:	f000 fd34 	bl	8001924 <HAL_GPIO_WritePin>
		  			P_GREEN_OPEN;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	4877      	ldr	r0, [pc, #476]	; (80010a0 <stateControllerTask+0x280>)
 8000ec4:	f000 fd2e 	bl	8001924 <HAL_GPIO_WritePin>
		  			P_BLUE_OPEN;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ece:	4874      	ldr	r0, [pc, #464]	; (80010a0 <stateControllerTask+0x280>)
 8000ed0:	f000 fd28 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_RED_OPEN;
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	4872      	ldr	r0, [pc, #456]	; (80010a4 <stateControllerTask+0x284>)
 8000edc:	f000 fd22 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_YELLOW_CLOSE;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	486f      	ldr	r0, [pc, #444]	; (80010a4 <stateControllerTask+0x284>)
 8000ee6:	f000 fd1d 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_GREEN_CLOSE;
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	486c      	ldr	r0, [pc, #432]	; (80010a4 <stateControllerTask+0x284>)
 8000ef2:	f000 fd17 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_BLUE_CLOSE;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2120      	movs	r1, #32
 8000efa:	486a      	ldr	r0, [pc, #424]	; (80010a4 <stateControllerTask+0x284>)
 8000efc:	f000 fd12 	bl	8001924 <HAL_GPIO_WritePin>
		  			osDelay(70500/x);
 8000f00:	897b      	ldrh	r3, [r7, #10]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <stateControllerTask+0x288>)
 8000f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 ff38 	bl	8002d80 <osDelay>
		  			sequence_scm++;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3301      	adds	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	e78f      	b.n	8000e38 <stateControllerTask+0x18>

		  		  }
		  		  else if (sequence_scm == 1) // 70.5S - 83.5S
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d11a      	bne.n	8000f54 <stateControllerTask+0x134>
		  		{
		  			for(int Primary_WW = 0; Primary_WW<13; Primary_WW++)//blue led flash in 1HZ for 13s
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e010      	b.n	8000f46 <stateControllerTask+0x126>
		  			{
		  				P_BLUE_TOG;
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	485d      	ldr	r0, [pc, #372]	; (80010a0 <stateControllerTask+0x280>)
 8000f2a:	f000 fd13 	bl	8001954 <HAL_GPIO_TogglePin>
						osDelay(1000/x);
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	461a      	mov	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 ff20 	bl	8002d80 <osDelay>
		  			for(int Primary_WW = 0; Primary_WW<13; Primary_WW++)//blue led flash in 1HZ for 13s
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	ddeb      	ble.n	8000f24 <stateControllerTask+0x104>
		  			}
		  			sequence_scm++;
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	e771      	b.n	8000e38 <stateControllerTask+0x18>
		  		}
		  		  else if (sequence_scm == 2) //83.5s - 87s
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d11d      	bne.n	8000f96 <stateControllerTask+0x176>
		  		{
		  			P_BLUE_CLOSE;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f60:	484f      	ldr	r0, [pc, #316]	; (80010a0 <stateControllerTask+0x280>)
 8000f62:	f000 fcdf 	bl	8001924 <HAL_GPIO_WritePin>
		  			P_YELLOW_OPEN;
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	484d      	ldr	r0, [pc, #308]	; (80010a0 <stateControllerTask+0x280>)
 8000f6c:	f000 fcda 	bl	8001924 <HAL_GPIO_WritePin>
		  			P_GREEN_CLOSE
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	484a      	ldr	r0, [pc, #296]	; (80010a0 <stateControllerTask+0x280>)
 8000f78:	f000 fcd4 	bl	8001924 <HAL_GPIO_WritePin>
		  			osDelay(3500/x);
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fef9 	bl	8002d80 <osDelay>
		  			sequence_scm++;
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	3301      	adds	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	e750      	b.n	8000e38 <stateControllerTask+0x18>
		  		}
		  		  else if (sequence_scm == 3) //87s - 93s
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d116      	bne.n	8000fca <stateControllerTask+0x1aa>
		  		{
		  			P_RED_OPEN;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2140      	movs	r1, #64	; 0x40
 8000fa0:	483f      	ldr	r0, [pc, #252]	; (80010a0 <stateControllerTask+0x280>)
 8000fa2:	f000 fcbf 	bl	8001924 <HAL_GPIO_WritePin>
		  			P_YELLOW_CLOSE;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	483d      	ldr	r0, [pc, #244]	; (80010a0 <stateControllerTask+0x280>)
 8000fac:	f000 fcba 	bl	8001924 <HAL_GPIO_WritePin>
		  			osDelay(6000/x);
 8000fb0:	897b      	ldrh	r3, [r7, #10]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f241 7370 	movw	r3, #6000	; 0x1770
 8000fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fedf 	bl	8002d80 <osDelay>
		  			sequence_scm++;
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	e736      	b.n	8000e38 <stateControllerTask+0x18>
		  		}
		  		  else if (sequence_scm == 4)//93s - 113s
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d11d      	bne.n	800100c <stateControllerTask+0x1ec>
		  		{
		  			S_RED_CLOSE;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <stateControllerTask+0x284>)
 8000fd8:	f000 fca4 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_GREEN_OPEN;
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	4830      	ldr	r0, [pc, #192]	; (80010a4 <stateControllerTask+0x284>)
 8000fe4:	f000 fc9e 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_BLUE_OPEN;
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2120      	movs	r1, #32
 8000fec:	482d      	ldr	r0, [pc, #180]	; (80010a4 <stateControllerTask+0x284>)
 8000fee:	f000 fc99 	bl	8001924 <HAL_GPIO_WritePin>
		  			osDelay(20000/x);
 8000ff2:	897b      	ldrh	r3, [r7, #10]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ffa:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 febe 	bl	8002d80 <osDelay>
		  			sequence_scm++;
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	3301      	adds	r3, #1
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	e715      	b.n	8000e38 <stateControllerTask+0x18>
		  		}
		  		  else if (sequence_scm == 5)//113s - 121s
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d119      	bne.n	8001046 <stateControllerTask+0x226>
		  		{
		  			for(int Secondary_WW = 0; Secondary_WW<8; Secondary_WW++)//blue led flash in 1HZ for 8s
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	e00f      	b.n	8001038 <stateControllerTask+0x218>
		  			{
		  			S_BLUE_TOG;
 8001018:	2120      	movs	r1, #32
 800101a:	4822      	ldr	r0, [pc, #136]	; (80010a4 <stateControllerTask+0x284>)
 800101c:	f000 fc9a 	bl	8001954 <HAL_GPIO_TogglePin>
		  			osDelay(1000/x);
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	461a      	mov	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	fb93 f3f2 	sdiv	r3, r3, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fea7 	bl	8002d80 <osDelay>
		  			for(int Secondary_WW = 0; Secondary_WW<8; Secondary_WW++)//blue led flash in 1HZ for 8s
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	3301      	adds	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b07      	cmp	r3, #7
 800103c:	ddec      	ble.n	8001018 <stateControllerTask+0x1f8>
		  			}
		  			sequence_scm++;
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	3301      	adds	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	e6f8      	b.n	8000e38 <stateControllerTask+0x18>
		  		}
		  		  else if (sequence_scm == 6)//121s-124.5s
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	2b06      	cmp	r3, #6
 800104a:	f47f aef5 	bne.w	8000e38 <stateControllerTask+0x18>
		  		{
		  			sequence_scm=0;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
		  			S_GREEN_CLOSE;
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <stateControllerTask+0x284>)
 800105a:	f000 fc63 	bl	8001924 <HAL_GPIO_WritePin>
		  			S_YELLOW_OPEN;
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <stateControllerTask+0x284>)
 8001064:	f000 fc5e 	bl	8001924 <HAL_GPIO_WritePin>
		  			for(int Secondary_WW = 0; Secondary_WW<3; Secondary_WW++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e00f      	b.n	800108e <stateControllerTask+0x26e>
		  			{
		  			S_BLUE_TOG;
 800106e:	2120      	movs	r1, #32
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <stateControllerTask+0x284>)
 8001072:	f000 fc6f 	bl	8001954 <HAL_GPIO_TogglePin>
		  			osDelay(1000/x);
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	461a      	mov	r2, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fe7c 	bl	8002d80 <osDelay>
		  			for(int Secondary_WW = 0; Secondary_WW<3; Secondary_WW++)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b02      	cmp	r3, #2
 8001092:	ddec      	ble.n	800106e <stateControllerTask+0x24e>
 8001094:	e6d0      	b.n	8000e38 <stateControllerTask+0x18>
 8001096:	bf00      	nop
 8001098:	20001b08 	.word	0x20001b08
 800109c:	20001b0c 	.word	0x20001b0c
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40011000 	.word	0x40011000
 80010a8:	00011364 	.word	0x00011364
		  			}

		  		}
		  	  }
		  	  else  if (statusMessage == 102)	//fsm mode
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	2b66      	cmp	r3, #102	; 0x66
 80010b0:	f47f aec2 	bne.w	8000e38 <stateControllerTask+0x18>
			  {
				  if (sequence_fsm == 0)//1.5s red led on
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d137      	bne.n	800112a <stateControllerTask+0x30a>
				  {
					  P_YELLOW_CLOSE;
 80010ba:	2201      	movs	r2, #1
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	4827      	ldr	r0, [pc, #156]	; (800115c <stateControllerTask+0x33c>)
 80010c0:	f000 fc30 	bl	8001924 <HAL_GPIO_WritePin>
					  P_GREEN_CLOSE;
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ca:	4824      	ldr	r0, [pc, #144]	; (800115c <stateControllerTask+0x33c>)
 80010cc:	f000 fc2a 	bl	8001924 <HAL_GPIO_WritePin>
					  P_BLUE_CLOSE;
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d6:	4821      	ldr	r0, [pc, #132]	; (800115c <stateControllerTask+0x33c>)
 80010d8:	f000 fc24 	bl	8001924 <HAL_GPIO_WritePin>
					  S_YELLOW_CLOSE;
 80010dc:	2201      	movs	r2, #1
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	481f      	ldr	r0, [pc, #124]	; (8001160 <stateControllerTask+0x340>)
 80010e2:	f000 fc1f 	bl	8001924 <HAL_GPIO_WritePin>
					  S_GREEN_CLOSE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <stateControllerTask+0x340>)
 80010ee:	f000 fc19 	bl	8001924 <HAL_GPIO_WritePin>
					  S_BLUE_CLOSE;
 80010f2:	2201      	movs	r2, #1
 80010f4:	2120      	movs	r1, #32
 80010f6:	481a      	ldr	r0, [pc, #104]	; (8001160 <stateControllerTask+0x340>)
 80010f8:	f000 fc14 	bl	8001924 <HAL_GPIO_WritePin>
					  P_RED_OPEN;
 80010fc:	2200      	movs	r2, #0
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <stateControllerTask+0x33c>)
 8001102:	f000 fc0f 	bl	8001924 <HAL_GPIO_WritePin>
					  S_RED_OPEN;
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <stateControllerTask+0x340>)
 800110e:	f000 fc09 	bl	8001924 <HAL_GPIO_WritePin>
					  osDelay(1500/x);
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	461a      	mov	r2, r3
 8001116:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800111a:	fb93 f3f2 	sdiv	r3, r3, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fe2e 	bl	8002d80 <osDelay>
					  sequence_fsm++;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
				  }
				  if(sequence_fsm == 1)//0.5s red led off.
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	2b01      	cmp	r3, #1
 800112e:	f47f ae83 	bne.w	8000e38 <stateControllerTask+0x18>
				  {
					  P_RED_TOG;
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <stateControllerTask+0x33c>)
 8001136:	f000 fc0d 	bl	8001954 <HAL_GPIO_TogglePin>
					  S_RED_TOG;
 800113a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <stateControllerTask+0x340>)
 8001140:	f000 fc08 	bl	8001954 <HAL_GPIO_TogglePin>
					  osDelay(500/x);
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	461a      	mov	r2, r3
 8001148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fe15 	bl	8002d80 <osDelay>
					  sequence_fsm = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
		  status = osMessageQueueGet(CLI_QueueHandle, &cliMessage, 1U, 0U);
 800115a:	e66d      	b.n	8000e38 <stateControllerTask+0x18>
 800115c:	40010800 	.word	0x40010800
 8001160:	40011000 	.word	0x40011000

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f000 f97f 	bl	8001478 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40000800 	.word	0x40000800

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_MspInit+0x5c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_MspInit+0x5c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_MspInit+0x5c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_MspInit+0x5c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_MspInit+0x60>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_MspInit+0x60>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_UART_MspInit+0xf8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d130      	bne.n	800127a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4a35      	ldr	r2, [pc, #212]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001222:	61d3      	str	r3, [r2, #28]
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001248:	2304      	movs	r3, #4
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4619      	mov	r1, r3
 800125a:	4827      	ldr	r0, [pc, #156]	; (80012f8 <HAL_UART_MspInit+0x100>)
 800125c:	f000 fa08 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001260:	2308      	movs	r3, #8
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	4619      	mov	r1, r3
 8001272:	4821      	ldr	r0, [pc, #132]	; (80012f8 <HAL_UART_MspInit+0x100>)
 8001274:	f000 f9fc 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001278:	e036      	b.n	80012e8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_UART_MspInit+0x104>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d131      	bne.n	80012e8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 800128a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128e:	61d3      	str	r3, [r2, #28]
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_UART_MspInit+0xfc>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	4619      	mov	r1, r3
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <HAL_UART_MspInit+0x108>)
 80012ca:	f000 f9d1 	bl	8001670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <HAL_UART_MspInit+0x108>)
 80012e4:	f000 f9c4 	bl	8001670 <HAL_GPIO_Init>
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40004800 	.word	0x40004800
 8001300:	40010c00 	.word	0x40010c00

08001304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	201e      	movs	r0, #30
 800131a:	f000 f97e 	bl	800161a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800131e:	201e      	movs	r0, #30
 8001320:	f000 f997 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_InitTick+0x9c>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_InitTick+0x9c>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	61d3      	str	r3, [r2, #28]
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_InitTick+0x9c>)
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133c:	f107 0210 	add.w	r2, r7, #16
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f000 ff1c 	bl	8002184 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800134c:	f000 fef2 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8001350:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_InitTick+0xa0>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	3b01      	subs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_InitTick+0xa4>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_InitTick+0xa8>)
 8001364:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_InitTick+0xa4>)
 8001368:	f240 32e7 	movw	r2, #999	; 0x3e7
 800136c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_InitTick+0xa4>)
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_InitTick+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_InitTick+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <HAL_InitTick+0xa4>)
 8001382:	f000 ff4d 	bl	8002220 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d104      	bne.n	8001396 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <HAL_InitTick+0xa4>)
 800138e:	f000 ff9f 	bl	80022d0 <HAL_TIM_Base_Start_IT>
 8001392:	4603      	mov	r3, r0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	20001d2c 	.word	0x20001d2c
 80013ac:	40000800 	.word	0x40000800

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <HardFault_Handler+0x4>

080013c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <BusFault_Handler+0x4>

080013ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <UsageFault_Handler+0x4>

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM4_IRQHandler+0x10>)
 80013e6:	f000 ffc5 	bl	8002374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20001d2c 	.word	0x20001d2c

080013f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001400:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001402:	e003      	b.n	800140c <LoopCopyDataInit>

08001404 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001406:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001408:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800140a:	3104      	adds	r1, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001410:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001412:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001414:	d3f6      	bcc.n	8001404 <CopyDataInit>
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001418:	e002      	b.n	8001420 <LoopFillZerobss>

0800141a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800141c:	f842 3b04 	str.w	r3, [r2], #4

08001420 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001422:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001424:	d3f9      	bcc.n	800141a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001426:	f7ff ffe5 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f004 fa5b 	bl	80058e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142e:	f7fe fea1 	bl	8000174 <main>
  bx lr
 8001432:	4770      	bx	lr
  ldr r3, =_sidata
 8001434:	08005e84 	.word	0x08005e84
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800143c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001440:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001444:	20001db8 	.word	0x20001db8

08001448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_2_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x28>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x28>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f8d1 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff4e 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fe94 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000

08001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x1c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x20>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_IncTick+0x20>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000008 	.word	0x20000008
 8001498:	20001d74 	.word	0x20001d74

0800149c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <HAL_GetTick+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20001d74 	.word	0x20001d74

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <__NVIC_EnableIRQ+0x34>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff4f 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff64 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ffb2 	bl	80015a0 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff81 	bl	800154c <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff57 	bl	8001514 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e127      	b.n	80018d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001684:	2201      	movs	r2, #1
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8116 	bne.w	80018ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d034      	beq.n	8001714 <HAL_GPIO_Init+0xa4>
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d80d      	bhi.n	80016ca <HAL_GPIO_Init+0x5a>
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d02b      	beq.n	800170a <HAL_GPIO_Init+0x9a>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d804      	bhi.n	80016c0 <HAL_GPIO_Init+0x50>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d031      	beq.n	800171e <HAL_GPIO_Init+0xae>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d01c      	beq.n	80016f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016be:	e048      	b.n	8001752 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d043      	beq.n	800174c <HAL_GPIO_Init+0xdc>
 80016c4:	2b11      	cmp	r3, #17
 80016c6:	d01b      	beq.n	8001700 <HAL_GPIO_Init+0x90>
          break;
 80016c8:	e043      	b.n	8001752 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016ca:	4a89      	ldr	r2, [pc, #548]	; (80018f0 <HAL_GPIO_Init+0x280>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d026      	beq.n	800171e <HAL_GPIO_Init+0xae>
 80016d0:	4a87      	ldr	r2, [pc, #540]	; (80018f0 <HAL_GPIO_Init+0x280>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d806      	bhi.n	80016e4 <HAL_GPIO_Init+0x74>
 80016d6:	4a87      	ldr	r2, [pc, #540]	; (80018f4 <HAL_GPIO_Init+0x284>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d020      	beq.n	800171e <HAL_GPIO_Init+0xae>
 80016dc:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <HAL_GPIO_Init+0x288>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01d      	beq.n	800171e <HAL_GPIO_Init+0xae>
          break;
 80016e2:	e036      	b.n	8001752 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016e4:	4a85      	ldr	r2, [pc, #532]	; (80018fc <HAL_GPIO_Init+0x28c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0xae>
 80016ea:	4a85      	ldr	r2, [pc, #532]	; (8001900 <HAL_GPIO_Init+0x290>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d016      	beq.n	800171e <HAL_GPIO_Init+0xae>
 80016f0:	4a84      	ldr	r2, [pc, #528]	; (8001904 <HAL_GPIO_Init+0x294>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0xae>
          break;
 80016f6:	e02c      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e028      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	3304      	adds	r3, #4
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e023      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	3308      	adds	r3, #8
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e01e      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	330c      	adds	r3, #12
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e019      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001726:	2304      	movs	r3, #4
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e012      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001734:	2308      	movs	r3, #8
 8001736:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	611a      	str	r2, [r3, #16]
          break;
 800173e:	e008      	b.n	8001752 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	615a      	str	r2, [r3, #20]
          break;
 800174a:	e002      	b.n	8001752 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d801      	bhi.n	800175c <HAL_GPIO_Init+0xec>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	e001      	b.n	8001760 <HAL_GPIO_Init+0xf0>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2bff      	cmp	r3, #255	; 0xff
 8001766:	d802      	bhi.n	800176e <HAL_GPIO_Init+0xfe>
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x104>
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	3b08      	subs	r3, #8
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	210f      	movs	r1, #15
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	6a39      	ldr	r1, [r7, #32]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	431a      	orrs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8096 	beq.w	80018ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_GPIO_Init+0x298>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_GPIO_Init+0x298>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x298>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ba:	4a54      	ldr	r2, [pc, #336]	; (800190c <HAL_GPIO_Init+0x29c>)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_GPIO_Init+0x2a0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x19e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4a      	ldr	r2, [pc, #296]	; (8001914 <HAL_GPIO_Init+0x2a4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x19a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a49      	ldr	r2, [pc, #292]	; (8001918 <HAL_GPIO_Init+0x2a8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x196>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a48      	ldr	r2, [pc, #288]	; (800191c <HAL_GPIO_Init+0x2ac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x192>
 80017fe:	2303      	movs	r3, #3
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x1a0>
 8001802:	2304      	movs	r3, #4
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x1a0>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x1a0>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x1a0>
 800180e:	2300      	movs	r3, #0
 8001810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4313      	orrs	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001820:	493a      	ldr	r1, [pc, #232]	; (800190c <HAL_GPIO_Init+0x29c>)
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4938      	ldr	r1, [pc, #224]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	43db      	mvns	r3, r3
 8001850:	4933      	ldr	r1, [pc, #204]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001852:	4013      	ands	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	492e      	ldr	r1, [pc, #184]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	43db      	mvns	r3, r3
 8001878:	4929      	ldr	r1, [pc, #164]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 800187a:	4013      	ands	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	4924      	ldr	r1, [pc, #144]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	43db      	mvns	r3, r3
 80018a0:	491f      	ldr	r1, [pc, #124]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	491a      	ldr	r1, [pc, #104]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4915      	ldr	r1, [pc, #84]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	3301      	adds	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f47f aed0 	bne.w	8001684 <HAL_GPIO_Init+0x14>
  }
}
 80018e4:	bf00      	nop
 80018e6:	372c      	adds	r7, #44	; 0x2c
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	10210000 	.word	0x10210000
 80018f4:	10110000 	.word	0x10110000
 80018f8:	10120000 	.word	0x10120000
 80018fc:	10310000 	.word	0x10310000
 8001900:	10320000 	.word	0x10320000
 8001904:	10220000 	.word	0x10220000
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40011000 	.word	0x40011000
 800191c:	40011400 	.word	0x40011400
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43d9      	mvns	r1, r3
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	400b      	ands	r3, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
	...

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e246      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fd1a 	bl	800149c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fd16 	bl	800149c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fa      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fd06 	bl	800149c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fd02 	bl	800149c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1e6      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fcbb 	bl	800149c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fcb7 	bl	800149c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e19b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc9a 	bl	800149c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc96 	bl	800149c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e17a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fc7a 	bl	800149c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc76 	bl	800149c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e15a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fb0a 	bl	80021e4 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fc60 	bl	800149c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc5c 	bl	800149c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e140      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fc1d 	bl	800149c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff fc19 	bl	800149c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0fd      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fbcd 	bl	800149c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fbc9 	bl	800149c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0ab      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fbb7 	bl	800149c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fbb3 	bl	800149c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e095      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fb87 	bl	800149c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff fb83 	bl	800149c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e067      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fb57 	bl	800149c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff fb53 	bl	800149c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fb40 	bl	800149c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff fb3c 	bl	800149c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7ff fa90 	bl	800149c <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7ff fa8c 	bl	800149c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4601      	mov	r1, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	fa21 f303 	lsr.w	r3, r1, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f964 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08005d34 	.word	0x08005d34
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b490      	push	{r4, r7}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002064:	1d3c      	adds	r4, r7, #4
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x46>
 800209a:	e02d      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 800209e:	623b      	str	r3, [r7, #32]
      break;
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ce:	4413      	add	r3, r2
 80020d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e004      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc90      	pop	{r4, r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	08005c6c 	.word	0x08005c6c
 8002110:	08005c7c 	.word	0x08005c7c
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	003d0900 	.word	0x003d0900

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_RCC_GetHCLKFreq+0x10>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002138:	f7ff fff2 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	08005d44 	.word	0x08005d44

0800215c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002160:	f7ff ffde 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0adb      	lsrs	r3, r3, #11
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08005d44 	.word	0x08005d44

08002184 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	220f      	movs	r2, #15
 8002192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e041      	b.n	80022b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f839 	bl	80022be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 f9b4 	bl	80025cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d001      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e03a      	b.n	800235e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <HAL_TIM_Base_Start_IT+0x98>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00e      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x58>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d009      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x58>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_TIM_Base_Start_IT+0x9c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x58>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <HAL_TIM_Base_Start_IT+0xa0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d010      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	e007      	b.n	800235c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400
 8002370:	40000800 	.word	0x40000800

08002374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b02      	cmp	r3, #2
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0202 	mvn.w	r2, #2
 80023a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8ed 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8e0 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f8ef 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0204 	mvn.w	r2, #4
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8c3 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8b6 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f8c5 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b08      	cmp	r3, #8
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b08      	cmp	r3, #8
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0208 	mvn.w	r2, #8
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f899 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f88c 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f89b 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b10      	cmp	r3, #16
 8002484:	d122      	bne.n	80024cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b10      	cmp	r3, #16
 8002492:	d11b      	bne.n	80024cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0210 	mvn.w	r2, #16
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2208      	movs	r2, #8
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f86f 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f862 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f871 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0201 	mvn.w	r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fe36 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8bf 	bl	80026a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f835 	bl	80025ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b20      	cmp	r3, #32
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b20      	cmp	r3, #32
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0220 	mvn.w	r2, #32
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f88a 	bl	8002690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <TIM_Base_SetConfig+0xb8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x30>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x30>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a26      	ldr	r2, [pc, #152]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x30>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <TIM_Base_SetConfig+0xc0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <TIM_Base_SetConfig+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00b      	beq.n	800262e <TIM_Base_SetConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d007      	beq.n	800262e <TIM_Base_SetConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <TIM_Base_SetConfig+0xc0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <TIM_Base_SetConfig+0xb8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	615a      	str	r2, [r3, #20]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800

08002690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e03f      	b.n	8002746 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fd8c 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f9a3 	bl	8002a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800270c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800271c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800272c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b08a      	sub	sp, #40	; 0x28
 8002752:	af02      	add	r7, sp, #8
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	d17c      	bne.n	8002868 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_UART_Transmit+0x2c>
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e075      	b.n	800286a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_UART_Transmit+0x3e>
 8002788:	2302      	movs	r3, #2
 800278a:	e06e      	b.n	800286a <HAL_UART_Transmit+0x11c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2221      	movs	r2, #33	; 0x21
 800279e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027a2:	f7fe fe7b 	bl	800149c <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0x82>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80027e0:	e02a      	b.n	8002838 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f8df 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e036      	b.n	800286a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	3302      	adds	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e007      	b.n	800282a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1cf      	bne.n	80027e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f8af 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e006      	b.n	800286a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b08a      	sub	sp, #40	; 0x28
 8002876:	af02      	add	r7, sp, #8
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b20      	cmp	r3, #32
 8002890:	f040 8089 	bne.w	80029a6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_UART_Receive+0x2e>
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e081      	b.n	80029a8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Receive+0x40>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e07a      	b.n	80029a8 <HAL_UART_Receive+0x136>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2222      	movs	r2, #34	; 0x22
 80028c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fde8 	bl	800149c <HAL_GetTick>
 80028cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e2:	d108      	bne.n	80028f6 <HAL_UART_Receive+0x84>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e003      	b.n	80028fe <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002906:	e043      	b.n	8002990 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2200      	movs	r2, #0
 8002910:	2120      	movs	r1, #32
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f84c 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e042      	b.n	80029a8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002934:	b29a      	uxth	r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3302      	adds	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e01f      	b.n	8002982 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294a:	d007      	beq.n	800295c <HAL_UART_Receive+0xea>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_UART_Receive+0xf8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e008      	b.n	800297c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002976:	b2da      	uxtb	r2, r3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1b6      	bne.n	8002908 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	e02c      	b.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d028      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029d0:	f7fe fd64 	bl	800149c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d21d      	bcs.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e00f      	b.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d0c3      	beq.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a7e:	f023 030c 	bic.w	r3, r3, #12
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <UART_SetConfig+0x114>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aac:	f7ff fb56 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	e002      	b.n	8002aba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f7ff fb3e 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <UART_SetConfig+0x118>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	0119      	lsls	r1, r3, #4
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <UART_SetConfig+0x118>)
 8002af2:	fba3 0302 	umull	r0, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	; 0x32
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <UART_SetConfig+0x118>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b10:	4419      	add	r1, r3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009a      	lsls	r2, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <UART_SetConfig+0x118>)
 8002b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	fb00 f303 	mul.w	r3, r0, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	3332      	adds	r3, #50	; 0x32
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <UART_SetConfig+0x118>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	51eb851f 	.word	0x51eb851f

08002b60 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b66:	f3ef 8305 	mrs	r3, IPSR
 8002b6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b72:	f3ef 8310 	mrs	r3, PRIMASK
 8002b76:	607b      	str	r3, [r7, #4]
  return(result);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <osKernelInitialize+0x32>
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <osKernelInitialize+0x60>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d109      	bne.n	8002b9a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b86:	f3ef 8311 	mrs	r3, BASEPRI
 8002b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002b92:	f06f 0305 	mvn.w	r3, #5
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e00c      	b.n	8002bb4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <osKernelInitialize+0x60>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <osKernelInitialize+0x60>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e002      	b.n	8002bb4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	200001fc 	.word	0x200001fc

08002bc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bca:	f3ef 8305 	mrs	r3, IPSR
 8002bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bda:	607b      	str	r3, [r7, #4]
  return(result);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <osKernelStart+0x32>
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <osKernelStart+0x64>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d109      	bne.n	8002bfe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bea:	f3ef 8311 	mrs	r3, BASEPRI
 8002bee:	603b      	str	r3, [r7, #0]
  return(result);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <osKernelStart+0x3a>
    stat = osErrorISR;
 8002bf6:	f06f 0305 	mvn.w	r3, #5
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e00e      	b.n	8002c1c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <osKernelStart+0x64>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <osKernelStart+0x64>)
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002c0c:	f001 fa8a 	bl	8004124 <vTaskStartScheduler>
      stat = osOK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e002      	b.n	8002c1c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200001fc 	.word	0x200001fc

08002c2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b092      	sub	sp, #72	; 0x48
 8002c30:	af04      	add	r7, sp, #16
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c3c:	f3ef 8305 	mrs	r3, IPSR
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 8094 	bne.w	8002d72 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4e:	623b      	str	r3, [r7, #32]
  return(result);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 808d 	bne.w	8002d72 <osThreadNew+0x146>
 8002c58:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <osThreadNew+0x150>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d106      	bne.n	8002c6e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c60:	f3ef 8311 	mrs	r3, BASEPRI
 8002c64:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 8082 	bne.w	8002d72 <osThreadNew+0x146>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d07e      	beq.n	8002d72 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002c78:	2318      	movs	r3, #24
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002c80:	f107 031b 	add.w	r3, r7, #27
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d045      	beq.n	8002d1e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <osThreadNew+0x74>
        name = attr->name;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <osThreadNew+0x9a>
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	2b38      	cmp	r3, #56	; 0x38
 8002cb8:	d805      	bhi.n	8002cc6 <osThreadNew+0x9a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <osThreadNew+0x9e>
        return (NULL);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e054      	b.n	8002d74 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00e      	beq.n	8002d00 <osThreadNew+0xd4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b5b      	cmp	r3, #91	; 0x5b
 8002ce8:	d90a      	bls.n	8002d00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <osThreadNew+0xd4>
        mem = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfe:	e010      	b.n	8002d22 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10c      	bne.n	8002d22 <osThreadNew+0xf6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d108      	bne.n	8002d22 <osThreadNew+0xf6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <osThreadNew+0xf6>
          mem = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1c:	e001      	b.n	8002d22 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d110      	bne.n	8002d4a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d30:	9202      	str	r2, [sp, #8]
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f001 f828 	bl	8003d94 <xTaskCreateStatic>
 8002d44:	4603      	mov	r3, r0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e013      	b.n	8002d72 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d110      	bne.n	8002d72 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f001 f86f 	bl	8003e46 <xTaskCreate>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <osThreadNew+0x146>
          hTask = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d72:	697b      	ldr	r3, [r7, #20]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3738      	adds	r7, #56	; 0x38
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200001fc 	.word	0x200001fc

08002d80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d88:	f3ef 8305 	mrs	r3, IPSR
 8002d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d94:	f3ef 8310 	mrs	r3, PRIMASK
 8002d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <osDelay+0x34>
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <osDelay+0x58>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d109      	bne.n	8002dbc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002da8:	f3ef 8311 	mrs	r3, BASEPRI
 8002dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <osDelay+0x3c>
    stat = osErrorISR;
 8002db4:	f06f 0305 	mvn.w	r3, #5
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e007      	b.n	8002dcc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <osDelay+0x4c>
      vTaskDelay(ticks);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f001 f978 	bl	80040bc <vTaskDelay>
    }
  }

  return (stat);
 8002dcc:	697b      	ldr	r3, [r7, #20]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200001fc 	.word	0x200001fc

08002ddc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	; 0x30
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dec:	f3ef 8305 	mrs	r3, IPSR
 8002df0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002df2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d170      	bne.n	8002eda <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d16a      	bne.n	8002eda <osMessageQueueNew+0xfe>
 8002e04:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <osMessageQueueNew+0x108>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d105      	bne.n	8002e18 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e10:	613b      	str	r3, [r7, #16]
  return(result);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d160      	bne.n	8002eda <osMessageQueueNew+0xfe>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d05d      	beq.n	8002eda <osMessageQueueNew+0xfe>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d05a      	beq.n	8002eda <osMessageQueueNew+0xfe>
    mem = -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d029      	beq.n	8002e84 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d012      	beq.n	8002e5e <osMessageQueueNew+0x82>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b4f      	cmp	r3, #79	; 0x4f
 8002e3e:	d90e      	bls.n	8002e5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d302      	bcc.n	8002e5e <osMessageQueueNew+0x82>
        mem = 1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	e014      	b.n	8002e88 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d110      	bne.n	8002e88 <osMessageQueueNew+0xac>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d108      	bne.n	8002e88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <osMessageQueueNew+0xac>
          mem = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	e001      	b.n	8002e88 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10c      	bne.n	8002ea8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6899      	ldr	r1, [r3, #8]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa52 	bl	8003348 <xQueueGenericCreateStatic>
 8002ea4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ea6:	e008      	b.n	8002eba <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 faba 	bl	800342c <xQueueGenericCreate>
 8002eb8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <osMessageQueueNew+0xf2>
        name = attr->name;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e001      	b.n	8002ed2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002ed2:	69f9      	ldr	r1, [r7, #28]
 8002ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ed6:	f000 ff01 	bl	8003cdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200001fc 	.word	0x200001fc

08002ee8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f00:	f3ef 8305 	mrs	r3, IPSR
 8002f04:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f06:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f10:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <osMessageQueuePut+0x44>
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <osMessageQueuePut+0xe0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d12e      	bne.n	8002f7e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f20:	f3ef 8311 	mrs	r3, BASEPRI
 8002f24:	617b      	str	r3, [r7, #20]
  return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d028      	beq.n	8002f7e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <osMessageQueuePut+0x56>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <osMessageQueuePut+0x56>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002f3e:	f06f 0303 	mvn.w	r3, #3
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f44:	e039      	b.n	8002fba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002f4a:	f107 0210 	add.w	r2, r7, #16
 8002f4e:	2300      	movs	r3, #0
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6a38      	ldr	r0, [r7, #32]
 8002f54:	f000 fbc4 	bl	80036e0 <xQueueGenericSendFromISR>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d003      	beq.n	8002f66 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002f5e:	f06f 0302 	mvn.w	r3, #2
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f64:	e029      	b.n	8002fba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d026      	beq.n	8002fba <osMessageQueuePut+0xd2>
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <osMessageQueuePut+0xe4>)
 8002f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f7c:	e01d      	b.n	8002fba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <osMessageQueuePut+0xa2>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002f8a:	f06f 0303 	mvn.w	r3, #3
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	e014      	b.n	8002fbc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	6a38      	ldr	r0, [r7, #32]
 8002f9a:	f000 faa7 	bl	80034ec <xQueueGenericSend>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d00b      	beq.n	8002fbc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002faa:	f06f 0301 	mvn.w	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e004      	b.n	8002fbc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002fb2:	f06f 0302 	mvn.w	r3, #2
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	e000      	b.n	8002fbc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002fba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200001fc 	.word	0x200001fc
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe6:	f3ef 8305 	mrs	r3, IPSR
 8002fea:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <osMessageQueueGet+0x42>
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <osMessageQueueGet+0xdc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d12e      	bne.n	8003064 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003006:	f3ef 8311 	mrs	r3, BASEPRI
 800300a:	617b      	str	r3, [r7, #20]
  return(result);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d028      	beq.n	8003064 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <osMessageQueueGet+0x54>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <osMessageQueueGet+0x54>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003024:	f06f 0303 	mvn.w	r3, #3
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800302a:	e038      	b.n	800309e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	461a      	mov	r2, r3
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6a38      	ldr	r0, [r7, #32]
 800303a:	f000 fcc1 	bl	80039c0 <xQueueReceiveFromISR>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d003      	beq.n	800304c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003044:	f06f 0302 	mvn.w	r3, #2
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800304a:	e028      	b.n	800309e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d025      	beq.n	800309e <osMessageQueueGet+0xce>
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <osMessageQueueGet+0xe0>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003062:	e01c      	b.n	800309e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <osMessageQueueGet+0xa0>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003070:	f06f 0303 	mvn.w	r3, #3
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	e013      	b.n	80030a0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	6a38      	ldr	r0, [r7, #32]
 800307e:	f000 fbc3 	bl	8003808 <xQueueReceive>
 8003082:	4603      	mov	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d00b      	beq.n	80030a0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800308e:	f06f 0301 	mvn.w	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	e004      	b.n	80030a0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003096:	f06f 0302 	mvn.w	r3, #2
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e000      	b.n	80030a0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800309e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3728      	adds	r7, #40	; 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200001fc 	.word	0x200001fc
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a06      	ldr	r2, [pc, #24]	; (80030dc <vApplicationGetIdleTaskMemory+0x28>)
 80030c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80030ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000200 	.word	0x20000200
 80030e0:	2000025c 	.word	0x2000025c

080030e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a07      	ldr	r2, [pc, #28]	; (8003110 <vApplicationGetTimerTaskMemory+0x2c>)
 80030f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4a06      	ldr	r2, [pc, #24]	; (8003114 <vApplicationGetTimerTaskMemory+0x30>)
 80030fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000045c 	.word	0x2000045c
 8003114:	200004b8 	.word	0x200004b8

08003118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f103 0208 	add.w	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f103 0208 	add.w	r2, r3, #8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f103 0208 	add.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d103      	bne.n	80031d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e00c      	b.n	80031ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3308      	adds	r3, #8
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e002      	b.n	80031e2 <vListInsert+0x2e>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d2f6      	bcs.n	80031dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6892      	ldr	r2, [r2, #8]
 800323a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6852      	ldr	r2, [r2, #4]
 8003244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d103      	bne.n	8003258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
	...

08003278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	e7fe      	b.n	800329e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80032a0:	f002 f852 	bl	8005348 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	68f9      	ldr	r1, [r7, #12]
 80032ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	441a      	add	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	3b01      	subs	r3, #1
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	441a      	add	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d114      	bne.n	8003320 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01a      	beq.n	8003334 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3310      	adds	r3, #16
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f992 	bl	800462c <xTaskRemoveFromEventList>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <xQueueGenericReset+0xcc>)
 8003310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	e009      	b.n	8003334 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3310      	adds	r3, #16
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fef7 	bl	8003118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fef2 	bl	8003118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003334:	f002 f836 	bl	80053a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003338:	2301      	movs	r3, #1
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	e000ed04 	.word	0xe000ed04

08003348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	; 0x38
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <xQueueGenericCreateStatic+0x28>
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
 800336e:	e7fe      	b.n	800336e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <xQueueGenericCreateStatic+0x42>
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	e7fe      	b.n	8003388 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <xQueueGenericCreateStatic+0x4e>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <xQueueGenericCreateStatic+0x52>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <xQueueGenericCreateStatic+0x54>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <xQueueGenericCreateStatic+0x6c>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	e7fe      	b.n	80033b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <xQueueGenericCreateStatic+0x78>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <xQueueGenericCreateStatic+0x7c>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <xQueueGenericCreateStatic+0x7e>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <xQueueGenericCreateStatic+0x96>
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033de:	2350      	movs	r3, #80	; 0x50
 80033e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b50      	cmp	r3, #80	; 0x50
 80033e6:	d009      	beq.n	80033fc <xQueueGenericCreateStatic+0xb4>
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e7fe      	b.n	80033fa <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800340e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f842 	bl	80034a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003424:	4618      	mov	r0, r3
 8003426:	3730      	adds	r7, #48	; 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	4613      	mov	r3, r2
 8003438:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <xQueueGenericCreate+0x28>
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e7fe      	b.n	8003452 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e004      	b.n	800346a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3350      	adds	r3, #80	; 0x50
 800346e:	4618      	mov	r0, r3
 8003470:	f002 f860 	bl	8005534 <pvPortMalloc>
 8003474:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00f      	beq.n	800349c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	3350      	adds	r3, #80	; 0x50
 8003480:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f805 	bl	80034a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800349c:	69bb      	ldr	r3, [r7, #24]
	}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e002      	b.n	80034c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034d4:	2101      	movs	r1, #1
 80034d6:	69b8      	ldr	r0, [r7, #24]
 80034d8:	f7ff fece 	bl	8003278 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <xQueueGenericSend+0x30>
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	e7fe      	b.n	800351a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d103      	bne.n	800352a <xQueueGenericSend+0x3e>
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <xQueueGenericSend+0x42>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <xQueueGenericSend+0x44>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <xQueueGenericSend+0x5c>
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e7fe      	b.n	8003546 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x6a>
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <xQueueGenericSend+0x6e>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueGenericSend+0x70>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <xQueueGenericSend+0x88>
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	e7fe      	b.n	8003572 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003574:	f001 fa14 	bl	80049a0 <xTaskGetSchedulerState>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <xQueueGenericSend+0x98>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <xQueueGenericSend+0x9c>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <xQueueGenericSend+0x9e>
 8003588:	2300      	movs	r3, #0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <xQueueGenericSend+0xb6>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035a2:	f001 fed1 	bl	8005348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <xQueueGenericSend+0xcc>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d129      	bne.n	800360c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035be:	f000 fa7c 	bl	8003aba <prvCopyDataToQueue>
 80035c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	3324      	adds	r3, #36	; 0x24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f82b 	bl	800462c <xTaskRemoveFromEventList>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035dc:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <xQueueGenericSend+0x1f0>)
 80035de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	e00a      	b.n	8003604 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035f4:	4b39      	ldr	r3, [pc, #228]	; (80036dc <xQueueGenericSend+0x1f0>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003604:	f001 fece 	bl	80053a4 <vPortExitCritical>
				return pdPASS;
 8003608:	2301      	movs	r3, #1
 800360a:	e063      	b.n	80036d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003612:	f001 fec7 	bl	80053a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003616:	2300      	movs	r3, #0
 8003618:	e05c      	b.n	80036d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4618      	mov	r0, r3
 8003626:	f001 f863 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800362e:	f001 feb9 	bl	80053a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003632:	f000 fddb 	bl	80041ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003636:	f001 fe87 	bl	8005348 <vPortEnterCritical>
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003640:	b25b      	sxtb	r3, r3
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d103      	bne.n	8003650 <xQueueGenericSend+0x164>
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003656:	b25b      	sxtb	r3, r3
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d103      	bne.n	8003666 <xQueueGenericSend+0x17a>
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003666:	f001 fe9d 	bl	80053a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800366a:	1d3a      	adds	r2, r7, #4
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f852 	bl	800471c <xTaskCheckForTimeOut>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d124      	bne.n	80036c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800367e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003680:	f000 fb13 	bl	8003caa <prvIsQueueFull>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	3310      	adds	r3, #16
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f000 ff7c 	bl	8004590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369a:	f000 fa9e 	bl	8003bda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800369e:	f000 fdb3 	bl	8004208 <xTaskResumeAll>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f af7c 	bne.w	80035a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <xQueueGenericSend+0x1f0>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	e772      	b.n	80035a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036be:	f000 fa8c 	bl	8003bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036c2:	f000 fda1 	bl	8004208 <xTaskResumeAll>
 80036c6:	e76c      	b.n	80035a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ca:	f000 fa86 	bl	8003bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ce:	f000 fd9b 	bl	8004208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036d2:	2300      	movs	r3, #0
		}
	}
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3738      	adds	r7, #56	; 0x38
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	; 0x38
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <xQueueGenericSendFromISR+0x2c>
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	e7fe      	b.n	800370a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <xQueueGenericSendFromISR+0x3a>
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <xQueueGenericSendFromISR+0x3e>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <xQueueGenericSendFromISR+0x40>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <xQueueGenericSendFromISR+0x58>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	e7fe      	b.n	8003736 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d103      	bne.n	8003746 <xQueueGenericSendFromISR+0x66>
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <xQueueGenericSendFromISR+0x6a>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueGenericSendFromISR+0x6c>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <xQueueGenericSendFromISR+0x84>
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e7fe      	b.n	8003762 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003764:	f001 feaa 	bl	80054bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003768:	f3ef 8211 	mrs	r2, BASEPRI
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61ba      	str	r2, [r7, #24]
 800377e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003780:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <xQueueGenericSendFromISR+0xb6>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d12c      	bne.n	80037f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037a6:	f000 f988 	bl	8003aba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d112      	bne.n	80037da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 ff33 	bl	800462c <xTaskRemoveFromEventList>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e007      	b.n	80037ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037de:	3301      	adds	r3, #1
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	b25a      	sxtb	r2, r3
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037ea:	2301      	movs	r3, #1
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80037ee:	e001      	b.n	80037f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003800:	4618      	mov	r0, r3
 8003802:	3738      	adds	r7, #56	; 0x38
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <xQueueReceive+0x2e>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	e7fe      	b.n	8003834 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <xQueueReceive+0x3c>
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <xQueueReceive+0x40>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <xQueueReceive+0x42>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <xQueueReceive+0x5a>
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e7fe      	b.n	8003860 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003862:	f001 f89d 	bl	80049a0 <xTaskGetSchedulerState>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <xQueueReceive+0x6a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <xQueueReceive+0x6e>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <xQueueReceive+0x70>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <xQueueReceive+0x88>
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e7fe      	b.n	800388e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003890:	f001 fd5a 	bl	8005348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01f      	beq.n	80038e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a4:	f000 f973 	bl	8003b8e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	3310      	adds	r3, #16
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 feb5 	bl	800462c <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <xQueueReceive+0x1b4>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038d8:	f001 fd64 	bl	80053a4 <vPortExitCritical>
				return pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	e069      	b.n	80039b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038e6:	f001 fd5d 	bl	80053a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e062      	b.n	80039b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fef9 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003902:	f001 fd4f 	bl	80053a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003906:	f000 fc71 	bl	80041ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800390a:	f001 fd1d 	bl	8005348 <vPortEnterCritical>
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d103      	bne.n	8003924 <xQueueReceive+0x11c>
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392a:	b25b      	sxtb	r3, r3
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d103      	bne.n	800393a <xQueueReceive+0x132>
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393a:	f001 fd33 	bl	80053a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800393e:	1d3a      	adds	r2, r7, #4
 8003940:	f107 0310 	add.w	r3, r7, #16
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fee8 	bl	800471c <xTaskCheckForTimeOut>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d123      	bne.n	800399a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003954:	f000 f993 	bl	8003c7e <prvIsQueueEmpty>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d017      	beq.n	800398e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fe12 	bl	8004590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	f000 f934 	bl	8003bda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003972:	f000 fc49 	bl	8004208 <xTaskResumeAll>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d189      	bne.n	8003890 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <xQueueReceive+0x1b4>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	e780      	b.n	8003890 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800398e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003990:	f000 f923 	bl	8003bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003994:	f000 fc38 	bl	8004208 <xTaskResumeAll>
 8003998:	e77a      	b.n	8003890 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800399a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800399c:	f000 f91d 	bl	8003bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039a0:	f000 fc32 	bl	8004208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a6:	f000 f96a 	bl	8003c7e <prvIsQueueEmpty>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f43f af6f 	beq.w	8003890 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3730      	adds	r7, #48	; 0x30
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	; 0x38
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <xQueueReceiveFromISR+0x2a>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	e7fe      	b.n	80039e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <xQueueReceiveFromISR+0x38>
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <xQueueReceiveFromISR+0x3c>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <xQueueReceiveFromISR+0x3e>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <xQueueReceiveFromISR+0x56>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e7fe      	b.n	8003a14 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a16:	f001 fd51 	bl	80054bc <vPortValidateInterruptPriority>
	__asm volatile
 8003a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	61ba      	str	r2, [r7, #24]
 8003a30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003a32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02f      	beq.n	8003aa2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a50:	f000 f89d 	bl	8003b8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	1e5a      	subs	r2, r3, #1
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d112      	bne.n	8003a8c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	3310      	adds	r3, #16
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fdda 	bl	800462c <xTaskRemoveFromEventList>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a90:	3301      	adds	r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	b25a      	sxtb	r2, r3
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa0:	e001      	b.n	8003aa6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3738      	adds	r7, #56	; 0x38
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d14d      	bne.n	8003b7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ff79 	bl	80049dc <xTaskPriorityDisinherit>
 8003aea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e043      	b.n	8003b7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d119      	bne.n	8003b2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6898      	ldr	r0, [r3, #8]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	461a      	mov	r2, r3
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	f001 ff2b 	bl	8005960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d32b      	bcc.n	8003b7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	e026      	b.n	8003b7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68d8      	ldr	r0, [r3, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	461a      	mov	r2, r3
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	f001 ff11 	bl	8005960 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	425b      	negs	r3, r3
 8003b48:	441a      	add	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d207      	bcs.n	8003b6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	425b      	negs	r3, r3
 8003b64:	441a      	add	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d105      	bne.n	8003b7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b84:	697b      	ldr	r3, [r7, #20]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	441a      	add	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d303      	bcc.n	8003bc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68d9      	ldr	r1, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6838      	ldr	r0, [r7, #0]
 8003bce:	f001 fec7 	bl	8005960 <memcpy>
	}
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be2:	f001 fbb1 	bl	8005348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bee:	e011      	b.n	8003c14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d012      	beq.n	8003c1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fd15 	bl	800462c <xTaskRemoveFromEventList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c08:	f000 fde8 	bl	80047dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	dce9      	bgt.n	8003bf0 <prvUnlockQueue+0x16>
 8003c1c:	e000      	b.n	8003c20 <prvUnlockQueue+0x46>
					break;
 8003c1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	22ff      	movs	r2, #255	; 0xff
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c28:	f001 fbbc 	bl	80053a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2c:	f001 fb8c 	bl	8005348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c38:	e011      	b.n	8003c5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3310      	adds	r3, #16
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fcf0 	bl	800462c <xTaskRemoveFromEventList>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c52:	f000 fdc3 	bl	80047dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c56:	7bbb      	ldrb	r3, [r7, #14]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dce9      	bgt.n	8003c3a <prvUnlockQueue+0x60>
 8003c66:	e000      	b.n	8003c6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	22ff      	movs	r2, #255	; 0xff
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c72:	f001 fb97 	bl	80053a4 <vPortExitCritical>
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c86:	f001 fb5f 	bl	8005348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e001      	b.n	8003c9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9c:	f001 fb82 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb2:	f001 fb49 	bl	8005348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d102      	bne.n	8003cc8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e001      	b.n	8003ccc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ccc:	f001 fb6a 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e014      	b.n	8003d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <vQueueAddToRegistry+0x4c>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cf8:	490b      	ldr	r1, [pc, #44]	; (8003d28 <vQueueAddToRegistry+0x4c>)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <vQueueAddToRegistry+0x4c>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d0e:	e005      	b.n	8003d1c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d9e7      	bls.n	8003cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20001d78 	.word	0x20001d78

08003d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d3c:	f001 fb04 	bl	8005348 <vPortEnterCritical>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d103      	bne.n	8003d56 <vQueueWaitForMessageRestricted+0x2a>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d103      	bne.n	8003d6c <vQueueWaitForMessageRestricted+0x40>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d6c:	f001 fb1a 	bl	80053a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fc29 	bl	80045d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d86:	6978      	ldr	r0, [r7, #20]
 8003d88:	f7ff ff27 	bl	8003bda <prvUnlockQueue>
	}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	; 0x38
 8003d98:	af04      	add	r7, sp, #16
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <xTaskCreateStatic+0x28>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	e7fe      	b.n	8003dba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <xTaskCreateStatic+0x42>
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dd6:	235c      	movs	r3, #92	; 0x5c
 8003dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8003dde:	d009      	beq.n	8003df4 <xTaskCreateStatic+0x60>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e7fe      	b.n	8003df2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01e      	beq.n	8003e38 <xTaskCreateStatic+0xa4>
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01b      	beq.n	8003e38 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e12:	2300      	movs	r3, #0
 8003e14:	9303      	str	r3, [sp, #12]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	9302      	str	r3, [sp, #8]
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f850 	bl	8003ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e32:	f000 f8d3 	bl	8003fdc <prvAddNewTaskToReadyList>
 8003e36:	e001      	b.n	8003e3c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e3c:	697b      	ldr	r3, [r7, #20]
	}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08c      	sub	sp, #48	; 0x30
 8003e4a:	af04      	add	r7, sp, #16
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fb6a 	bl	8005534 <pvPortMalloc>
 8003e60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e68:	205c      	movs	r0, #92	; 0x5c
 8003e6a:	f001 fb63 	bl	8005534 <pvPortMalloc>
 8003e6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7c:	e005      	b.n	8003e8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f001 fc1a 	bl	80056b8 <vPortFree>
 8003e84:	e001      	b.n	8003e8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9303      	str	r3, [sp, #12]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	9302      	str	r3, [sp, #8]
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f80e 	bl	8003ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb4:	69f8      	ldr	r0, [r7, #28]
 8003eb6:	f000 f891 	bl	8003fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e002      	b.n	8003ec6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	21a5      	movs	r1, #165	; 0xa5
 8003eea:	f001 fd44 	bl	8005976 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <prvInitialiseNewTask+0x56>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e7fe      	b.n	8003f24 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e012      	b.n	8003f52 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	7819      	ldrb	r1, [r3, #0]
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3334      	adds	r3, #52	; 0x34
 8003f3c:	460a      	mov	r2, r1
 8003f3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d9e9      	bls.n	8003f2c <prvInitialiseNewTask+0x5c>
 8003f58:	e000      	b.n	8003f5c <prvInitialiseNewTask+0x8c>
		{
			break;
 8003f5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	2b37      	cmp	r3, #55	; 0x37
 8003f68:	d901      	bls.n	8003f6e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f6a:	2337      	movs	r3, #55	; 0x37
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	3304      	adds	r3, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f8e6 	bl	8003156 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	3318      	adds	r3, #24
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f8e1 	bl	8003156 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	69b8      	ldr	r0, [r7, #24]
 8003fbe:	f001 f8d7 	bl	8005170 <pxPortInitialiseStack>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fe4:	f001 f9b0 	bl	8005348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <prvAddNewTaskToReadyList+0xc4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <prvAddNewTaskToReadyList+0xc4>)
 8003ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ffa:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <prvAddNewTaskToReadyList+0xc4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d110      	bne.n	800402a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004008:	f000 fc0c 	bl	8004824 <prvInitialiseTaskLists>
 800400c:	e00d      	b.n	800402a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <prvAddNewTaskToReadyList+0xcc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	429a      	cmp	r2, r3
 8004022:	d802      	bhi.n	800402a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <prvAddNewTaskToReadyList+0xd0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <prvAddNewTaskToReadyList+0xd0>)
 8004032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <prvAddNewTaskToReadyList+0xd0>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <prvAddNewTaskToReadyList+0xd4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d903      	bls.n	8004050 <prvAddNewTaskToReadyList+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4a18      	ldr	r2, [pc, #96]	; (80040b0 <prvAddNewTaskToReadyList+0xd4>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <prvAddNewTaskToReadyList+0xd8>)
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f7ff f881 	bl	800316e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800406c:	f001 f99a 	bl	80053a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <prvAddNewTaskToReadyList+0xcc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	429a      	cmp	r2, r3
 8004084:	d207      	bcs.n	8004096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <prvAddNewTaskToReadyList+0xdc>)
 8004088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000d8c 	.word	0x20000d8c
 80040a4:	200008b8 	.word	0x200008b8
 80040a8:	20000d98 	.word	0x20000d98
 80040ac:	20000da8 	.word	0x20000da8
 80040b0:	20000d94 	.word	0x20000d94
 80040b4:	200008bc 	.word	0x200008bc
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <vTaskDelay+0x60>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <vTaskDelay+0x2e>
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	e7fe      	b.n	80040e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80040ea:	f000 f87f 	bl	80041ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fcdf 	bl	8004ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040f6:	f000 f887 	bl	8004208 <xTaskResumeAll>
 80040fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <vTaskDelay+0x64>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000db4 	.word	0x20000db4
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004132:	463a      	mov	r2, r7
 8004134:	1d39      	adds	r1, r7, #4
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe ffba 	bl	80030b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	9202      	str	r2, [sp, #8]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	460a      	mov	r2, r1
 8004152:	4920      	ldr	r1, [pc, #128]	; (80041d4 <vTaskStartScheduler+0xb0>)
 8004154:	4820      	ldr	r0, [pc, #128]	; (80041d8 <vTaskStartScheduler+0xb4>)
 8004156:	f7ff fe1d 	bl	8003d94 <xTaskCreateStatic>
 800415a:	4602      	mov	r2, r0
 800415c:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <vTaskStartScheduler+0xb8>)
 800415e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <vTaskStartScheduler+0xb8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e001      	b.n	8004172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d102      	bne.n	800417e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004178:	f000 fcf0 	bl	8004b5c <xTimerCreateTimerTask>
 800417c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d115      	bne.n	80041b0 <vTaskStartScheduler+0x8c>
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <vTaskStartScheduler+0xbc>)
 8004198:	f04f 32ff 	mov.w	r2, #4294967295
 800419c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <vTaskStartScheduler+0xc0>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <vTaskStartScheduler+0xc4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041aa:	f001 f85d 	bl	8005268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041ae:	e00d      	b.n	80041cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d109      	bne.n	80041cc <vTaskStartScheduler+0xa8>
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e7fe      	b.n	80041ca <vTaskStartScheduler+0xa6>
}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	08005c80 	.word	0x08005c80
 80041d8:	080047f5 	.word	0x080047f5
 80041dc:	20000db0 	.word	0x20000db0
 80041e0:	20000dac 	.word	0x20000dac
 80041e4:	20000d98 	.word	0x20000d98
 80041e8:	20000d90 	.word	0x20000d90

080041ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <vTaskSuspendAll+0x18>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a03      	ldr	r2, [pc, #12]	; (8004204 <vTaskSuspendAll+0x18>)
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000db4 	.word	0x20000db4

08004208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <xTaskResumeAll+0x114>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <xTaskResumeAll+0x2a>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	e7fe      	b.n	8004230 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004232:	f001 f889 	bl	8005348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <xTaskResumeAll+0x114>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a37      	ldr	r2, [pc, #220]	; (800431c <xTaskResumeAll+0x114>)
 800423e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <xTaskResumeAll+0x114>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d162      	bne.n	800430e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <xTaskResumeAll+0x118>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05e      	beq.n	800430e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004250:	e02f      	b.n	80042b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <xTaskResumeAll+0x11c>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3318      	adds	r3, #24
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe ffe0 	bl	8003224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe ffdb 	bl	8003224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <xTaskResumeAll+0x120>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d903      	bls.n	8004282 <xTaskResumeAll+0x7a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <xTaskResumeAll+0x120>)
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <xTaskResumeAll+0x124>)
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7fe ff68 	bl	800316e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <xTaskResumeAll+0x128>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <xTaskResumeAll+0x12c>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <xTaskResumeAll+0x11c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1cb      	bne.n	8004252 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042c0:	f000 fb4a 	bl	8004958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <xTaskResumeAll+0x130>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042d0:	f000 f844 	bl	800435c <xTaskIncrementTick>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <xTaskResumeAll+0x12c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f1      	bne.n	80042d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <xTaskResumeAll+0x130>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <xTaskResumeAll+0x12c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <xTaskResumeAll+0x134>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800430e:	f001 f849 	bl	80053a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004312:	68bb      	ldr	r3, [r7, #8]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000db4 	.word	0x20000db4
 8004320:	20000d8c 	.word	0x20000d8c
 8004324:	20000d4c 	.word	0x20000d4c
 8004328:	20000d94 	.word	0x20000d94
 800432c:	200008bc 	.word	0x200008bc
 8004330:	200008b8 	.word	0x200008b8
 8004334:	20000da0 	.word	0x20000da0
 8004338:	20000d9c 	.word	0x20000d9c
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004346:	4b04      	ldr	r3, [pc, #16]	; (8004358 <xTaskGetTickCount+0x18>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800434c:	687b      	ldr	r3, [r7, #4]
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	20000d90 	.word	0x20000d90

0800435c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004366:	4b51      	ldr	r3, [pc, #324]	; (80044ac <xTaskIncrementTick+0x150>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 808d 	bne.w	800448a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <xTaskIncrementTick+0x154>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004378:	4a4d      	ldr	r2, [pc, #308]	; (80044b0 <xTaskIncrementTick+0x154>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11f      	bne.n	80043c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <xTaskIncrementTick+0x158>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <xTaskIncrementTick+0x46>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	e7fe      	b.n	80043a0 <xTaskIncrementTick+0x44>
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <xTaskIncrementTick+0x15c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a41      	ldr	r2, [pc, #260]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4a41      	ldr	r2, [pc, #260]	; (80044b8 <xTaskIncrementTick+0x15c>)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <xTaskIncrementTick+0x160>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	4a3f      	ldr	r2, [pc, #252]	; (80044bc <xTaskIncrementTick+0x160>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	f000 faca 	bl	8004958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043c4:	4b3e      	ldr	r3, [pc, #248]	; (80044c0 <xTaskIncrementTick+0x164>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d34e      	bcc.n	800446c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ce:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <xTaskIncrementTick+0x80>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <xTaskIncrementTick+0x82>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <xTaskIncrementTick+0x164>)
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	601a      	str	r2, [r3, #0]
					break;
 80043ea:	e03f      	b.n	800446c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d203      	bcs.n	800440c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <xTaskIncrementTick+0x164>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]
						break;
 800440a:	e02f      	b.n	800446c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe ff07 	bl	8003224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3318      	adds	r3, #24
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fefe 	bl	8003224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <xTaskIncrementTick+0x168>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d903      	bls.n	800443c <xTaskIncrementTick+0xe0>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <xTaskIncrementTick+0x168>)
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <xTaskIncrementTick+0x16c>)
 800444a:	441a      	add	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe fe8b 	bl	800316e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <xTaskIncrementTick+0x170>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	429a      	cmp	r2, r3
 8004464:	d3b3      	bcc.n	80043ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446a:	e7b0      	b.n	80043ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <xTaskIncrementTick+0x170>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	4915      	ldr	r1, [pc, #84]	; (80044c8 <xTaskIncrementTick+0x16c>)
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d907      	bls.n	8004494 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e004      	b.n	8004494 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <xTaskIncrementTick+0x174>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <xTaskIncrementTick+0x174>)
 8004492:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <xTaskIncrementTick+0x178>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044a0:	697b      	ldr	r3, [r7, #20]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000db4 	.word	0x20000db4
 80044b0:	20000d90 	.word	0x20000d90
 80044b4:	20000d44 	.word	0x20000d44
 80044b8:	20000d48 	.word	0x20000d48
 80044bc:	20000da4 	.word	0x20000da4
 80044c0:	20000dac 	.word	0x20000dac
 80044c4:	20000d94 	.word	0x20000d94
 80044c8:	200008bc 	.word	0x200008bc
 80044cc:	200008b8 	.word	0x200008b8
 80044d0:	20000d9c 	.word	0x20000d9c
 80044d4:	20000da0 	.word	0x20000da0

080044d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <vTaskSwitchContext+0xa4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <vTaskSwitchContext+0xa8>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044ec:	e040      	b.n	8004570 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <vTaskSwitchContext+0xa8>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <vTaskSwitchContext+0xac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e00f      	b.n	800451c <vTaskSwitchContext+0x44>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <vTaskSwitchContext+0x3e>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e7fe      	b.n	8004514 <vTaskSwitchContext+0x3c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3b01      	subs	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	491a      	ldr	r1, [pc, #104]	; (8004588 <vTaskSwitchContext+0xb0>)
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0e5      	beq.n	80044fc <vTaskSwitchContext+0x24>
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a13      	ldr	r2, [pc, #76]	; (8004588 <vTaskSwitchContext+0xb0>)
 800453c:	4413      	add	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3308      	adds	r3, #8
 8004552:	429a      	cmp	r2, r3
 8004554:	d104      	bne.n	8004560 <vTaskSwitchContext+0x88>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <vTaskSwitchContext+0xb4>)
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4a06      	ldr	r2, [pc, #24]	; (8004584 <vTaskSwitchContext+0xac>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000db4 	.word	0x20000db4
 8004580:	20000da0 	.word	0x20000da0
 8004584:	20000d94 	.word	0x20000d94
 8004588:	200008bc 	.word	0x200008bc
 800458c:	200008b8 	.word	0x200008b8

08004590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <vTaskPlaceOnEventList+0x24>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e7fe      	b.n	80045b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vTaskPlaceOnEventList+0x44>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3318      	adds	r3, #24
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fe fdf9 	bl	80031b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045c2:	2101      	movs	r1, #1
 80045c4:	6838      	ldr	r0, [r7, #0]
 80045c6:	f000 fa75 	bl	8004ab4 <prvAddCurrentTaskToDelayedList>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200008b8 	.word	0x200008b8

080045d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <vTaskPlaceOnEventListRestricted+0x26>
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e7fe      	b.n	80045fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <vTaskPlaceOnEventListRestricted+0x50>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3318      	adds	r3, #24
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7fe fdb1 	bl	800316e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
 8004616:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f000 fa4a 	bl	8004ab4 <prvAddCurrentTaskToDelayedList>
	}
 8004620:	bf00      	nop
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200008b8 	.word	0x200008b8

0800462c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <xTaskRemoveFromEventList+0x2a>
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e7fe      	b.n	8004654 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3318      	adds	r3, #24
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fde2 	bl	8003224 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <xTaskRemoveFromEventList+0xac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11d      	bne.n	80046a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fdd9 	bl	8003224 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <xTaskRemoveFromEventList+0xb0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <xTaskRemoveFromEventList+0x5a>
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <xTaskRemoveFromEventList+0xb0>)
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <xTaskRemoveFromEventList+0xb4>)
 8004694:	441a      	add	r2, r3
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe fd66 	bl	800316e <vListInsertEnd>
 80046a2:	e005      	b.n	80046b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4619      	mov	r1, r3
 80046aa:	480e      	ldr	r0, [pc, #56]	; (80046e4 <xTaskRemoveFromEventList+0xb8>)
 80046ac:	f7fe fd5f 	bl	800316e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <xTaskRemoveFromEventList+0xbc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d905      	bls.n	80046ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <xTaskRemoveFromEventList+0xc0>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e001      	b.n	80046ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000db4 	.word	0x20000db4
 80046dc:	20000d94 	.word	0x20000d94
 80046e0:	200008bc 	.word	0x200008bc
 80046e4:	20000d4c 	.word	0x20000d4c
 80046e8:	200008b8 	.word	0x200008b8
 80046ec:	20000da0 	.word	0x20000da0

080046f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <vTaskInternalSetTimeOutState+0x24>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <vTaskInternalSetTimeOutState+0x28>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000da4 	.word	0x20000da4
 8004718:	20000d90 	.word	0x20000d90

0800471c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <xTaskCheckForTimeOut+0x24>
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e7fe      	b.n	800473e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <xTaskCheckForTimeOut+0x3e>
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e7fe      	b.n	8004758 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800475a:	f000 fdf5 	bl	8005348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <xTaskCheckForTimeOut+0xb8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d102      	bne.n	800477e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e023      	b.n	80047c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <xTaskCheckForTimeOut+0xbc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d007      	beq.n	800479a <xTaskCheckForTimeOut+0x7e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e015      	b.n	80047c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d20b      	bcs.n	80047bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff9d 	bl	80046f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	e004      	b.n	80047c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047c6:	f000 fded 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 80047ca:	69fb      	ldr	r3, [r7, #28]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000d90 	.word	0x20000d90
 80047d8:	20000da4 	.word	0x20000da4

080047dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <vTaskMissedYield+0x14>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000da0 	.word	0x20000da0

080047f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047fc:	f000 f852 	bl	80048a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <prvIdleTask+0x28>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d9f9      	bls.n	80047fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <prvIdleTask+0x2c>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004818:	e7f0      	b.n	80047fc <prvIdleTask+0x8>
 800481a:	bf00      	nop
 800481c:	200008bc 	.word	0x200008bc
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	e00c      	b.n	800484a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <prvInitialiseTaskLists+0x60>)
 800483c:	4413      	add	r3, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fc6a 	bl	8003118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b37      	cmp	r3, #55	; 0x37
 800484e:	d9ef      	bls.n	8004830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004850:	480d      	ldr	r0, [pc, #52]	; (8004888 <prvInitialiseTaskLists+0x64>)
 8004852:	f7fe fc61 	bl	8003118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004856:	480d      	ldr	r0, [pc, #52]	; (800488c <prvInitialiseTaskLists+0x68>)
 8004858:	f7fe fc5e 	bl	8003118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800485c:	480c      	ldr	r0, [pc, #48]	; (8004890 <prvInitialiseTaskLists+0x6c>)
 800485e:	f7fe fc5b 	bl	8003118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004862:	480c      	ldr	r0, [pc, #48]	; (8004894 <prvInitialiseTaskLists+0x70>)
 8004864:	f7fe fc58 	bl	8003118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004868:	480b      	ldr	r0, [pc, #44]	; (8004898 <prvInitialiseTaskLists+0x74>)
 800486a:	f7fe fc55 	bl	8003118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvInitialiseTaskLists+0x78>)
 8004870:	4a05      	ldr	r2, [pc, #20]	; (8004888 <prvInitialiseTaskLists+0x64>)
 8004872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <prvInitialiseTaskLists+0x7c>)
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <prvInitialiseTaskLists+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200008bc 	.word	0x200008bc
 8004888:	20000d1c 	.word	0x20000d1c
 800488c:	20000d30 	.word	0x20000d30
 8004890:	20000d4c 	.word	0x20000d4c
 8004894:	20000d60 	.word	0x20000d60
 8004898:	20000d78 	.word	0x20000d78
 800489c:	20000d44 	.word	0x20000d44
 80048a0:	20000d48 	.word	0x20000d48

080048a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048aa:	e019      	b.n	80048e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048ac:	f000 fd4c 	bl	8005348 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <prvCheckTasksWaitingTermination+0x4c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fcb1 	bl	8003224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <prvCheckTasksWaitingTermination+0x50>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <prvCheckTasksWaitingTermination+0x50>)
 80048ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048d6:	f000 fd65 	bl	80053a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f80e 	bl	80048fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e1      	bne.n	80048ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000d60 	.word	0x20000d60
 80048f4:	20000d8c 	.word	0x20000d8c
 80048f8:	20000d74 	.word	0x20000d74

080048fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fed0 	bl	80056b8 <vPortFree>
				vPortFree( pxTCB );
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fecd 	bl	80056b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800491e:	e017      	b.n	8004950 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004926:	2b01      	cmp	r3, #1
 8004928:	d103      	bne.n	8004932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fec4 	bl	80056b8 <vPortFree>
	}
 8004930:	e00e      	b.n	8004950 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004938:	2b02      	cmp	r3, #2
 800493a:	d009      	beq.n	8004950 <prvDeleteTCB+0x54>
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e7fe      	b.n	800494e <prvDeleteTCB+0x52>
	}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <prvResetNextTaskUnblockTime+0x40>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <prvResetNextTaskUnblockTime+0x14>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <prvResetNextTaskUnblockTime+0x16>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <prvResetNextTaskUnblockTime+0x44>)
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800497a:	e008      	b.n	800498e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <prvResetNextTaskUnblockTime+0x40>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <prvResetNextTaskUnblockTime+0x44>)
 800498c:	6013      	str	r3, [r2, #0]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	20000d44 	.word	0x20000d44
 800499c:	20000dac 	.word	0x20000dac

080049a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <xTaskGetSchedulerState+0x34>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049ae:	2301      	movs	r3, #1
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	e008      	b.n	80049c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <xTaskGetSchedulerState+0x38>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049bc:	2302      	movs	r3, #2
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	e001      	b.n	80049c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049c6:	687b      	ldr	r3, [r7, #4]
	}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000d98 	.word	0x20000d98
 80049d8:	20000db4 	.word	0x20000db4

080049dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d054      	beq.n	8004a9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <xTaskPriorityDisinherit+0xcc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d009      	beq.n	8004a10 <xTaskPriorityDisinherit+0x34>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e7fe      	b.n	8004a0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <xTaskPriorityDisinherit+0x50>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	e7fe      	b.n	8004a2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d02c      	beq.n	8004a9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d128      	bne.n	8004a9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fbe8 	bl	8003224 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <xTaskPriorityDisinherit+0xd0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d903      	bls.n	8004a7c <xTaskPriorityDisinherit+0xa0>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <xTaskPriorityDisinherit+0xd0>)
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <xTaskPriorityDisinherit+0xd4>)
 8004a8a:	441a      	add	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f7fe fb6b 	bl	800316e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a9c:	697b      	ldr	r3, [r7, #20]
	}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200008b8 	.word	0x200008b8
 8004aac:	20000d94 	.word	0x20000d94
 8004ab0:	200008bc 	.word	0x200008bc

08004ab4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fbaa 	bl	8003224 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d10a      	bne.n	8004aee <prvAddCurrentTaskToDelayedList+0x3a>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4819      	ldr	r0, [pc, #100]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ae8:	f7fe fb41 	bl	800316e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aec:	e026      	b.n	8004b3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d209      	bcs.n	8004b1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7fe fb4e 	bl	80031b4 <vListInsert>
}
 8004b18:	e010      	b.n	8004b3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe fb44 	bl	80031b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d202      	bcs.n	8004b3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000d90 	.word	0x20000d90
 8004b48:	200008b8 	.word	0x200008b8
 8004b4c:	20000d78 	.word	0x20000d78
 8004b50:	20000d48 	.word	0x20000d48
 8004b54:	20000d44 	.word	0x20000d44
 8004b58:	20000dac 	.word	0x20000dac

08004b5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b66:	f000 fac3 	bl	80050f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b6a:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <xTimerCreateTimerTask+0x80>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d021      	beq.n	8004bb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b7a:	1d3a      	adds	r2, r7, #4
 8004b7c:	f107 0108 	add.w	r1, r7, #8
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe faad 	bl	80030e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	9202      	str	r2, [sp, #8]
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	2302      	movs	r3, #2
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	4910      	ldr	r1, [pc, #64]	; (8004be0 <xTimerCreateTimerTask+0x84>)
 8004b9e:	4811      	ldr	r0, [pc, #68]	; (8004be4 <xTimerCreateTimerTask+0x88>)
 8004ba0:	f7ff f8f8 	bl	8003d94 <xTaskCreateStatic>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <xTimerCreateTimerTask+0x8c>)
 8004ba8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <xTimerCreateTimerTask+0x8c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <xTimerCreateTimerTask+0x74>
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	e7fe      	b.n	8004bce <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000de8 	.word	0x20000de8
 8004be0:	08005c88 	.word	0x08005c88
 8004be4:	08004d05 	.word	0x08004d05
 8004be8:	20000dec 	.word	0x20000dec

08004bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <xTimerGenericCommand+0x2c>
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	e7fe      	b.n	8004c16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02a      	beq.n	8004c76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	dc18      	bgt.n	8004c64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c32:	f7ff feb5 	bl	80049a0 <xTaskGetSchedulerState>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d109      	bne.n	8004c50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	f107 0110 	add.w	r1, r7, #16
 8004c44:	2300      	movs	r3, #0
 8004c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c48:	f7fe fc50 	bl	80034ec <xQueueGenericSend>
 8004c4c:	6278      	str	r0, [r7, #36]	; 0x24
 8004c4e:	e012      	b.n	8004c76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	f107 0110 	add.w	r1, r7, #16
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f7fe fc46 	bl	80034ec <xQueueGenericSend>
 8004c60:	6278      	str	r0, [r7, #36]	; 0x24
 8004c62:	e008      	b.n	8004c76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	f107 0110 	add.w	r1, r7, #16
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	f7fe fd36 	bl	80036e0 <xQueueGenericSendFromISR>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3728      	adds	r7, #40	; 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000de8 	.word	0x20000de8

08004c84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <prvProcessExpiredTimer+0x7c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fac1 	bl	8003224 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d121      	bne.n	8004cee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	18d1      	adds	r1, r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	6978      	ldr	r0, [r7, #20]
 8004cb8:	f000 f8c8 	bl	8004e4c <prvInsertTimerInActiveList>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d015      	beq.n	8004cee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6978      	ldr	r0, [r7, #20]
 8004cce:	f7ff ff8d 	bl	8004bec <xTimerGenericCommand>
 8004cd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <prvProcessExpiredTimer+0x6a>
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e7fe      	b.n	8004cec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	4798      	blx	r3
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000de0 	.word	0x20000de0

08004d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d0c:	f107 0308 	add.w	r3, r7, #8
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f857 	bl	8004dc4 <prvGetNextExpireTime>
 8004d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f803 	bl	8004d28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d22:	f000 f8d5 	bl	8004ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d26:	e7f1      	b.n	8004d0c <prvTimerTask+0x8>

08004d28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d32:	f7ff fa5b 	bl	80041ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f866 	bl	8004e0c <prvSampleTimeNow>
 8004d40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d130      	bne.n	8004daa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <prvProcessTimerOrBlockTask+0x3c>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d806      	bhi.n	8004d64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d56:	f7ff fa57 	bl	8004208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff91 	bl	8004c84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d62:	e024      	b.n	8004dae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <prvProcessTimerOrBlockTask+0x90>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <prvProcessTimerOrBlockTask+0x94>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f7fe ffcf 	bl	8003d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d8e:	f7ff fa3b 	bl	8004208 <xTaskResumeAll>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <prvProcessTimerOrBlockTask+0x98>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
}
 8004da8:	e001      	b.n	8004dae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004daa:	f7ff fa2d 	bl	8004208 <xTaskResumeAll>
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000de4 	.word	0x20000de4
 8004dbc:	20000de8 	.word	0x20000de8
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <prvGetNextExpireTime+0x44>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <prvGetNextExpireTime+0x44>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e001      	b.n	8004dfa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000de0 	.word	0x20000de0

08004e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e14:	f7ff fa94 	bl	8004340 <xTaskGetTickCount>
 8004e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <prvSampleTimeNow+0x3c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d205      	bcs.n	8004e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e24:	f000 f904 	bl	8005030 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e36:	4a04      	ldr	r2, [pc, #16]	; (8004e48 <prvSampleTimeNow+0x3c>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000df0 	.word	0x20000df0

08004e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d812      	bhi.n	8004e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e01b      	b.n	8004ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <prvInsertTimerInActiveList+0x7c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe f98f 	bl	80031b4 <vListInsert>
 8004e96:	e012      	b.n	8004ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d206      	bcs.n	8004eae <prvInsertTimerInActiveList+0x62>
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d302      	bcc.n	8004eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e007      	b.n	8004ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <prvInsertTimerInActiveList+0x80>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fe f97b 	bl	80031b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ebe:	697b      	ldr	r3, [r7, #20]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000de4 	.word	0x20000de4
 8004ecc:	20000de0 	.word	0x20000de0

08004ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08e      	sub	sp, #56	; 0x38
 8004ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ed6:	e099      	b.n	800500c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da17      	bge.n	8004f0e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <prvProcessReceivedCommands+0x2e>
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e7fe      	b.n	8004efc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	6850      	ldr	r0, [r2, #4]
 8004f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db7a      	blt.n	800500a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fe f97d 	bl	8003224 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ff6d 	bl	8004e0c <prvSampleTimeNow>
 8004f32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d868      	bhi.n	800500c <prvProcessReceivedCommands+0x13c>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <prvProcessReceivedCommands+0x70>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	0800500d 	.word	0x0800500d
 8004f50:	08004fc3 	.word	0x08004fc3
 8004f54:	08004ff9 	.word	0x08004ff9
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	08004f69 	.word	0x08004f69
 8004f60:	0800500d 	.word	0x0800500d
 8004f64:	08004fc3 	.word	0x08004fc3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	18d1      	adds	r1, r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f76:	f7ff ff69 	bl	8004e4c <prvInsertTimerInActiveList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d045      	beq.n	800500c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d13d      	bne.n	800500c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	441a      	add	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f7ff fe23 	bl	8004bec <xTimerGenericCommand>
 8004fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d12e      	bne.n	800500c <prvProcessReceivedCommands+0x13c>
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e7fe      	b.n	8004fc0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <prvProcessReceivedCommands+0x114>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e7fe      	b.n	8004fe2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	18d1      	adds	r1, r2, r3
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff2:	f7ff ff2b 	bl	8004e4c <prvInsertTimerInActiveList>
					break;
 8004ff6:	e009      	b.n	800500c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005004:	f000 fb58 	bl	80056b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005008:	e000      	b.n	800500c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800500a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <prvProcessReceivedCommands+0x15c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1d39      	adds	r1, r7, #4
 8005012:	2200      	movs	r2, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fbf7 	bl	8003808 <xQueueReceive>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f af5b 	bne.w	8004ed8 <prvProcessReceivedCommands+0x8>
	}
}
 8005022:	bf00      	nop
 8005024:	3730      	adds	r7, #48	; 0x30
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000de8 	.word	0x20000de8

08005030 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005036:	e044      	b.n	80050c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe f8e7 	bl	8003224 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d12d      	bne.n	80050c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d90e      	bls.n	8005096 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005084:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fe f890 	bl	80031b4 <vListInsert>
 8005094:	e015      	b.n	80050c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	2100      	movs	r1, #0
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff fda3 	bl	8004bec <xTimerGenericCommand>
 80050a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <prvSwitchTimerLists+0x92>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	e7fe      	b.n	80050c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1b5      	bne.n	8005038 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <prvSwitchTimerLists+0xbc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 80050d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050da:	4a04      	ldr	r2, [pc, #16]	; (80050ec <prvSwitchTimerLists+0xbc>)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	6013      	str	r3, [r2, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000de0 	.word	0x20000de0
 80050ec:	20000de4 	.word	0x20000de4

080050f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050f6:	f000 f927 	bl	8005348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d120      	bne.n	8005144 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005102:	4814      	ldr	r0, [pc, #80]	; (8005154 <prvCheckForValidListAndQueue+0x64>)
 8005104:	f7fe f808 	bl	8003118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005108:	4813      	ldr	r0, [pc, #76]	; (8005158 <prvCheckForValidListAndQueue+0x68>)
 800510a:	f7fe f805 	bl	8003118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <prvCheckForValidListAndQueue+0x6c>)
 8005110:	4a10      	ldr	r2, [pc, #64]	; (8005154 <prvCheckForValidListAndQueue+0x64>)
 8005112:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <prvCheckForValidListAndQueue+0x70>)
 8005116:	4a10      	ldr	r2, [pc, #64]	; (8005158 <prvCheckForValidListAndQueue+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <prvCheckForValidListAndQueue+0x74>)
 8005120:	4a11      	ldr	r2, [pc, #68]	; (8005168 <prvCheckForValidListAndQueue+0x78>)
 8005122:	2110      	movs	r1, #16
 8005124:	200a      	movs	r0, #10
 8005126:	f7fe f90f 	bl	8003348 <xQueueGenericCreateStatic>
 800512a:	4602      	mov	r2, r0
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 800512e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	490b      	ldr	r1, [pc, #44]	; (800516c <prvCheckForValidListAndQueue+0x7c>)
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fdcc 	bl	8003cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005144:	f000 f92e 	bl	80053a4 <vPortExitCritical>
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000de8 	.word	0x20000de8
 8005154:	20000db8 	.word	0x20000db8
 8005158:	20000dcc 	.word	0x20000dcc
 800515c:	20000de0 	.word	0x20000de0
 8005160:	20000de4 	.word	0x20000de4
 8005164:	20000e94 	.word	0x20000e94
 8005168:	20000df4 	.word	0x20000df4
 800516c:	08005c90 	.word	0x08005c90

08005170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b04      	subs	r3, #4
 8005180:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b04      	subs	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <pxPortInitialiseStack+0x54>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b14      	subs	r3, #20
 80051aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b20      	subs	r3, #32
 80051b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	080051c9 	.word	0x080051c9

080051c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <prvTaskExitError+0x4c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d009      	beq.n	80051f0 <prvTaskExitError+0x28>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e7fe      	b.n	80051ee <prvTaskExitError+0x26>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005202:	bf00      	nop
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0fc      	beq.n	8005204 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	2000000c 	.word	0x2000000c
	...

08005220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <pxCurrentTCBConst2>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800522a:	f380 8809 	msr	PSP, r0
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	f04e 0e0d 	orr.w	lr, lr, #13
 800523e:	4770      	bx	lr

08005240 <pxCurrentTCBConst2>:
 8005240:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005248:	4806      	ldr	r0, [pc, #24]	; (8005264 <prvPortStartFirstTask+0x1c>)
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f380 8808 	msr	MSP, r0
 8005252:	b662      	cpsie	i
 8005254:	b661      	cpsie	f
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	df00      	svc	0
 8005260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005262:	bf00      	nop
 8005264:	e000ed08 	.word	0xe000ed08

08005268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <xPortStartScheduler+0xcc>)
 8005270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	22ff      	movs	r2, #255	; 0xff
 800527e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b29      	ldr	r3, [pc, #164]	; (8005338 <xPortStartScheduler+0xd0>)
 8005294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <xPortStartScheduler+0xd4>)
 8005298:	2207      	movs	r2, #7
 800529a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529c:	e009      	b.n	80052b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800529e:	4b27      	ldr	r3, [pc, #156]	; (800533c <xPortStartScheduler+0xd4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4a25      	ldr	r2, [pc, #148]	; (800533c <xPortStartScheduler+0xd4>)
 80052a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d0ef      	beq.n	800529e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052be:	4b1f      	ldr	r3, [pc, #124]	; (800533c <xPortStartScheduler+0xd4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1c3 0307 	rsb	r3, r3, #7
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d009      	beq.n	80052de <xPortStartScheduler+0x76>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	e7fe      	b.n	80052dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052de:	4b17      	ldr	r3, [pc, #92]	; (800533c <xPortStartScheduler+0xd4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <xPortStartScheduler+0xd4>)
 80052e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <xPortStartScheduler+0xd4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f0:	4a12      	ldr	r2, [pc, #72]	; (800533c <xPortStartScheduler+0xd4>)
 80052f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xPortStartScheduler+0xd8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <xPortStartScheduler+0xd8>)
 8005302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005308:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <xPortStartScheduler+0xd8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <xPortStartScheduler+0xd8>)
 800530e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005314:	f000 f8b0 	bl	8005478 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <xPortStartScheduler+0xdc>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800531e:	f7ff ff93 	bl	8005248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005322:	f7ff f8d9 	bl	80044d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005326:	f7ff ff4f 	bl	80051c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	e000e400 	.word	0xe000e400
 8005338:	20000ee4 	.word	0x20000ee4
 800533c:	20000ee8 	.word	0x20000ee8
 8005340:	e000ed20 	.word	0xe000ed20
 8005344:	2000000c 	.word	0x2000000c

08005348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <vPortEnterCritical+0x54>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a0d      	ldr	r2, [pc, #52]	; (800539c <vPortEnterCritical+0x54>)
 8005368:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <vPortEnterCritical+0x54>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10e      	bne.n	8005390 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <vPortEnterCritical+0x58>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <vPortEnterCritical+0x48>
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	e7fe      	b.n	800538e <vPortEnterCritical+0x46>
	}
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	2000000c 	.word	0x2000000c
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <vPortExitCritical+0x48>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <vPortExitCritical+0x22>
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	e7fe      	b.n	80053c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <vPortExitCritical+0x48>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a07      	ldr	r2, [pc, #28]	; (80053ec <vPortExitCritical+0x48>)
 80053ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <vPortExitCritical+0x48>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <vPortExitCritical+0x3e>
 80053d8:	2300      	movs	r3, #0
 80053da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	2000000c 	.word	0x2000000c

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005400:	6010      	str	r0, [r2, #0]
 8005402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005406:	f04f 0050 	mov.w	r0, #80	; 0x50
 800540a:	f380 8811 	msr	BASEPRI, r0
 800540e:	f7ff f863 	bl	80044d8 <vTaskSwitchContext>
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005426:	f380 8809 	msr	PSP, r0
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	4770      	bx	lr

08005430 <pxCurrentTCBConst>:
 8005430:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005450:	f7fe ff84 	bl	800435c <xTaskIncrementTick>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <SysTick_Handler+0x3c>)
 800545c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	2300      	movs	r3, #0
 8005464:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <vPortSetupTimerInterrupt+0x30>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <vPortSetupTimerInterrupt+0x34>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <vPortSetupTimerInterrupt+0x38>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <vPortSetupTimerInterrupt+0x3c>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <vPortSetupTimerInterrupt+0x40>)
 8005496:	3b01      	subs	r3, #1
 8005498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <vPortSetupTimerInterrupt+0x30>)
 800549c:	2207      	movs	r2, #7
 800549e:	601a      	str	r2, [r3, #0]
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	e000e010 	.word	0xe000e010
 80054ac:	e000e018 	.word	0xe000e018
 80054b0:	20000000 	.word	0x20000000
 80054b4:	10624dd3 	.word	0x10624dd3
 80054b8:	e000e014 	.word	0xe000e014

080054bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054c2:	f3ef 8305 	mrs	r3, IPSR
 80054c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d913      	bls.n	80054f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <vPortValidateInterruptPriority+0x68>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <vPortValidateInterruptPriority+0x6c>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	7afa      	ldrb	r2, [r7, #11]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d209      	bcs.n	80054f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e7fe      	b.n	80054f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <vPortValidateInterruptPriority+0x70>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <vPortValidateInterruptPriority+0x74>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d909      	bls.n	800551a <vPortValidateInterruptPriority+0x5e>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	e7fe      	b.n	8005518 <vPortValidateInterruptPriority+0x5c>
	}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	e000e3f0 	.word	0xe000e3f0
 8005528:	20000ee4 	.word	0x20000ee4
 800552c:	e000ed0c 	.word	0xe000ed0c
 8005530:	20000ee8 	.word	0x20000ee8

08005534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005540:	f7fe fe54 	bl	80041ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005544:	4b57      	ldr	r3, [pc, #348]	; (80056a4 <pvPortMalloc+0x170>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800554c:	f000 f90c 	bl	8005768 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005550:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <pvPortMalloc+0x174>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 808c 	bne.w	8005676 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01c      	beq.n	800559e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005564:	2208      	movs	r2, #8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d013      	beq.n	800559e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f023 0307 	bic.w	r3, r3, #7
 800557c:	3308      	adds	r3, #8
 800557e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <pvPortMalloc+0x6a>
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e7fe      	b.n	800559c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d068      	beq.n	8005676 <pvPortMalloc+0x142>
 80055a4:	4b41      	ldr	r3, [pc, #260]	; (80056ac <pvPortMalloc+0x178>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d863      	bhi.n	8005676 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055ae:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <pvPortMalloc+0x17c>)
 80055b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055b2:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <pvPortMalloc+0x17c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055b8:	e004      	b.n	80055c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d903      	bls.n	80055d6 <pvPortMalloc+0xa2>
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f1      	bne.n	80055ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055d6:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <pvPortMalloc+0x170>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	429a      	cmp	r2, r3
 80055de:	d04a      	beq.n	8005676 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2208      	movs	r2, #8
 80055e6:	4413      	add	r3, r2
 80055e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad2      	subs	r2, r2, r3
 80055fa:	2308      	movs	r3, #8
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	429a      	cmp	r2, r3
 8005600:	d91e      	bls.n	8005640 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <pvPortMalloc+0xf4>
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e7fe      	b.n	8005626 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800563a:	69b8      	ldr	r0, [r7, #24]
 800563c:	f000 f8f6 	bl	800582c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005640:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <pvPortMalloc+0x178>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <pvPortMalloc+0x178>)
 800564c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800564e:	4b17      	ldr	r3, [pc, #92]	; (80056ac <pvPortMalloc+0x178>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <pvPortMalloc+0x180>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d203      	bcs.n	8005662 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <pvPortMalloc+0x178>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <pvPortMalloc+0x180>)
 8005660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <pvPortMalloc+0x174>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	431a      	orrs	r2, r3
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005676:	f7fe fdc7 	bl	8004208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <pvPortMalloc+0x164>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e7fe      	b.n	8005696 <pvPortMalloc+0x162>
	return pvReturn;
 8005698:	69fb      	ldr	r3, [r7, #28]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3728      	adds	r7, #40	; 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20001af4 	.word	0x20001af4
 80056a8:	20001b00 	.word	0x20001b00
 80056ac:	20001af8 	.word	0x20001af8
 80056b0:	20001aec 	.word	0x20001aec
 80056b4:	20001afc 	.word	0x20001afc

080056b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d046      	beq.n	8005758 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ca:	2308      	movs	r3, #8
 80056cc:	425b      	negs	r3, r3
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b20      	ldr	r3, [pc, #128]	; (8005760 <vPortFree+0xa8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <vPortFree+0x42>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e7fe      	b.n	80056f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <vPortFree+0x5e>
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	e7fe      	b.n	8005714 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <vPortFree+0xa8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d019      	beq.n	8005758 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d115      	bne.n	8005758 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <vPortFree+0xa8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800573c:	f7fe fd56 	bl	80041ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <vPortFree+0xac>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4413      	add	r3, r2
 800574a:	4a06      	ldr	r2, [pc, #24]	; (8005764 <vPortFree+0xac>)
 800574c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800574e:	6938      	ldr	r0, [r7, #16]
 8005750:	f000 f86c 	bl	800582c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005754:	f7fe fd58 	bl	8004208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005758:	bf00      	nop
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20001b00 	.word	0x20001b00
 8005764:	20001af8 	.word	0x20001af8

08005768 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800576e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005772:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <prvHeapInit+0xac>)
 8005776:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00c      	beq.n	800579c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3307      	adds	r3, #7
 8005786:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0307 	bic.w	r3, r3, #7
 800578e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <prvHeapInit+0xac>)
 8005798:	4413      	add	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057a0:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <prvHeapInit+0xb0>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <prvHeapInit+0xb0>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057b4:	2208      	movs	r2, #8
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0307 	bic.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <prvHeapInit+0xb4>)
 80057c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <prvHeapInit+0xb4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <prvHeapInit+0xb4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <prvHeapInit+0xb4>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <prvHeapInit+0xb8>)
 80057f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <prvHeapInit+0xbc>)
 80057fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <prvHeapInit+0xc0>)
 8005802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005806:	601a      	str	r2, [r3, #0]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000eec 	.word	0x20000eec
 8005818:	20001aec 	.word	0x20001aec
 800581c:	20001af4 	.word	0x20001af4
 8005820:	20001afc 	.word	0x20001afc
 8005824:	20001af8 	.word	0x20001af8
 8005828:	20001b00 	.word	0x20001b00

0800582c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005834:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e002      	b.n	8005840 <prvInsertBlockIntoFreeList+0x14>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d8f7      	bhi.n	800583a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d108      	bne.n	800586e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	441a      	add	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d118      	bne.n	80058b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <prvInsertBlockIntoFreeList+0xac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d00d      	beq.n	80058aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e008      	b.n	80058bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <prvInsertBlockIntoFreeList+0xac>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e003      	b.n	80058bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d002      	beq.n	80058ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	20001aec 	.word	0x20001aec
 80058d8:	20001af4 	.word	0x20001af4

080058dc <atoi>:
 80058dc:	220a      	movs	r2, #10
 80058de:	2100      	movs	r1, #0
 80058e0:	f000 b8cc 	b.w	8005a7c <strtol>

080058e4 <__libc_init_array>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	2500      	movs	r5, #0
 80058e8:	4e0c      	ldr	r6, [pc, #48]	; (800591c <__libc_init_array+0x38>)
 80058ea:	4c0d      	ldr	r4, [pc, #52]	; (8005920 <__libc_init_array+0x3c>)
 80058ec:	1ba4      	subs	r4, r4, r6
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	42a5      	cmp	r5, r4
 80058f2:	d109      	bne.n	8005908 <__libc_init_array+0x24>
 80058f4:	f000 f938 	bl	8005b68 <_init>
 80058f8:	2500      	movs	r5, #0
 80058fa:	4e0a      	ldr	r6, [pc, #40]	; (8005924 <__libc_init_array+0x40>)
 80058fc:	4c0a      	ldr	r4, [pc, #40]	; (8005928 <__libc_init_array+0x44>)
 80058fe:	1ba4      	subs	r4, r4, r6
 8005900:	10a4      	asrs	r4, r4, #2
 8005902:	42a5      	cmp	r5, r4
 8005904:	d105      	bne.n	8005912 <__libc_init_array+0x2e>
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800590c:	4798      	blx	r3
 800590e:	3501      	adds	r5, #1
 8005910:	e7ee      	b.n	80058f0 <__libc_init_array+0xc>
 8005912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005916:	4798      	blx	r3
 8005918:	3501      	adds	r5, #1
 800591a:	e7f2      	b.n	8005902 <__libc_init_array+0x1e>
 800591c:	08005e7c 	.word	0x08005e7c
 8005920:	08005e7c 	.word	0x08005e7c
 8005924:	08005e7c 	.word	0x08005e7c
 8005928:	08005e80 	.word	0x08005e80

0800592c <__itoa>:
 800592c:	1e93      	subs	r3, r2, #2
 800592e:	2b22      	cmp	r3, #34	; 0x22
 8005930:	b510      	push	{r4, lr}
 8005932:	460c      	mov	r4, r1
 8005934:	d904      	bls.n	8005940 <__itoa+0x14>
 8005936:	2300      	movs	r3, #0
 8005938:	461c      	mov	r4, r3
 800593a:	700b      	strb	r3, [r1, #0]
 800593c:	4620      	mov	r0, r4
 800593e:	bd10      	pop	{r4, pc}
 8005940:	2a0a      	cmp	r2, #10
 8005942:	d109      	bne.n	8005958 <__itoa+0x2c>
 8005944:	2800      	cmp	r0, #0
 8005946:	da07      	bge.n	8005958 <__itoa+0x2c>
 8005948:	232d      	movs	r3, #45	; 0x2d
 800594a:	700b      	strb	r3, [r1, #0]
 800594c:	2101      	movs	r1, #1
 800594e:	4240      	negs	r0, r0
 8005950:	4421      	add	r1, r4
 8005952:	f000 f8a9 	bl	8005aa8 <__utoa>
 8005956:	e7f1      	b.n	800593c <__itoa+0x10>
 8005958:	2100      	movs	r1, #0
 800595a:	e7f9      	b.n	8005950 <__itoa+0x24>

0800595c <itoa>:
 800595c:	f7ff bfe6 	b.w	800592c <__itoa>

08005960 <memcpy>:
 8005960:	b510      	push	{r4, lr}
 8005962:	1e43      	subs	r3, r0, #1
 8005964:	440a      	add	r2, r1
 8005966:	4291      	cmp	r1, r2
 8005968:	d100      	bne.n	800596c <memcpy+0xc>
 800596a:	bd10      	pop	{r4, pc}
 800596c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005974:	e7f7      	b.n	8005966 <memcpy+0x6>

08005976 <memset>:
 8005976:	4603      	mov	r3, r0
 8005978:	4402      	add	r2, r0
 800597a:	4293      	cmp	r3, r2
 800597c:	d100      	bne.n	8005980 <memset+0xa>
 800597e:	4770      	bx	lr
 8005980:	f803 1b01 	strb.w	r1, [r3], #1
 8005984:	e7f9      	b.n	800597a <memset+0x4>

08005986 <_strtol_l.isra.0>:
 8005986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598a:	4680      	mov	r8, r0
 800598c:	4689      	mov	r9, r1
 800598e:	4692      	mov	sl, r2
 8005990:	461e      	mov	r6, r3
 8005992:	460f      	mov	r7, r1
 8005994:	463d      	mov	r5, r7
 8005996:	9808      	ldr	r0, [sp, #32]
 8005998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800599c:	f000 f8c2 	bl	8005b24 <__locale_ctype_ptr_l>
 80059a0:	4420      	add	r0, r4
 80059a2:	7843      	ldrb	r3, [r0, #1]
 80059a4:	f013 0308 	ands.w	r3, r3, #8
 80059a8:	d132      	bne.n	8005a10 <_strtol_l.isra.0+0x8a>
 80059aa:	2c2d      	cmp	r4, #45	; 0x2d
 80059ac:	d132      	bne.n	8005a14 <_strtol_l.isra.0+0x8e>
 80059ae:	2201      	movs	r2, #1
 80059b0:	787c      	ldrb	r4, [r7, #1]
 80059b2:	1cbd      	adds	r5, r7, #2
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	d05d      	beq.n	8005a74 <_strtol_l.isra.0+0xee>
 80059b8:	2e10      	cmp	r6, #16
 80059ba:	d109      	bne.n	80059d0 <_strtol_l.isra.0+0x4a>
 80059bc:	2c30      	cmp	r4, #48	; 0x30
 80059be:	d107      	bne.n	80059d0 <_strtol_l.isra.0+0x4a>
 80059c0:	782b      	ldrb	r3, [r5, #0]
 80059c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059c6:	2b58      	cmp	r3, #88	; 0x58
 80059c8:	d14f      	bne.n	8005a6a <_strtol_l.isra.0+0xe4>
 80059ca:	2610      	movs	r6, #16
 80059cc:	786c      	ldrb	r4, [r5, #1]
 80059ce:	3502      	adds	r5, #2
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	bf14      	ite	ne
 80059d4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80059d8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80059dc:	2700      	movs	r7, #0
 80059de:	fbb1 fcf6 	udiv	ip, r1, r6
 80059e2:	4638      	mov	r0, r7
 80059e4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80059e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	d817      	bhi.n	8005a20 <_strtol_l.isra.0+0x9a>
 80059f0:	461c      	mov	r4, r3
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	dd23      	ble.n	8005a3e <_strtol_l.isra.0+0xb8>
 80059f6:	1c7b      	adds	r3, r7, #1
 80059f8:	d007      	beq.n	8005a0a <_strtol_l.isra.0+0x84>
 80059fa:	4584      	cmp	ip, r0
 80059fc:	d31c      	bcc.n	8005a38 <_strtol_l.isra.0+0xb2>
 80059fe:	d101      	bne.n	8005a04 <_strtol_l.isra.0+0x7e>
 8005a00:	45a6      	cmp	lr, r4
 8005a02:	db19      	blt.n	8005a38 <_strtol_l.isra.0+0xb2>
 8005a04:	2701      	movs	r7, #1
 8005a06:	fb00 4006 	mla	r0, r0, r6, r4
 8005a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a0e:	e7eb      	b.n	80059e8 <_strtol_l.isra.0+0x62>
 8005a10:	462f      	mov	r7, r5
 8005a12:	e7bf      	b.n	8005994 <_strtol_l.isra.0+0xe>
 8005a14:	2c2b      	cmp	r4, #43	; 0x2b
 8005a16:	bf04      	itt	eq
 8005a18:	1cbd      	addeq	r5, r7, #2
 8005a1a:	787c      	ldrbeq	r4, [r7, #1]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	e7c9      	b.n	80059b4 <_strtol_l.isra.0+0x2e>
 8005a20:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005a24:	2b19      	cmp	r3, #25
 8005a26:	d801      	bhi.n	8005a2c <_strtol_l.isra.0+0xa6>
 8005a28:	3c37      	subs	r4, #55	; 0x37
 8005a2a:	e7e2      	b.n	80059f2 <_strtol_l.isra.0+0x6c>
 8005a2c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005a30:	2b19      	cmp	r3, #25
 8005a32:	d804      	bhi.n	8005a3e <_strtol_l.isra.0+0xb8>
 8005a34:	3c57      	subs	r4, #87	; 0x57
 8005a36:	e7dc      	b.n	80059f2 <_strtol_l.isra.0+0x6c>
 8005a38:	f04f 37ff 	mov.w	r7, #4294967295
 8005a3c:	e7e5      	b.n	8005a0a <_strtol_l.isra.0+0x84>
 8005a3e:	1c7b      	adds	r3, r7, #1
 8005a40:	d108      	bne.n	8005a54 <_strtol_l.isra.0+0xce>
 8005a42:	2322      	movs	r3, #34	; 0x22
 8005a44:	4608      	mov	r0, r1
 8005a46:	f8c8 3000 	str.w	r3, [r8]
 8005a4a:	f1ba 0f00 	cmp.w	sl, #0
 8005a4e:	d107      	bne.n	8005a60 <_strtol_l.isra.0+0xda>
 8005a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a54:	b102      	cbz	r2, 8005a58 <_strtol_l.isra.0+0xd2>
 8005a56:	4240      	negs	r0, r0
 8005a58:	f1ba 0f00 	cmp.w	sl, #0
 8005a5c:	d0f8      	beq.n	8005a50 <_strtol_l.isra.0+0xca>
 8005a5e:	b10f      	cbz	r7, 8005a64 <_strtol_l.isra.0+0xde>
 8005a60:	f105 39ff 	add.w	r9, r5, #4294967295
 8005a64:	f8ca 9000 	str.w	r9, [sl]
 8005a68:	e7f2      	b.n	8005a50 <_strtol_l.isra.0+0xca>
 8005a6a:	2430      	movs	r4, #48	; 0x30
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	d1af      	bne.n	80059d0 <_strtol_l.isra.0+0x4a>
 8005a70:	2608      	movs	r6, #8
 8005a72:	e7ad      	b.n	80059d0 <_strtol_l.isra.0+0x4a>
 8005a74:	2c30      	cmp	r4, #48	; 0x30
 8005a76:	d0a3      	beq.n	80059c0 <_strtol_l.isra.0+0x3a>
 8005a78:	260a      	movs	r6, #10
 8005a7a:	e7a9      	b.n	80059d0 <_strtol_l.isra.0+0x4a>

08005a7c <strtol>:
 8005a7c:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <strtol+0x24>)
 8005a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	4d08      	ldr	r5, [pc, #32]	; (8005aa4 <strtol+0x28>)
 8005a84:	6a23      	ldr	r3, [r4, #32]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf08      	it	eq
 8005a8a:	462b      	moveq	r3, r5
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	460a      	mov	r2, r1
 8005a92:	4601      	mov	r1, r0
 8005a94:	4620      	mov	r0, r4
 8005a96:	f7ff ff76 	bl	8005986 <_strtol_l.isra.0>
 8005a9a:	b003      	add	sp, #12
 8005a9c:	bd30      	pop	{r4, r5, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000010 	.word	0x20000010
 8005aa4:	20000074 	.word	0x20000074

08005aa8 <__utoa>:
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b08b      	sub	sp, #44	; 0x2c
 8005aac:	4605      	mov	r5, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	466e      	mov	r6, sp
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <__utoa+0x78>)
 8005ab4:	f103 0c20 	add.w	ip, r3, #32
 8005ab8:	4637      	mov	r7, r6
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	c703      	stmia	r7!, {r0, r1}
 8005ac2:	4563      	cmp	r3, ip
 8005ac4:	463e      	mov	r6, r7
 8005ac6:	d1f7      	bne.n	8005ab8 <__utoa+0x10>
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	791b      	ldrb	r3, [r3, #4]
 8005acc:	6038      	str	r0, [r7, #0]
 8005ace:	713b      	strb	r3, [r7, #4]
 8005ad0:	1e93      	subs	r3, r2, #2
 8005ad2:	2b22      	cmp	r3, #34	; 0x22
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	d904      	bls.n	8005ae4 <__utoa+0x3c>
 8005ada:	7023      	strb	r3, [r4, #0]
 8005adc:	461c      	mov	r4, r3
 8005ade:	4620      	mov	r0, r4
 8005ae0:	b00b      	add	sp, #44	; 0x2c
 8005ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae4:	1e66      	subs	r6, r4, #1
 8005ae6:	fbb5 f0f2 	udiv	r0, r5, r2
 8005aea:	fb02 5510 	mls	r5, r2, r0, r5
 8005aee:	af0a      	add	r7, sp, #40	; 0x28
 8005af0:	443d      	add	r5, r7
 8005af2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005afc:	4605      	mov	r5, r0
 8005afe:	b968      	cbnz	r0, 8005b1c <__utoa+0x74>
 8005b00:	4622      	mov	r2, r4
 8005b02:	5460      	strb	r0, [r4, r1]
 8005b04:	4423      	add	r3, r4
 8005b06:	1b19      	subs	r1, r3, r4
 8005b08:	1b10      	subs	r0, r2, r4
 8005b0a:	4281      	cmp	r1, r0
 8005b0c:	dde7      	ble.n	8005ade <__utoa+0x36>
 8005b0e:	7811      	ldrb	r1, [r2, #0]
 8005b10:	7818      	ldrb	r0, [r3, #0]
 8005b12:	f802 0b01 	strb.w	r0, [r2], #1
 8005b16:	f803 1901 	strb.w	r1, [r3], #-1
 8005b1a:	e7f4      	b.n	8005b06 <__utoa+0x5e>
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	e7e2      	b.n	8005ae6 <__utoa+0x3e>
 8005b20:	08005d4c 	.word	0x08005d4c

08005b24 <__locale_ctype_ptr_l>:
 8005b24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005b28:	4770      	bx	lr

08005b2a <__ascii_mbtowc>:
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	b901      	cbnz	r1, 8005b30 <__ascii_mbtowc+0x6>
 8005b2e:	a901      	add	r1, sp, #4
 8005b30:	b142      	cbz	r2, 8005b44 <__ascii_mbtowc+0x1a>
 8005b32:	b14b      	cbz	r3, 8005b48 <__ascii_mbtowc+0x1e>
 8005b34:	7813      	ldrb	r3, [r2, #0]
 8005b36:	600b      	str	r3, [r1, #0]
 8005b38:	7812      	ldrb	r2, [r2, #0]
 8005b3a:	1c10      	adds	r0, r2, #0
 8005b3c:	bf18      	it	ne
 8005b3e:	2001      	movne	r0, #1
 8005b40:	b002      	add	sp, #8
 8005b42:	4770      	bx	lr
 8005b44:	4610      	mov	r0, r2
 8005b46:	e7fb      	b.n	8005b40 <__ascii_mbtowc+0x16>
 8005b48:	f06f 0001 	mvn.w	r0, #1
 8005b4c:	e7f8      	b.n	8005b40 <__ascii_mbtowc+0x16>

08005b4e <__ascii_wctomb>:
 8005b4e:	b149      	cbz	r1, 8005b64 <__ascii_wctomb+0x16>
 8005b50:	2aff      	cmp	r2, #255	; 0xff
 8005b52:	bf8b      	itete	hi
 8005b54:	238a      	movhi	r3, #138	; 0x8a
 8005b56:	700a      	strbls	r2, [r1, #0]
 8005b58:	6003      	strhi	r3, [r0, #0]
 8005b5a:	2001      	movls	r0, #1
 8005b5c:	bf88      	it	hi
 8005b5e:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b62:	4770      	bx	lr
 8005b64:	4608      	mov	r0, r1
 8005b66:	4770      	bx	lr

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
