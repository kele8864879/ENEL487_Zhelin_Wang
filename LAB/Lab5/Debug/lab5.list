
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d84  08004d84  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004d84  08004d84  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d84  08004d84  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  20000014  08004da0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b40  08004da0  00021b40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ecd  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b44  00000000  00000000  00035f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  00038a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  00039cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000027c2  00000000  00000000  0003ae58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea1d  00000000  00000000  0003d61a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092ac3  00000000  00000000  0004c037  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000deafa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e44  00000000  00000000  000deb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c3c 	.word	0x08004c3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004c3c 	.word	0x08004c3c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b598      	push	{r3, r4, r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fce6 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f8aa 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f93e 	bl	8000400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000184:	f000 f8e8 	bl	8000358 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000188:	f000 f910 	bl	80003ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  strcpy((char*)cliBufferTX, "\x1b[2J");                                         /*clear the screen*/
 800018c:	4b40      	ldr	r3, [pc, #256]	; (8000290 <main+0x11c>)
 800018e:	4a41      	ldr	r2, [pc, #260]	; (8000294 <main+0x120>)
 8000190:	6810      	ldr	r0, [r2, #0]
 8000192:	6018      	str	r0, [r3, #0]
 8000194:	7912      	ldrb	r2, [r2, #4]
 8000196:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000198:	483d      	ldr	r0, [pc, #244]	; (8000290 <main+0x11c>)
 800019a:	f7ff ffe3 	bl	8000164 <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a6:	493a      	ldr	r1, [pc, #232]	; (8000290 <main+0x11c>)
 80001a8:	483b      	ldr	r0, [pc, #236]	; (8000298 <main+0x124>)
 80001aa:	f001 fe70 	bl	8001e8e <HAL_UART_Transmit>
  strcpy((char*)cliBufferTX, "\x1b[0;0H");                                      /*position the cursor*/
 80001ae:	4b38      	ldr	r3, [pc, #224]	; (8000290 <main+0x11c>)
 80001b0:	4a3a      	ldr	r2, [pc, #232]	; (800029c <main+0x128>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
 80001b6:	8891      	ldrh	r1, [r2, #4]
 80001b8:	7992      	ldrb	r2, [r2, #6]
 80001ba:	8099      	strh	r1, [r3, #4]
 80001bc:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001be:	4834      	ldr	r0, [pc, #208]	; (8000290 <main+0x11c>)
 80001c0:	f7ff ffd0 	bl	8000164 <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001cc:	4930      	ldr	r1, [pc, #192]	; (8000290 <main+0x11c>)
 80001ce:	4832      	ldr	r0, [pc, #200]	; (8000298 <main+0x124>)
 80001d0:	f001 fe5d 	bl	8001e8e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, "period:  00100", 14,1000);
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	220e      	movs	r2, #14
 80001da:	4931      	ldr	r1, [pc, #196]	; (80002a0 <main+0x12c>)
 80001dc:	482e      	ldr	r0, [pc, #184]	; (8000298 <main+0x124>)
 80001de:	f001 fe56 	bl	8001e8e <HAL_UART_Transmit>


  strcpy((char*)cliBufferTX, "\x1b[10;r");                                       /*scroll window*/
 80001e2:	4b2b      	ldr	r3, [pc, #172]	; (8000290 <main+0x11c>)
 80001e4:	4a2f      	ldr	r2, [pc, #188]	; (80002a4 <main+0x130>)
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	6018      	str	r0, [r3, #0]
 80001ea:	8891      	ldrh	r1, [r2, #4]
 80001ec:	7992      	ldrb	r2, [r2, #6]
 80001ee:	8099      	strh	r1, [r3, #4]
 80001f0:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001f2:	4827      	ldr	r0, [pc, #156]	; (8000290 <main+0x11c>)
 80001f4:	f7ff ffb6 	bl	8000164 <strlen>
 80001f8:	4603      	mov	r3, r0
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	4923      	ldr	r1, [pc, #140]	; (8000290 <main+0x11c>)
 8000202:	4825      	ldr	r0, [pc, #148]	; (8000298 <main+0x124>)
 8000204:	f001 fe43 	bl	8001e8e <HAL_UART_Transmit>

  strcpy((char*)cliBufferTX, "\x1b[10;0H");                                      /*position the cursor*/
 8000208:	4a21      	ldr	r2, [pc, #132]	; (8000290 <main+0x11c>)
 800020a:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <main+0x134>)
 800020c:	cb03      	ldmia	r3!, {r0, r1}
 800020e:	6010      	str	r0, [r2, #0]
 8000210:	6051      	str	r1, [r2, #4]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000212:	481f      	ldr	r0, [pc, #124]	; (8000290 <main+0x11c>)
 8000214:	f7ff ffa6 	bl	8000164 <strlen>
 8000218:	4603      	mov	r3, r0
 800021a:	b29a      	uxth	r2, r3
 800021c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000220:	491b      	ldr	r1, [pc, #108]	; (8000290 <main+0x11c>)
 8000222:	481d      	ldr	r0, [pc, #116]	; (8000298 <main+0x124>)
 8000224:	f001 fe33 	bl	8001e8e <HAL_UART_Transmit>

   strcpy((char*)cliBufferTX, "Testing CLI!\r\n");
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <main+0x11c>)
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <main+0x138>)
 800022c:	4614      	mov	r4, r2
 800022e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000230:	6020      	str	r0, [r4, #0]
 8000232:	6061      	str	r1, [r4, #4]
 8000234:	60a2      	str	r2, [r4, #8]
 8000236:	881a      	ldrh	r2, [r3, #0]
 8000238:	789b      	ldrb	r3, [r3, #2]
 800023a:	81a2      	strh	r2, [r4, #12]
 800023c:	73a3      	strb	r3, [r4, #14]
   HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <main+0x11c>)
 8000240:	f7ff ff90 	bl	8000164 <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b29a      	uxth	r2, r3
 8000248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024c:	4910      	ldr	r1, [pc, #64]	; (8000290 <main+0x11c>)
 800024e:	4812      	ldr	r0, [pc, #72]	; (8000298 <main+0x124>)
 8000250:	f001 fe1d 	bl	8001e8e <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000254:	f002 f824 	bl	80022a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartDefaultTask, NULL, &blink_attributes);
 8000258:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <main+0x13c>)
 800025a:	2100      	movs	r1, #0
 800025c:	4815      	ldr	r0, [pc, #84]	; (80002b4 <main+0x140>)
 800025e:	f002 f885 	bl	800236c <osThreadNew>
 8000262:	4602      	mov	r2, r0
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0x144>)
 8000266:	601a      	str	r2, [r3, #0]

  /* creation of rx_cli */
  rx_cliHandle = osThreadNew(StartTask02, NULL, &rx_cli_attributes);
 8000268:	4a14      	ldr	r2, [pc, #80]	; (80002bc <main+0x148>)
 800026a:	2100      	movs	r1, #0
 800026c:	4814      	ldr	r0, [pc, #80]	; (80002c0 <main+0x14c>)
 800026e:	f002 f87d 	bl	800236c <osThreadNew>
 8000272:	4602      	mov	r2, r0
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0x150>)
 8000276:	601a      	str	r2, [r3, #0]

  /* creation of status_cli */
  status_cliHandle = osThreadNew(StartTask03, NULL, &status_cli_attributes);
 8000278:	4a13      	ldr	r2, [pc, #76]	; (80002c8 <main+0x154>)
 800027a:	2100      	movs	r1, #0
 800027c:	4813      	ldr	r0, [pc, #76]	; (80002cc <main+0x158>)
 800027e:	f002 f875 	bl	800236c <osThreadNew>
 8000282:	4602      	mov	r2, r0
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <main+0x15c>)
 8000286:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000288:	f002 f83c 	bl	8002304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028c:	e7fe      	b.n	800028c <main+0x118>
 800028e:	bf00      	nop
 8000290:	2000198c 	.word	0x2000198c
 8000294:	08004c70 	.word	0x08004c70
 8000298:	2000194c 	.word	0x2000194c
 800029c:	08004c78 	.word	0x08004c78
 80002a0:	08004c80 	.word	0x08004c80
 80002a4:	08004c90 	.word	0x08004c90
 80002a8:	08004c98 	.word	0x08004c98
 80002ac:	08004ca0 	.word	0x08004ca0
 80002b0:	08004d00 	.word	0x08004d00
 80002b4:	080004dd 	.word	0x080004dd
 80002b8:	20001ab0 	.word	0x20001ab0
 80002bc:	08004d24 	.word	0x08004d24
 80002c0:	08000519 	.word	0x08000519
 80002c4:	20001a58 	.word	0x20001a58
 80002c8:	08004d48 	.word	0x08004d48
 80002cc:	08000735 	.word	0x08000735
 80002d0:	20001a54 	.word	0x20001a54

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 fca1 	bl	8004c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000306:	2300      	movs	r3, #0
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800030a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fed7 	bl	80010c8 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000320:	f000 fab2 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	2302      	movs	r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f001 f942 	bl	80015c8 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800034a:	f000 fa9d 	bl	8000888 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3740      	adds	r7, #64	; 0x40
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <MX_USART2_UART_Init+0x50>)
 8000360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 8000364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 800037e:	220c      	movs	r2, #12
 8000380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_USART2_UART_Init+0x4c>)
 8000390:	f001 fd30 	bl	8001df4 <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800039a:	f000 fa75 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20001a70 	.word	0x20001a70
 80003a8:	40004400 	.word	0x40004400

080003ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <MX_USART3_UART_Init+0x50>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART3_UART_Init+0x4c>)
 80003e4:	f001 fd06 	bl	8001df4 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003ee:	f000 fa4b 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000194c 	.word	0x2000194c
 80003fc:	40004800 	.word	0x40004800

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000414:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a2c      	ldr	r2, [pc, #176]	; (80004cc <MX_GPIO_Init+0xcc>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0310 	and.w	r3, r3, #16
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MX_GPIO_Init+0xcc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a26      	ldr	r2, [pc, #152]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_GPIO_Init+0xcc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0320 	and.w	r3, r3, #32
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a20      	ldr	r2, [pc, #128]	; (80004cc <MX_GPIO_Init+0xcc>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a1a      	ldr	r2, [pc, #104]	; (80004cc <MX_GPIO_Init+0xcc>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0308 	and.w	r3, r3, #8
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	4815      	ldr	r0, [pc, #84]	; (80004d0 <MX_GPIO_Init+0xd0>)
 800047a:	f000 fdd1 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_GPIO_Init+0xd4>)
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_GPIO_Init+0xd8>)
 8000494:	f000 fc6a 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000498:	2320      	movs	r3, #32
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4808      	ldr	r0, [pc, #32]	; (80004d0 <MX_GPIO_Init+0xd0>)
 80004b0:	f000 fc5c 	bl	8000d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2028      	movs	r0, #40	; 0x28
 80004ba:	f000 fc2c 	bl	8000d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004be:	2028      	movs	r0, #40	; 0x28
 80004c0:	f000 fc45 	bl	8000d4e <HAL_NVIC_EnableIRQ>

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	10110000 	.word	0x10110000
 80004d8:	40011000 	.word	0x40011000

080004dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(uwTick%period==0)
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <StartDefaultTask+0x30>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <StartDefaultTask+0x34>)
 80004ea:	8812      	ldrh	r2, [r2, #0]
 80004ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80004f0:	fb02 f201 	mul.w	r2, r2, r1
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d103      	bne.n	8000502 <StartDefaultTask+0x26>
	HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 80004fa:	2120      	movs	r1, #32
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <StartDefaultTask+0x38>)
 80004fe:	f000 fda7 	bl	8001050 <HAL_GPIO_TogglePin>
    osDelay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f001 ffdc 	bl	80024c0 <osDelay>
	if(uwTick%period==0)
 8000508:	e7ec      	b.n	80004e4 <StartDefaultTask+0x8>
 800050a:	bf00      	nop
 800050c:	20001afc 	.word	0x20001afc
 8000510:	20000000 	.word	0x20000000
 8000514:	40010800 	.word	0x40010800

08000518 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if((HAL_UART_Receive(&huart3,cliBufferRX, 1,300) == HAL_OK))
 8000520:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000524:	2201      	movs	r2, #1
 8000526:	4978      	ldr	r1, [pc, #480]	; (8000708 <StartTask02+0x1f0>)
 8000528:	4878      	ldr	r0, [pc, #480]	; (800070c <StartTask02+0x1f4>)
 800052a:	f001 fd42 	bl	8001fb2 <HAL_UART_Receive>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	f040 80e5 	bne.w	8000700 <StartTask02+0x1e8>
	  {
		  cliBufferTX[i] = cliBufferRX[0];
 8000536:	4b76      	ldr	r3, [pc, #472]	; (8000710 <StartTask02+0x1f8>)
 8000538:	f993 3000 	ldrsb.w	r3, [r3]
 800053c:	461a      	mov	r2, r3
 800053e:	4b72      	ldr	r3, [pc, #456]	; (8000708 <StartTask02+0x1f0>)
 8000540:	7819      	ldrb	r1, [r3, #0]
 8000542:	4b74      	ldr	r3, [pc, #464]	; (8000714 <StartTask02+0x1fc>)
 8000544:	5499      	strb	r1, [r3, r2]
		  if( cliBufferTX[i]=='\r')
 8000546:	4b72      	ldr	r3, [pc, #456]	; (8000710 <StartTask02+0x1f8>)
 8000548:	f993 3000 	ldrsb.w	r3, [r3]
 800054c:	461a      	mov	r2, r3
 800054e:	4b71      	ldr	r3, [pc, #452]	; (8000714 <StartTask02+0x1fc>)
 8000550:	5c9b      	ldrb	r3, [r3, r2]
 8000552:	2b0d      	cmp	r3, #13
 8000554:	d13d      	bne.n	80005d2 <StartTask02+0xba>
		  {
			cliBufferTX[i]='\0';
 8000556:	4b6e      	ldr	r3, [pc, #440]	; (8000710 <StartTask02+0x1f8>)
 8000558:	f993 3000 	ldrsb.w	r3, [r3]
 800055c:	461a      	mov	r2, r3
 800055e:	4b6d      	ldr	r3, [pc, #436]	; (8000714 <StartTask02+0x1fc>)
 8000560:	2100      	movs	r1, #0
 8000562:	5499      	strb	r1, [r3, r2]
			cliBufferRX[0]='\r';
 8000564:	4b68      	ldr	r3, [pc, #416]	; (8000708 <StartTask02+0x1f0>)
 8000566:	220d      	movs	r2, #13
 8000568:	701a      	strb	r2, [r3, #0]
			cliBufferRX[1]='\n';
 800056a:	4b67      	ldr	r3, [pc, #412]	; (8000708 <StartTask02+0x1f0>)
 800056c:	220a      	movs	r2, #10
 800056e:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart3,cliBufferRX,2,1000);
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	2202      	movs	r2, #2
 8000576:	4964      	ldr	r1, [pc, #400]	; (8000708 <StartTask02+0x1f0>)
 8000578:	4864      	ldr	r0, [pc, #400]	; (800070c <StartTask02+0x1f4>)
 800057a:	f001 fc88 	bl	8001e8e <HAL_UART_Transmit>
			if(strcmp(cliBufferTX,"period ")==0)
 800057e:	4966      	ldr	r1, [pc, #408]	; (8000718 <StartTask02+0x200>)
 8000580:	4864      	ldr	r0, [pc, #400]	; (8000714 <StartTask02+0x1fc>)
 8000582:	f7ff fde5 	bl	8000150 <strcmp>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d108      	bne.n	800059e <StartTask02+0x86>
			  {
				period = clirxchar;
 800058c:	4b63      	ldr	r3, [pc, #396]	; (800071c <StartTask02+0x204>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b63      	ldr	r3, [pc, #396]	; (8000720 <StartTask02+0x208>)
 8000594:	801a      	strh	r2, [r3, #0]
                Newperiod = true;
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <StartTask02+0x20c>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e00f      	b.n	80005be <StartTask02+0xa6>
			  }


			 else
			  { strcpy(( char*)cliBufferTX, "error\r\n");
 800059e:	4a5d      	ldr	r2, [pc, #372]	; (8000714 <StartTask02+0x1fc>)
 80005a0:	4b61      	ldr	r3, [pc, #388]	; (8000728 <StartTask02+0x210>)
 80005a2:	cb03      	ldmia	r3!, {r0, r1}
 80005a4:	6010      	str	r0, [r2, #0]
 80005a6:	6051      	str	r1, [r2, #4]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80005a8:	485a      	ldr	r0, [pc, #360]	; (8000714 <StartTask02+0x1fc>)
 80005aa:	f7ff fddb 	bl	8000164 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	4957      	ldr	r1, [pc, #348]	; (8000714 <StartTask02+0x1fc>)
 80005b8:	4854      	ldr	r0, [pc, #336]	; (800070c <StartTask02+0x1f4>)
 80005ba:	f001 fc68 	bl	8001e8e <HAL_UART_Transmit>
			  }
			i=0;
 80005be:	4b54      	ldr	r3, [pc, #336]	; (8000710 <StartTask02+0x1f8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
			flag=0;
 80005c4:	4b59      	ldr	r3, [pc, #356]	; (800072c <StartTask02+0x214>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
			clirxchar=0;
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <StartTask02+0x204>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	e096      	b.n	8000700 <StartTask02+0x1e8>

		  }

		else if( cliBufferTX[i]=='\177')
 80005d2:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <StartTask02+0x1f8>)
 80005d4:	f993 3000 	ldrsb.w	r3, [r3]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <StartTask02+0x1fc>)
 80005dc:	5c9b      	ldrb	r3, [r3, r2]
 80005de:	2b7f      	cmp	r3, #127	; 0x7f
 80005e0:	d121      	bne.n	8000626 <StartTask02+0x10e>
			{
			  p=&cliBufferTX[i];
 80005e2:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <StartTask02+0x1f8>)
 80005e4:	f993 3000 	ldrsb.w	r3, [r3]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <StartTask02+0x1fc>)
 80005ec:	4413      	add	r3, r2
 80005ee:	4a50      	ldr	r2, [pc, #320]	; (8000730 <StartTask02+0x218>)
 80005f0:	6013      	str	r3, [r2, #0]
			  HAL_UART_Transmit(&huart3,p,1,1000);
 80005f2:	4b4f      	ldr	r3, [pc, #316]	; (8000730 <StartTask02+0x218>)
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	2201      	movs	r2, #1
 80005fc:	4843      	ldr	r0, [pc, #268]	; (800070c <StartTask02+0x1f4>)
 80005fe:	f001 fc46 	bl	8001e8e <HAL_UART_Transmit>
			  i--;
 8000602:	4b43      	ldr	r3, [pc, #268]	; (8000710 <StartTask02+0x1f8>)
 8000604:	f993 3000 	ldrsb.w	r3, [r3]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3b01      	subs	r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	b25a      	sxtb	r2, r3
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <StartTask02+0x1f8>)
 8000612:	701a      	strb	r2, [r3, #0]
			  if(i<0) i=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <StartTask02+0x1f8>)
 8000616:	f993 3000 	ldrsb.w	r3, [r3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	da70      	bge.n	8000700 <StartTask02+0x1e8>
 800061e:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <StartTask02+0x1f8>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e06c      	b.n	8000700 <StartTask02+0x1e8>
			}

		else if( cliBufferTX[i]==' ')
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <StartTask02+0x1f8>)
 8000628:	f993 3000 	ldrsb.w	r3, [r3]
 800062c:	461a      	mov	r2, r3
 800062e:	4b39      	ldr	r3, [pc, #228]	; (8000714 <StartTask02+0x1fc>)
 8000630:	5c9b      	ldrb	r3, [r3, r2]
 8000632:	2b20      	cmp	r3, #32
 8000634:	d11c      	bne.n	8000670 <StartTask02+0x158>
		    {
			   flag = 1;
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <StartTask02+0x214>)
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
			   p=&cliBufferTX[i];
 800063c:	4b34      	ldr	r3, [pc, #208]	; (8000710 <StartTask02+0x1f8>)
 800063e:	f993 3000 	ldrsb.w	r3, [r3]
 8000642:	461a      	mov	r2, r3
 8000644:	4b33      	ldr	r3, [pc, #204]	; (8000714 <StartTask02+0x1fc>)
 8000646:	4413      	add	r3, r2
 8000648:	4a39      	ldr	r2, [pc, #228]	; (8000730 <StartTask02+0x218>)
 800064a:	6013      	str	r3, [r2, #0]
			   HAL_UART_Transmit(&huart3,p,1,1000);
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <StartTask02+0x218>)
 800064e:	6819      	ldr	r1, [r3, #0]
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	2201      	movs	r2, #1
 8000656:	482d      	ldr	r0, [pc, #180]	; (800070c <StartTask02+0x1f4>)
 8000658:	f001 fc19 	bl	8001e8e <HAL_UART_Transmit>
			   i++;
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <StartTask02+0x1f8>)
 800065e:	f993 3000 	ldrsb.w	r3, [r3]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	3301      	adds	r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	b25a      	sxtb	r2, r3
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <StartTask02+0x1f8>)
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	e047      	b.n	8000700 <StartTask02+0x1e8>
		    }

		     else
			{
		    	 if(flag==0)
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <StartTask02+0x214>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d119      	bne.n	80006ac <StartTask02+0x194>
		    	  {
			        p=&cliBufferTX[i];
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <StartTask02+0x1f8>)
 800067a:	f993 3000 	ldrsb.w	r3, [r3]
 800067e:	461a      	mov	r2, r3
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <StartTask02+0x1fc>)
 8000682:	4413      	add	r3, r2
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <StartTask02+0x218>)
 8000686:	6013      	str	r3, [r2, #0]
			        HAL_UART_Transmit(&huart3,p,1,1000);
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <StartTask02+0x218>)
 800068a:	6819      	ldr	r1, [r3, #0]
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	2201      	movs	r2, #1
 8000692:	481e      	ldr	r0, [pc, #120]	; (800070c <StartTask02+0x1f4>)
 8000694:	f001 fbfb 	bl	8001e8e <HAL_UART_Transmit>
			        i++;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <StartTask02+0x1f8>)
 800069a:	f993 3000 	ldrsb.w	r3, [r3]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <StartTask02+0x1f8>)
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e029      	b.n	8000700 <StartTask02+0x1e8>
		    	  }
		    	 else
		    	  {  if(cliBufferRX[0]>=0x30 && cliBufferRX[0]<=0x39)
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <StartTask02+0x1f0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b2f      	cmp	r3, #47	; 0x2f
 80006b2:	d925      	bls.n	8000700 <StartTask02+0x1e8>
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <StartTask02+0x1f0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b39      	cmp	r3, #57	; 0x39
 80006ba:	d821      	bhi.n	8000700 <StartTask02+0x1e8>
		    	      {
		    		    cliBufferRX[0] = cliBufferRX[0] - 0x30;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <StartTask02+0x1f0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3b30      	subs	r3, #48	; 0x30
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <StartTask02+0x1f0>)
 80006c6:	701a      	strb	r2, [r3, #0]
		    		    clirxchar = clirxchar *10 + cliBufferRX[0];
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <StartTask02+0x204>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <StartTask02+0x1f0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <StartTask02+0x204>)
 80006de:	6013      	str	r3, [r2, #0]
		    		    p=&cliBufferTX[i];
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <StartTask02+0x1f8>)
 80006e2:	f993 3000 	ldrsb.w	r3, [r3]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <StartTask02+0x1fc>)
 80006ea:	4413      	add	r3, r2
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <StartTask02+0x218>)
 80006ee:	6013      	str	r3, [r2, #0]
		    		   	HAL_UART_Transmit(&huart3,p,1,1000);
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <StartTask02+0x218>)
 80006f2:	6819      	ldr	r1, [r3, #0]
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	2201      	movs	r2, #1
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <StartTask02+0x1f4>)
 80006fc:	f001 fbc7 	bl	8001e8e <HAL_UART_Transmit>
		    	      }
		    	  }
			}
	}

    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fedd 	bl	80024c0 <osDelay>
	  if((HAL_UART_Receive(&huart3,cliBufferRX, 1,300) == HAL_OK))
 8000706:	e70b      	b.n	8000520 <StartTask02+0x8>
 8000708:	20001a5c 	.word	0x20001a5c
 800070c:	2000194c 	.word	0x2000194c
 8000710:	20000030 	.word	0x20000030
 8000714:	2000198c 	.word	0x2000198c
 8000718:	08004cb0 	.word	0x08004cb0
 800071c:	20000038 	.word	0x20000038
 8000720:	20000000 	.word	0x20000000
 8000724:	2000003c 	.word	0x2000003c
 8000728:	08004cb8 	.word	0x08004cb8
 800072c:	20000034 	.word	0x20000034
 8000730:	20001948 	.word	0x20001948

08000734 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	uint8_t j;
  for(;;)
  {
	if(Newperiod==true)
 800073c:	4b40      	ldr	r3, [pc, #256]	; (8000840 <StartTask03+0x10c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d079      	beq.n	8000838 <StartTask03+0x104>
	{
	  strcpy((char*)cliBufferRX, "\x1b[s");                                            /*save cursor*/
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <StartTask03+0x110>)
 8000746:	4a40      	ldr	r2, [pc, #256]	; (8000848 <StartTask03+0x114>)
 8000748:	6810      	ldr	r0, [r2, #0]
 800074a:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 800074c:	483d      	ldr	r0, [pc, #244]	; (8000844 <StartTask03+0x110>)
 800074e:	f7ff fd09 	bl	8000164 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	493a      	ldr	r1, [pc, #232]	; (8000844 <StartTask03+0x110>)
 800075c:	483b      	ldr	r0, [pc, #236]	; (800084c <StartTask03+0x118>)
 800075e:	f001 fb96 	bl	8001e8e <HAL_UART_Transmit>
	  strcpy((char*)cliBufferRX, "\x1b[0;0H");
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <StartTask03+0x110>)
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <StartTask03+0x11c>)
 8000766:	6810      	ldr	r0, [r2, #0]
 8000768:	6018      	str	r0, [r3, #0]
 800076a:	8891      	ldrh	r1, [r2, #4]
 800076c:	7992      	ldrb	r2, [r2, #6]
 800076e:	8099      	strh	r1, [r3, #4]
 8000770:	719a      	strb	r2, [r3, #6]
	  HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000772:	4834      	ldr	r0, [pc, #208]	; (8000844 <StartTask03+0x110>)
 8000774:	f7ff fcf6 	bl	8000164 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	4930      	ldr	r1, [pc, #192]	; (8000844 <StartTask03+0x110>)
 8000782:	4832      	ldr	r0, [pc, #200]	; (800084c <StartTask03+0x118>)
 8000784:	f001 fb83 	bl	8001e8e <HAL_UART_Transmit>
      strcpy((char*)cliBufferRX, "period:  ");
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <StartTask03+0x110>)
 800078a:	4b32      	ldr	r3, [pc, #200]	; (8000854 <StartTask03+0x120>)
 800078c:	cb03      	ldmia	r3!, {r0, r1}
 800078e:	6010      	str	r0, [r2, #0]
 8000790:	6051      	str	r1, [r2, #4]
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	8113      	strh	r3, [r2, #8]
      HAL_UART_Transmit(&huart3,cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000796:	482b      	ldr	r0, [pc, #172]	; (8000844 <StartTask03+0x110>)
 8000798:	f7ff fce4 	bl	8000164 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a4:	4927      	ldr	r1, [pc, #156]	; (8000844 <StartTask03+0x110>)
 80007a6:	4829      	ldr	r0, [pc, #164]	; (800084c <StartTask03+0x118>)
 80007a8:	f001 fb71 	bl	8001e8e <HAL_UART_Transmit>

      uint16_t temp = period;
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <StartTask03+0x124>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	81bb      	strh	r3, [r7, #12]
      for( j=0;j<5;j++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e01c      	b.n	80007f2 <StartTask03+0xbe>
       {  cliBufferRX[4-j]=(temp%10)^0x30;
 80007b8:	89ba      	ldrh	r2, [r7, #12]
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <StartTask03+0x128>)
 80007bc:	fba3 1302 	umull	r1, r3, r3, r2
 80007c0:	08d9      	lsrs	r1, r3, #3
 80007c2:	460b      	mov	r3, r1
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f1c3 0304 	rsb	r3, r3, #4
 80007d6:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80007da:	b2d1      	uxtb	r1, r2
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <StartTask03+0x110>)
 80007de:	54d1      	strb	r1, [r2, r3]
          temp=temp/10;
 80007e0:	89bb      	ldrh	r3, [r7, #12]
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <StartTask03+0x128>)
 80007e4:	fba2 2303 	umull	r2, r3, r2, r3
 80007e8:	08db      	lsrs	r3, r3, #3
 80007ea:	81bb      	strh	r3, [r7, #12]
      for( j=0;j<5;j++)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	3301      	adds	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9df      	bls.n	80007b8 <StartTask03+0x84>
       }

      cliBufferRX[5]='\0';
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <StartTask03+0x110>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	715a      	strb	r2, [r3, #5]
      HAL_UART_Transmit(&huart3,cliBufferRX, strlen((char*)cliBufferRX),1000);
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <StartTask03+0x110>)
 8000800:	f7ff fcb0 	bl	8000164 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080c:	490d      	ldr	r1, [pc, #52]	; (8000844 <StartTask03+0x110>)
 800080e:	480f      	ldr	r0, [pc, #60]	; (800084c <StartTask03+0x118>)
 8000810:	f001 fb3d 	bl	8001e8e <HAL_UART_Transmit>

      strcpy((char*)cliBufferRX, "\x1b[u");                                            /*恢复光标*/
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <StartTask03+0x110>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <StartTask03+0x12c>)
 8000818:	6810      	ldr	r0, [r2, #0]
 800081a:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <StartTask03+0x110>)
 800081e:	f7ff fca1 	bl	8000164 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <StartTask03+0x110>)
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <StartTask03+0x118>)
 800082e:	f001 fb2e 	bl	8001e8e <HAL_UART_Transmit>
	  Newperiod = false;
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <StartTask03+0x10c>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
	}

    osDelay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f001 fe41 	bl	80024c0 <osDelay>
	if(Newperiod==true)
 800083e:	e77d      	b.n	800073c <StartTask03+0x8>
 8000840:	2000003c 	.word	0x2000003c
 8000844:	20001a5c 	.word	0x20001a5c
 8000848:	08004cc0 	.word	0x08004cc0
 800084c:	2000194c 	.word	0x2000194c
 8000850:	08004c78 	.word	0x08004c78
 8000854:	08004cc4 	.word	0x08004cc4
 8000858:	20000000 	.word	0x20000000
 800085c:	cccccccd 	.word	0xcccccccd
 8000860:	08004cd0 	.word	0x08004cd0

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 f97d 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40000800 	.word	0x40000800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_MspInit+0x5c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x5c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x60>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_MspInit+0x60>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010000 	.word	0x40010000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a31      	ldr	r2, [pc, #196]	; (80009d8 <HAL_UART_MspInit+0xe0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d124      	bne.n	8000962 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000918:	4b30      	ldr	r3, [pc, #192]	; (80009dc <HAL_UART_MspInit+0xe4>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <HAL_UART_MspInit+0xe4>)
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	61d3      	str	r3, [r2, #28]
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <HAL_UART_MspInit+0xe4>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <HAL_UART_MspInit+0xe4>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a29      	ldr	r2, [pc, #164]	; (80009dc <HAL_UART_MspInit+0xe4>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <HAL_UART_MspInit+0xe4>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000948:	230c      	movs	r3, #12
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2302      	movs	r3, #2
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4619      	mov	r1, r3
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <HAL_UART_MspInit+0xe8>)
 800095c:	f000 fa06 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000960:	e036      	b.n	80009d0 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART3)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <HAL_UART_MspInit+0xec>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d131      	bne.n	80009d0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_UART_MspInit+0xe4>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <HAL_UART_MspInit+0xe4>)
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_UART_MspInit+0xe4>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_UART_MspInit+0xe4>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_UART_MspInit+0xe4>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_UART_MspInit+0xe4>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	4619      	mov	r1, r3
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <HAL_UART_MspInit+0xf0>)
 80009b2:	f000 f9db 	bl	8000d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <HAL_UART_MspInit+0xf0>)
 80009cc:	f000 f9ce 	bl	8000d6c <HAL_GPIO_Init>
}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40004400 	.word	0x40004400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40004800 	.word	0x40004800
 80009e8:	40010c00 	.word	0x40010c00

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	201e      	movs	r0, #30
 8000a02:	f000 f988 	bl	8000d16 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a06:	201e      	movs	r0, #30
 8000a08:	f000 f9a1 	bl	8000d4e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ff48 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a34:	f000 ff1e 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0c9b      	lsrs	r3, r3, #18
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <HAL_InitTick+0xac>)
 8000a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a58:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a6e:	f000 ff77 	bl	8001960 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d104      	bne.n	8000a82 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a7a:	f000 ffc9 	bl	8001a10 <HAL_TIM_Base_Start_IT>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	20001ab4 	.word	0x20001ab4
 8000a98:	40000800 	.word	0x40000800

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <HardFault_Handler+0x4>

08000aae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <BusFault_Handler+0x4>

08000aba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <UsageFault_Handler+0x4>

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM4_IRQHandler+0x10>)
 8000ad2:	f000 ffef 	bl	8001ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20001ab4 	.word	0x20001ab4

08000ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae8:	f000 facc 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000afc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b22:	f7ff ffe5 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f004 f851 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff fb23 	bl	8000174 <main>
  bx lr
 8000b2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b30:	08004d8c 	.word	0x08004d8c
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b38:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000b3c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000b40:	20001b40 	.word	0x20001b40

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x28>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f8d1 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ff44 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe96 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20001afc 	.word	0x20001afc

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20001afc 	.word	0x20001afc

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4906      	ldr	r1, [pc, #24]	; (8000c44 <__NVIC_EnableIRQ+0x34>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff4f 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff64 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ffb2 	bl	8000c9c <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff81 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff57 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08b      	sub	sp, #44	; 0x2c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	e127      	b.n	8000fd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d80:	2201      	movs	r2, #1
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8116 	bne.w	8000fca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d034      	beq.n	8000e10 <HAL_GPIO_Init+0xa4>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d80d      	bhi.n	8000dc6 <HAL_GPIO_Init+0x5a>
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d02b      	beq.n	8000e06 <HAL_GPIO_Init+0x9a>
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d804      	bhi.n	8000dbc <HAL_GPIO_Init+0x50>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d031      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d01c      	beq.n	8000df4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dba:	e048      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d043      	beq.n	8000e48 <HAL_GPIO_Init+0xdc>
 8000dc0:	2b11      	cmp	r3, #17
 8000dc2:	d01b      	beq.n	8000dfc <HAL_GPIO_Init+0x90>
          break;
 8000dc4:	e043      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dc6:	4a89      	ldr	r2, [pc, #548]	; (8000fec <HAL_GPIO_Init+0x280>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d026      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000dcc:	4a87      	ldr	r2, [pc, #540]	; (8000fec <HAL_GPIO_Init+0x280>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d806      	bhi.n	8000de0 <HAL_GPIO_Init+0x74>
 8000dd2:	4a87      	ldr	r2, [pc, #540]	; (8000ff0 <HAL_GPIO_Init+0x284>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d020      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000dd8:	4a86      	ldr	r2, [pc, #536]	; (8000ff4 <HAL_GPIO_Init+0x288>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d01d      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
          break;
 8000dde:	e036      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000de0:	4a85      	ldr	r2, [pc, #532]	; (8000ff8 <HAL_GPIO_Init+0x28c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d019      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000de6:	4a85      	ldr	r2, [pc, #532]	; (8000ffc <HAL_GPIO_Init+0x290>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d016      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000dec:	4a84      	ldr	r2, [pc, #528]	; (8001000 <HAL_GPIO_Init+0x294>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
          break;
 8000df2:	e02c      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e028      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	3304      	adds	r3, #4
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e023      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e01e      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	330c      	adds	r3, #12
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e019      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e22:	2304      	movs	r3, #4
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e012      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	611a      	str	r2, [r3, #16]
          break;
 8000e3a:	e008      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	615a      	str	r2, [r3, #20]
          break;
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
          break;
 8000e4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d801      	bhi.n	8000e58 <HAL_GPIO_Init+0xec>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	e001      	b.n	8000e5c <HAL_GPIO_Init+0xf0>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2bff      	cmp	r3, #255	; 0xff
 8000e62:	d802      	bhi.n	8000e6a <HAL_GPIO_Init+0xfe>
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x104>
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	3b08      	subs	r3, #8
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	210f      	movs	r1, #15
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	401a      	ands	r2, r3
 8000e82:	6a39      	ldr	r1, [r7, #32]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 8096 	beq.w	8000fca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9e:	4b59      	ldr	r3, [pc, #356]	; (8001004 <HAL_GPIO_Init+0x298>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a58      	ldr	r2, [pc, #352]	; (8001004 <HAL_GPIO_Init+0x298>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b56      	ldr	r3, [pc, #344]	; (8001004 <HAL_GPIO_Init+0x298>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb6:	4a54      	ldr	r2, [pc, #336]	; (8001008 <HAL_GPIO_Init+0x29c>)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4b      	ldr	r2, [pc, #300]	; (800100c <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x19e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4a      	ldr	r2, [pc, #296]	; (8001010 <HAL_GPIO_Init+0x2a4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x19a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_GPIO_Init+0x2a8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x196>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_GPIO_Init+0x2ac>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x192>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1c:	493a      	ldr	r1, [pc, #232]	; (8001008 <HAL_GPIO_Init+0x29c>)
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f36:	4b39      	ldr	r3, [pc, #228]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4938      	ldr	r1, [pc, #224]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4933      	ldr	r1, [pc, #204]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	492e      	ldr	r1, [pc, #184]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4929      	ldr	r1, [pc, #164]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	4924      	ldr	r1, [pc, #144]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	491f      	ldr	r1, [pc, #124]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	491a      	ldr	r1, [pc, #104]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60cb      	str	r3, [r1, #12]
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4915      	ldr	r1, [pc, #84]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3301      	adds	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f47f aed0 	bne.w	8000d80 <HAL_GPIO_Init+0x14>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	372c      	adds	r7, #44	; 0x2c
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	10210000 	.word	0x10210000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	10120000 	.word	0x10120000
 8000ff8:	10310000 	.word	0x10310000
 8000ffc:	10320000 	.word	0x10320000
 8001000:	10220000 	.word	0x10220000
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011000 	.word	0x40011000
 8001018:	40011400 	.word	0x40011400
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	041a      	lsls	r2, r3, #16
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43d9      	mvns	r1, r3
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	400b      	ands	r3, r1
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	611a      	str	r2, [r3, #16]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f806 	bl	80010b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e26c      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8087 	beq.w	80011f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e8:	4b92      	ldr	r3, [pc, #584]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d00c      	beq.n	800110e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f4:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d112      	bne.n	8001126 <HAL_RCC_OscConfig+0x5e>
 8001100:	4b8c      	ldr	r3, [pc, #560]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d10b      	bne.n	8001126 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d06c      	beq.n	80011f4 <HAL_RCC_OscConfig+0x12c>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d168      	bne.n	80011f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e246      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112e:	d106      	bne.n	800113e <HAL_RCC_OscConfig+0x76>
 8001130:	4b80      	ldr	r3, [pc, #512]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a7f      	ldr	r2, [pc, #508]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e02e      	b.n	800119c <HAL_RCC_OscConfig+0xd4>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x98>
 8001146:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b78      	ldr	r3, [pc, #480]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a77      	ldr	r2, [pc, #476]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xd4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0xbc>
 800116a:	4b72      	ldr	r3, [pc, #456]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a71      	ldr	r2, [pc, #452]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xd4>
 8001184:	4b6b      	ldr	r3, [pc, #428]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a6a      	ldr	r2, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a67      	ldr	r2, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fcf8 	bl	8000b98 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcf4 	bl	8000b98 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1fa      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xe4>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fce4 	bl	8000b98 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fce0 	bl	8000b98 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1e6      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	4b53      	ldr	r3, [pc, #332]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x10c>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001202:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b08      	cmp	r3, #8
 8001218:	d11c      	bne.n	8001254 <HAL_RCC_OscConfig+0x18c>
 800121a:	4b46      	ldr	r3, [pc, #280]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1ba      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4939      	ldr	r1, [pc, #228]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	e03a      	b.n	80012ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fc99 	bl	8000b98 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fc95 	bl	8000b98 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e19b      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4927      	ldr	r1, [pc, #156]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc78 	bl	8000b98 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc74 	bl	8000b98 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e17a      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d03a      	beq.n	800134c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d019      	beq.n	8001312 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_RCC_OscConfig+0x274>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fc58 	bl	8000b98 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc54 	bl	8000b98 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e15a      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f000 fb0a 	bl	8001924 <RCC_Delay>
 8001310:	e01c      	b.n	800134c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_RCC_OscConfig+0x274>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fc3e 	bl	8000b98 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131e:	e00f      	b.n	8001340 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fc3a 	bl	8000b98 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d908      	bls.n	8001340 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e140      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	42420000 	.word	0x42420000
 800133c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e9      	bne.n	8001320 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a6 	beq.w	80014a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b97      	ldr	r3, [pc, #604]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b94      	ldr	r3, [pc, #592]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a93      	ldr	r2, [pc, #588]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b91      	ldr	r3, [pc, #580]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b8e      	ldr	r3, [pc, #568]	; (80015c0 <HAL_RCC_OscConfig+0x4f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b8b      	ldr	r3, [pc, #556]	; (80015c0 <HAL_RCC_OscConfig+0x4f8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a8a      	ldr	r2, [pc, #552]	; (80015c0 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbfb 	bl	8000b98 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fbf7 	bl	8000b98 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e0fd      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_RCC_OscConfig+0x4f8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x312>
 80013cc:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a7a      	ldr	r2, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e02d      	b.n	8001436 <HAL_RCC_OscConfig+0x36e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x334>
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a75      	ldr	r2, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6213      	str	r3, [r2, #32]
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a72      	ldr	r2, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6213      	str	r3, [r2, #32]
 80013fa:	e01c      	b.n	8001436 <HAL_RCC_OscConfig+0x36e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x356>
 8001404:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a6c      	ldr	r2, [pc, #432]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a69      	ldr	r2, [pc, #420]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x36e>
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a66      	ldr	r2, [pc, #408]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6213      	str	r3, [r2, #32]
 800142a:	4b64      	ldr	r3, [pc, #400]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4a63      	ldr	r2, [pc, #396]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001430:	f023 0304 	bic.w	r3, r3, #4
 8001434:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fbab 	bl	8000b98 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fba7 	bl	8000b98 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0ab      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	4b57      	ldr	r3, [pc, #348]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ee      	beq.n	8001446 <HAL_RCC_OscConfig+0x37e>
 8001468:	e014      	b.n	8001494 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb95 	bl	8000b98 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fb91 	bl	8000b98 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e095      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a47      	ldr	r2, [pc, #284]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8081 	beq.w	80015b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d061      	beq.n	8001580 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d146      	bne.n	8001552 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_OscConfig+0x4fc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fb65 	bl	8000b98 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d2:	f7ff fb61 	bl	8000b98 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e067      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d108      	bne.n	800150c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	492d      	ldr	r1, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a19      	ldr	r1, [r3, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	430b      	orrs	r3, r1
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_RCC_OscConfig+0x4fc>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fb35 	bl	8000b98 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fb31 	bl	8000b98 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e037      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x46a>
 8001550:	e02f      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_RCC_OscConfig+0x4fc>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb1e 	bl	8000b98 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fb1a 	bl	8000b98 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e020      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x498>
 800157e:	e018      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e013      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x4f4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	429a      	cmp	r2, r3
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40007000 	.word	0x40007000
 80015c4:	42420060 	.word	0x42420060

080015c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0d0      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d910      	bls.n	800160c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 0207 	bic.w	r2, r3, #7
 80015f2:	4965      	ldr	r1, [pc, #404]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0b8      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a58      	ldr	r2, [pc, #352]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800162e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001646:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	494d      	ldr	r1, [pc, #308]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d040      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d115      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07f      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e073      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06b      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4936      	ldr	r1, [pc, #216]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fa6e 	bl	8000b98 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff fa6a 	bl	8000b98 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e053      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d210      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0207 	bic.w	r2, r3, #7
 80016fe:	4922      	ldr	r1, [pc, #136]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e032      	b.n	800177e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4916      	ldr	r1, [pc, #88]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001756:	f000 f821 	bl	800179c <HAL_RCC_GetSysClockFreq>
 800175a:	4601      	mov	r1, r0
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	fa21 f303 	lsr.w	r3, r1, r3
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_RCC_ClockConfig+0x1cc>)
 8001770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f938 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40022000 	.word	0x40022000
 800178c:	40021000 	.word	0x40021000
 8001790:	08004d6c 	.word	0x08004d6c
 8001794:	20000004 	.word	0x20000004
 8001798:	20000008 	.word	0x20000008

0800179c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	b490      	push	{r4, r7}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017a4:	1d3c      	adds	r4, r7, #4
 80017a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x40>
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x46>
 80017da:	e02d      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017de:	623b      	str	r3, [r7, #32]
      break;
 80017e0:	e02d      	b.n	800183e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ee:	4413      	add	r3, r2
 80017f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0c5b      	lsrs	r3, r3, #17
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800180e:	4413      	add	r3, r2
 8001810:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001814:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800181a:	fb02 f203 	mul.w	r2, r2, r3
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	e004      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_RCC_GetSysClockFreq+0xc0>)
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	623b      	str	r3, [r7, #32]
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183a:	623b      	str	r3, [r7, #32]
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	6a3b      	ldr	r3, [r7, #32]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bc90      	pop	{r4, r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	08004cd4 	.word	0x08004cd4
 8001850:	08004ce4 	.word	0x08004ce4
 8001854:	40021000 	.word	0x40021000
 8001858:	007a1200 	.word	0x007a1200
 800185c:	003d0900 	.word	0x003d0900

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_GetHCLKFreq+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff2 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 800187c:	4601      	mov	r1, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	08004d7c 	.word	0x08004d7c

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffde 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08004d7c 	.word	0x08004d7c

080018c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	220f      	movs	r2, #15
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0207 	and.w	r2, r3, #7
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40022000 	.word	0x40022000

08001924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <RCC_Delay+0x34>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <RCC_Delay+0x38>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001940:	bf00      	nop
  }
  while (Delay --);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	60fa      	str	r2, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <RCC_Delay+0x1c>
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000004 	.word	0x20000004
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e041      	b.n	80019f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f839 	bl	80019fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 f9b4 	bl	8001d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d001      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e03a      	b.n	8001a9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <HAL_TIM_Base_Start_IT+0x98>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00e      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x58>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a52:	d009      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x58>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_TIM_Base_Start_IT+0x9c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d004      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x58>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d010      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8a:	e007      	b.n	8001a9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d122      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d11b      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0202 	mvn.w	r2, #2
 8001ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8ed 	bl	8001cd6 <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8e0 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8ef 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d122      	bne.n	8001b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d11b      	bne.n	8001b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0204 	mvn.w	r2, #4
 8001b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8c3 	bl	8001cd6 <HAL_TIM_IC_CaptureCallback>
 8001b50:	e005      	b.n	8001b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8b6 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8c5 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d122      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0208 	mvn.w	r2, #8
 8001b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f899 	bl	8001cd6 <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e005      	b.n	8001bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f88c 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f89b 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d122      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d11b      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0210 	mvn.w	r2, #16
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2208      	movs	r2, #8
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f86f 	bl	8001cd6 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f862 	bl	8001cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f871 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10e      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0201 	mvn.w	r2, #1
 8001c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fe16 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	2b80      	cmp	r3, #128	; 0x80
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c50:	2b80      	cmp	r3, #128	; 0x80
 8001c52:	d107      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8bf 	bl	8001de2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b40      	cmp	r3, #64	; 0x40
 8001c7e:	d107      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f835 	bl	8001cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d107      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0220 	mvn.w	r2, #32
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f88a 	bl	8001dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <TIM_Base_SetConfig+0xb8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00b      	beq.n	8001d3c <TIM_Base_SetConfig+0x30>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2a:	d007      	beq.n	8001d3c <TIM_Base_SetConfig+0x30>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <TIM_Base_SetConfig+0xbc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d003      	beq.n	8001d3c <TIM_Base_SetConfig+0x30>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <TIM_Base_SetConfig+0xc0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d108      	bne.n	8001d4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <TIM_Base_SetConfig+0xb8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <TIM_Base_SetConfig+0xbc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0x62>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <TIM_Base_SetConfig+0xc0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <TIM_Base_SetConfig+0xb8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d103      	bne.n	8001db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	615a      	str	r2, [r3, #20]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e03f      	b.n	8001e86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fd6c 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f9a3 	bl	8002184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b08a      	sub	sp, #40	; 0x28
 8001e92:	af02      	add	r7, sp, #8
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d17c      	bne.n	8001fa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_UART_Transmit+0x2c>
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e075      	b.n	8001faa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_UART_Transmit+0x3e>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e06e      	b.n	8001faa <HAL_UART_Transmit+0x11c>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2221      	movs	r2, #33	; 0x21
 8001ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ee2:	f7fe fe59 	bl	8000b98 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	88fa      	ldrh	r2, [r7, #6]
 8001ef2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d108      	bne.n	8001f10 <HAL_UART_Transmit+0x82>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d104      	bne.n	8001f10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e003      	b.n	8001f18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f20:	e02a      	b.n	8001f78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f8df 	bl	80020f0 <UART_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e036      	b.n	8001faa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10b      	bne.n	8001f5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	3302      	adds	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	e007      	b.n	8001f6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1cf      	bne.n	8001f22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2140      	movs	r1, #64	; 0x40
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f8af 	bl	80020f0 <UART_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e006      	b.n	8001faa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fa8:	2302      	movs	r3, #2
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b08a      	sub	sp, #40	; 0x28
 8001fb6:	af02      	add	r7, sp, #8
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	f040 8089 	bne.w	80020e6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_UART_Receive+0x2e>
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e081      	b.n	80020e8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Receive+0x40>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e07a      	b.n	80020e8 <HAL_UART_Receive+0x136>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2222      	movs	r2, #34	; 0x22
 8002004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002008:	f7fe fdc6 	bl	8000b98 <HAL_GetTick>
 800200c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002022:	d108      	bne.n	8002036 <HAL_UART_Receive+0x84>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	e003      	b.n	800203e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002046:	e043      	b.n	80020d0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2200      	movs	r2, #0
 8002050:	2120      	movs	r1, #32
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f84c 	bl	80020f0 <UART_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e042      	b.n	80020e8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10c      	bne.n	8002082 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002074:	b29a      	uxth	r2, r3
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	3302      	adds	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	e01f      	b.n	80020c2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208a:	d007      	beq.n	800209c <HAL_UART_Receive+0xea>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <HAL_UART_Receive+0xf8>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e008      	b.n	80020bc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3301      	adds	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1b6      	bne.n	8002048 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002100:	e02c      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d028      	beq.n	800215c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <UART_WaitOnFlagUntilTimeout+0x30>
 8002110:	f7fe fd42 	bl	8000b98 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	429a      	cmp	r2, r3
 800211e:	d21d      	bcs.n	800215c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800212e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e00f      	b.n	800217c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	429a      	cmp	r2, r3
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	429a      	cmp	r2, r3
 8002178:	d0c3      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021be:	f023 030c 	bic.w	r3, r3, #12
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <UART_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021ec:	f7ff fb56 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	e002      	b.n	80021fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021f4:	f7ff fb3e 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 80021f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009a      	lsls	r2, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <UART_SetConfig+0x118>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	0119      	lsls	r1, r3, #4
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <UART_SetConfig+0x118>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	4419      	add	r1, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <UART_SetConfig+0x118>)
 800226a:	fba3 0302 	umull	r0, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <UART_SetConfig+0x118>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	440a      	add	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40013800 	.word	0x40013800
 800229c:	51eb851f 	.word	0x51eb851f

080022a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a6:	f3ef 8305 	mrs	r3, IPSR
 80022aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80022ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8310 	mrs	r3, PRIMASK
 80022b6:	607b      	str	r3, [r7, #4]
  return(result);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <osKernelInitialize+0x32>
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <osKernelInitialize+0x60>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d109      	bne.n	80022da <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022c6:	f3ef 8311 	mrs	r3, BASEPRI
 80022ca:	603b      	str	r3, [r7, #0]
  return(result);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80022d2:	f06f 0305 	mvn.w	r3, #5
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e00c      	b.n	80022f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <osKernelInitialize+0x60>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <osKernelInitialize+0x60>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e002      	b.n	80022f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000040 	.word	0x20000040

08002304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800230a:	f3ef 8305 	mrs	r3, IPSR
 800230e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002310:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002316:	f3ef 8310 	mrs	r3, PRIMASK
 800231a:	607b      	str	r3, [r7, #4]
  return(result);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <osKernelStart+0x32>
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <osKernelStart+0x64>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d109      	bne.n	800233e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800232a:	f3ef 8311 	mrs	r3, BASEPRI
 800232e:	603b      	str	r3, [r7, #0]
  return(result);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002336:	f06f 0305 	mvn.w	r3, #5
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e00e      	b.n	800235c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <osKernelStart+0x64>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <osKernelStart+0x64>)
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800234c:	f001 f864 	bl	8003418 <vTaskStartScheduler>
      stat = osOK;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e002      	b.n	800235c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000040 	.word	0x20000040

0800236c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b092      	sub	sp, #72	; 0x48
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237c:	f3ef 8305 	mrs	r3, IPSR
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 8094 	bne.w	80024b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238a:	f3ef 8310 	mrs	r3, PRIMASK
 800238e:	623b      	str	r3, [r7, #32]
  return(result);
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 808d 	bne.w	80024b2 <osThreadNew+0x146>
 8002398:	4b48      	ldr	r3, [pc, #288]	; (80024bc <osThreadNew+0x150>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d106      	bne.n	80023ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023a0:	f3ef 8311 	mrs	r3, BASEPRI
 80023a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 8082 	bne.w	80024b2 <osThreadNew+0x146>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d07e      	beq.n	80024b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80023b8:	2318      	movs	r3, #24
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80023bc:	2300      	movs	r3, #0
 80023be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80023c0:	f107 031b 	add.w	r3, r7, #27
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d045      	beq.n	800245e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <osThreadNew+0x74>
        name = attr->name;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <osThreadNew+0x9a>
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	2b38      	cmp	r3, #56	; 0x38
 80023f8:	d805      	bhi.n	8002406 <osThreadNew+0x9a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <osThreadNew+0x9e>
        return (NULL);
 8002406:	2300      	movs	r3, #0
 8002408:	e054      	b.n	80024b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <osThreadNew+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b5b      	cmp	r3, #91	; 0x5b
 8002428:	d90a      	bls.n	8002440 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <osThreadNew+0xd4>
        mem = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	e010      	b.n	8002462 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10c      	bne.n	8002462 <osThreadNew+0xf6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <osThreadNew+0xf6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <osThreadNew+0xf6>
          mem = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
 800245c:	e001      	b.n	8002462 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	2b01      	cmp	r3, #1
 8002466:	d110      	bne.n	800248a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fe02 	bl	8003088 <xTaskCreateStatic>
 8002484:	4603      	mov	r3, r0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e013      	b.n	80024b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d110      	bne.n	80024b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	b29a      	uxth	r2, r3
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fe49 	bl	800313a <xTaskCreate>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <osThreadNew+0x146>
          hTask = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024b2:	697b      	ldr	r3, [r7, #20]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3738      	adds	r7, #56	; 0x38
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000040 	.word	0x20000040

080024c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024c8:	f3ef 8305 	mrs	r3, IPSR
 80024cc:	613b      	str	r3, [r7, #16]
  return(result);
 80024ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d4:	f3ef 8310 	mrs	r3, PRIMASK
 80024d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <osDelay+0x34>
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <osDelay+0x58>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d109      	bne.n	80024fc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024e8:	f3ef 8311 	mrs	r3, BASEPRI
 80024ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <osDelay+0x3c>
    stat = osErrorISR;
 80024f4:	f06f 0305 	mvn.w	r3, #5
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e007      	b.n	800250c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 ff52 	bl	80033b0 <vTaskDelay>
    }
  }

  return (stat);
 800250c:	697b      	ldr	r3, [r7, #20]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000040 	.word	0x20000040

0800251c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a06      	ldr	r2, [pc, #24]	; (8002544 <vApplicationGetIdleTaskMemory+0x28>)
 800252c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4a05      	ldr	r2, [pc, #20]	; (8002548 <vApplicationGetIdleTaskMemory+0x2c>)
 8002532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000044 	.word	0x20000044
 8002548:	200000a0 	.word	0x200000a0

0800254c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a07      	ldr	r2, [pc, #28]	; (8002578 <vApplicationGetTimerTaskMemory+0x2c>)
 800255c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <vApplicationGetTimerTaskMemory+0x30>)
 8002562:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	200002a0 	.word	0x200002a0
 800257c:	200002fc 	.word	0x200002fc

08002580 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f103 0208 	add.w	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f103 0208 	add.w	r2, r3, #8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f103 0208 	add.w	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	601a      	str	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d103      	bne.n	800263c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e00c      	b.n	8002656 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3308      	adds	r3, #8
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e002      	b.n	800264a <vListInsert+0x2e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d2f6      	bcs.n	8002644 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6852      	ldr	r2, [r2, #4]
 80026ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d103      	bne.n	80026c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	e7fe      	b.n	8002706 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002708:	f001 ff96 	bl	8004638 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	441a      	add	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	3b01      	subs	r3, #1
 800273a:	68f9      	ldr	r1, [r7, #12]
 800273c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	441a      	add	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d114      	bne.n	8002788 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01a      	beq.n	800279c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3310      	adds	r3, #16
 800276a:	4618      	mov	r0, r3
 800276c:	f001 f8d8 	bl	8003920 <xTaskRemoveFromEventList>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <xQueueGenericReset+0xcc>)
 8002778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	e009      	b.n	800279c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3310      	adds	r3, #16
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fef7 	bl	8002580 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3324      	adds	r3, #36	; 0x24
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fef2 	bl	8002580 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800279c:	f001 ff7a 	bl	8004694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000ed04 	.word	0xe000ed04

080027b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <xQueueGenericCreateStatic+0x28>
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d6:	e7fe      	b.n	80027d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <xQueueGenericCreateStatic+0x42>
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <xQueueGenericCreateStatic+0x4e>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <xQueueGenericCreateStatic+0x52>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <xQueueGenericCreateStatic+0x54>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <xQueueGenericCreateStatic+0x6c>
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	e7fe      	b.n	800281a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <xQueueGenericCreateStatic+0x78>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <xQueueGenericCreateStatic+0x7c>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <xQueueGenericCreateStatic+0x7e>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <xQueueGenericCreateStatic+0x96>
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	e7fe      	b.n	8002844 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002846:	2350      	movs	r3, #80	; 0x50
 8002848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d009      	beq.n	8002864 <xQueueGenericCreateStatic+0xb4>
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e7fe      	b.n	8002862 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002876:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f805 	bl	8002894 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800288c:	4618      	mov	r0, r3
 800288e:	3730      	adds	r7, #48	; 0x30
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e002      	b.n	80028b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028c2:	2101      	movs	r1, #1
 80028c4:	69b8      	ldr	r0, [r7, #24]
 80028c6:	f7ff ff0b 	bl	80026e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <xQueueGenericSend+0x30>
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	e7fe      	b.n	800290a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <xQueueGenericSend+0x3e>
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <xQueueGenericSend+0x42>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericSend+0x44>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <xQueueGenericSend+0x5c>
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e7fe      	b.n	8002936 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d103      	bne.n	8002946 <xQueueGenericSend+0x6a>
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <xQueueGenericSend+0x6e>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <xQueueGenericSend+0x70>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <xQueueGenericSend+0x88>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	e7fe      	b.n	8002962 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002964:	f001 f996 	bl	8003c94 <xTaskGetSchedulerState>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <xQueueGenericSend+0x98>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <xQueueGenericSend+0x9c>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <xQueueGenericSend+0x9e>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <xQueueGenericSend+0xb6>
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	e7fe      	b.n	8002990 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002992:	f001 fe51 	bl	8004638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <xQueueGenericSend+0xcc>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d129      	bne.n	80029fc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ae:	f000 f9ff 	bl	8002db0 <prvCopyDataToQueue>
 80029b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d010      	beq.n	80029de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	3324      	adds	r3, #36	; 0x24
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 ffad 	bl	8003920 <xTaskRemoveFromEventList>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <xQueueGenericSend+0x1f0>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	e00a      	b.n	80029f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <xQueueGenericSend+0x1f0>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029f4:	f001 fe4e 	bl	8004694 <vPortExitCritical>
				return pdPASS;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e063      	b.n	8002ac4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a02:	f001 fe47 	bl	8004694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e05c      	b.n	8002ac4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 ffe5 	bl	80039e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a1e:	f001 fe39 	bl	8004694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a22:	f000 fd5d 	bl	80034e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a26:	f001 fe07 	bl	8004638 <vPortEnterCritical>
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d103      	bne.n	8002a40 <xQueueGenericSend+0x164>
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d103      	bne.n	8002a56 <xQueueGenericSend+0x17a>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a56:	f001 fe1d 	bl	8004694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a5a:	1d3a      	adds	r2, r7, #4
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ffd4 	bl	8003a10 <xTaskCheckForTimeOut>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d124      	bne.n	8002ab8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a70:	f000 fa96 	bl	8002fa0 <prvIsQueueFull>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	3310      	adds	r3, #16
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fefe 	bl	8003884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a8a:	f000 fa21 	bl	8002ed0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a8e:	f000 fd35 	bl	80034fc <xTaskResumeAll>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f af7c 	bne.w	8002992 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <xQueueGenericSend+0x1f0>)
 8002a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	e772      	b.n	8002992 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aae:	f000 fa0f 	bl	8002ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ab2:	f000 fd23 	bl	80034fc <xTaskResumeAll>
 8002ab6:	e76c      	b.n	8002992 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aba:	f000 fa09 	bl	8002ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002abe:	f000 fd1d 	bl	80034fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ac2:	2300      	movs	r3, #0
		}
	}
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3738      	adds	r7, #56	; 0x38
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	e000ed04 	.word	0xe000ed04

08002ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <xQueueGenericSendFromISR+0x2c>
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e7fe      	b.n	8002afa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <xQueueGenericSendFromISR+0x3a>
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <xQueueGenericSendFromISR+0x3e>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueGenericSendFromISR+0x40>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <xQueueGenericSendFromISR+0x58>
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	e7fe      	b.n	8002b26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d103      	bne.n	8002b36 <xQueueGenericSendFromISR+0x66>
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <xQueueGenericSendFromISR+0x6a>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <xQueueGenericSendFromISR+0x6c>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <xQueueGenericSendFromISR+0x84>
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e7fe      	b.n	8002b52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b54:	f001 fe2a 	bl	80047ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b58:	f3ef 8211 	mrs	r2, BASEPRI
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	61ba      	str	r2, [r7, #24]
 8002b6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <xQueueGenericSendFromISR+0xb6>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d12c      	bne.n	8002be0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b96:	f000 f90b 	bl	8002db0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d112      	bne.n	8002bca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	3324      	adds	r3, #36	; 0x24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 feb5 	bl	8003920 <xTaskRemoveFromEventList>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00e      	beq.n	8002bda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e007      	b.n	8002bda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	b25a      	sxtb	r2, r3
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002bde:	e001      	b.n	8002be4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3738      	adds	r7, #56	; 0x38
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <xQueueReceive+0x2e>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	e7fe      	b.n	8002c24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <xQueueReceive+0x3c>
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <xQueueReceive+0x40>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <xQueueReceive+0x42>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <xQueueReceive+0x5a>
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	e7fe      	b.n	8002c50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c52:	f001 f81f 	bl	8003c94 <xTaskGetSchedulerState>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <xQueueReceive+0x6a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <xQueueReceive+0x6e>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <xQueueReceive+0x70>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <xQueueReceive+0x88>
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e7fe      	b.n	8002c7e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c80:	f001 fcda 	bl	8004638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01f      	beq.n	8002cd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c94:	f000 f8f6 	bl	8002e84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1e5a      	subs	r2, r3, #1
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00f      	beq.n	8002cc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	3310      	adds	r3, #16
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fe37 	bl	8003920 <xTaskRemoveFromEventList>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <xQueueReceive+0x1b4>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cc8:	f001 fce4 	bl	8004694 <vPortExitCritical>
				return pdPASS;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e069      	b.n	8002da4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cd6:	f001 fcdd 	bl	8004694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e062      	b.n	8002da4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fe7b 	bl	80039e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cf2:	f001 fccf 	bl	8004694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cf6:	f000 fbf3 	bl	80034e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cfa:	f001 fc9d 	bl	8004638 <vPortEnterCritical>
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d103      	bne.n	8002d14 <xQueueReceive+0x11c>
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d103      	bne.n	8002d2a <xQueueReceive+0x132>
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d2a:	f001 fcb3 	bl	8004694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d2e:	1d3a      	adds	r2, r7, #4
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fe6a 	bl	8003a10 <xTaskCheckForTimeOut>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d123      	bne.n	8002d8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d44:	f000 f916 	bl	8002f74 <prvIsQueueEmpty>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	3324      	adds	r3, #36	; 0x24
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fd94 	bl	8003884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d5e:	f000 f8b7 	bl	8002ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d62:	f000 fbcb 	bl	80034fc <xTaskResumeAll>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d189      	bne.n	8002c80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <xQueueReceive+0x1b4>)
 8002d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	e780      	b.n	8002c80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d80:	f000 f8a6 	bl	8002ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d84:	f000 fbba 	bl	80034fc <xTaskResumeAll>
 8002d88:	e77a      	b.n	8002c80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8c:	f000 f8a0 	bl	8002ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d90:	f000 fbb4 	bl	80034fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d96:	f000 f8ed 	bl	8002f74 <prvIsQueueEmpty>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f43f af6f 	beq.w	8002c80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002da2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3730      	adds	r7, #48	; 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d14d      	bne.n	8002e72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ff78 	bl	8003cd0 <xTaskPriorityDisinherit>
 8002de0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	e043      	b.n	8002e72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d119      	bne.n	8002e24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6898      	ldr	r0, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	f001 ff0a 	bl	8004c14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d32b      	bcc.n	8002e72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	e026      	b.n	8002e72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68d8      	ldr	r0, [r3, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	f001 fef0 	bl	8004c14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	425b      	negs	r3, r3
 8002e3e:	441a      	add	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	425b      	negs	r3, r3
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d105      	bne.n	8002e72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e7a:	697b      	ldr	r3, [r7, #20]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d303      	bcc.n	8002eb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6838      	ldr	r0, [r7, #0]
 8002ec4:	f001 fea6 	bl	8004c14 <memcpy>
	}
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ed8:	f001 fbae 	bl	8004638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ee2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee4:	e011      	b.n	8002f0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3324      	adds	r3, #36	; 0x24
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fd14 	bl	8003920 <xTaskRemoveFromEventList>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002efe:	f000 fde7 	bl	8003ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	dce9      	bgt.n	8002ee6 <prvUnlockQueue+0x16>
 8002f12:	e000      	b.n	8002f16 <prvUnlockQueue+0x46>
					break;
 8002f14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	22ff      	movs	r2, #255	; 0xff
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f1e:	f001 fbb9 	bl	8004694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f22:	f001 fb89 	bl	8004638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f2e:	e011      	b.n	8002f54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fcef 	bl	8003920 <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f48:	f000 fdc2 	bl	8003ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	dce9      	bgt.n	8002f30 <prvUnlockQueue+0x60>
 8002f5c:	e000      	b.n	8002f60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	22ff      	movs	r2, #255	; 0xff
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f68:	f001 fb94 	bl	8004694 <vPortExitCritical>
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f7c:	f001 fb5c 	bl	8004638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e001      	b.n	8002f92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f92:	f001 fb7f 	bl	8004694 <vPortExitCritical>

	return xReturn;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa8:	f001 fb46 	bl	8004638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d102      	bne.n	8002fbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e001      	b.n	8002fc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f001 fb67 	bl	8004694 <vPortExitCritical>

	return xReturn;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e014      	b.n	800300a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fe0:	4a0e      	ldr	r2, [pc, #56]	; (800301c <vQueueAddToRegistry+0x4c>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fec:	490b      	ldr	r1, [pc, #44]	; (800301c <vQueueAddToRegistry+0x4c>)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <vQueueAddToRegistry+0x4c>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003002:	e005      	b.n	8003010 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b07      	cmp	r3, #7
 800300e:	d9e7      	bls.n	8002fe0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20001b00 	.word	0x20001b00

08003020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003030:	f001 fb02 	bl	8004638 <vPortEnterCritical>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800303a:	b25b      	sxtb	r3, r3
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d103      	bne.n	800304a <vQueueWaitForMessageRestricted+0x2a>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003050:	b25b      	sxtb	r3, r3
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d103      	bne.n	8003060 <vQueueWaitForMessageRestricted+0x40>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003060:	f001 fb18 	bl	8004694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3324      	adds	r3, #36	; 0x24
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fc29 	bl	80038cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff28 	bl	8002ed0 <prvUnlockQueue>
	}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08e      	sub	sp, #56	; 0x38
 800308c:	af04      	add	r7, sp, #16
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <xTaskCreateStatic+0x28>
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	623b      	str	r3, [r7, #32]
 80030ae:	e7fe      	b.n	80030ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <xTaskCreateStatic+0x42>
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e7fe      	b.n	80030c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030ca:	235c      	movs	r3, #92	; 0x5c
 80030cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b5c      	cmp	r3, #92	; 0x5c
 80030d2:	d009      	beq.n	80030e8 <xTaskCreateStatic+0x60>
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e7fe      	b.n	80030e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01e      	beq.n	800312c <xTaskCreateStatic+0xa4>
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2202      	movs	r2, #2
 8003102:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003106:	2300      	movs	r3, #0
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f850 	bl	80031c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003126:	f000 f8d3 	bl	80032d0 <prvAddNewTaskToReadyList>
 800312a:	e001      	b.n	8003130 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003130:	697b      	ldr	r3, [r7, #20]
	}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800313a:	b580      	push	{r7, lr}
 800313c:	b08c      	sub	sp, #48	; 0x30
 800313e:	af04      	add	r7, sp, #16
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f001 fb68 	bl	8004824 <pvPortMalloc>
 8003154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800315c:	205c      	movs	r0, #92	; 0x5c
 800315e:	f001 fb61 	bl	8004824 <pvPortMalloc>
 8003162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	e005      	b.n	800317e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f001 fc18 	bl	80049a8 <vPortFree>
 8003178:	e001      	b.n	800317e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	2300      	movs	r3, #0
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	9302      	str	r3, [sp, #8]
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f80e 	bl	80031c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a8:	69f8      	ldr	r0, [r7, #28]
 80031aa:	f000 f891 	bl	80032d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e002      	b.n	80031ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031ba:	69bb      	ldr	r3, [r7, #24]
	}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	461a      	mov	r2, r3
 80031dc:	21a5      	movs	r1, #165	; 0xa5
 80031de:	f001 fd24 	bl	8004c2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	3b01      	subs	r3, #1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f023 0307 	bic.w	r3, r3, #7
 80031fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <prvInitialiseNewTask+0x56>
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e7fe      	b.n	8003218 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	e012      	b.n	8003246 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	7819      	ldrb	r1, [r3, #0]
 8003228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	3334      	adds	r3, #52	; 0x34
 8003230:	460a      	mov	r2, r1
 8003232:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d9e9      	bls.n	8003220 <prvInitialiseNewTask+0x5c>
 800324c:	e000      	b.n	8003250 <prvInitialiseNewTask+0x8c>
		{
			break;
 800324e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2b37      	cmp	r3, #55	; 0x37
 800325c:	d901      	bls.n	8003262 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800325e:	2337      	movs	r3, #55	; 0x37
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	3304      	adds	r3, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff f9a0 	bl	80025be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	3318      	adds	r3, #24
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f99b 	bl	80025be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	2200      	movs	r2, #0
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	69b8      	ldr	r0, [r7, #24]
 80032b2:	f001 f8d7 	bl	8004464 <pxPortInitialiseStack>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032c8:	bf00      	nop
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032d8:	f001 f9ae 	bl	8004638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032dc:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <prvAddNewTaskToReadyList+0xc4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <prvAddNewTaskToReadyList+0xc4>)
 80032e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <prvAddNewTaskToReadyList+0xc8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032ee:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <prvAddNewTaskToReadyList+0xc8>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <prvAddNewTaskToReadyList+0xc4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d110      	bne.n	800331e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032fc:	f000 fc0c 	bl	8003b18 <prvInitialiseTaskLists>
 8003300:	e00d      	b.n	800331e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <prvAddNewTaskToReadyList+0xcc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <prvAddNewTaskToReadyList+0xc8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	429a      	cmp	r2, r3
 8003316:	d802      	bhi.n	800331e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003318:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <prvAddNewTaskToReadyList+0xc8>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <prvAddNewTaskToReadyList+0xd0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	4a1e      	ldr	r2, [pc, #120]	; (80033a0 <prvAddNewTaskToReadyList+0xd0>)
 8003326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <prvAddNewTaskToReadyList+0xd0>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <prvAddNewTaskToReadyList+0xd4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d903      	bls.n	8003344 <prvAddNewTaskToReadyList+0x74>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <prvAddNewTaskToReadyList+0xd4>)
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <prvAddNewTaskToReadyList+0xd8>)
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f7ff f93b 	bl	80025d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003360:	f001 f998 	bl	8004694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <prvAddNewTaskToReadyList+0xcc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <prvAddNewTaskToReadyList+0xc8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	429a      	cmp	r2, r3
 8003378:	d207      	bcs.n	800338a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <prvAddNewTaskToReadyList+0xdc>)
 800337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000bd0 	.word	0x20000bd0
 8003398:	200006fc 	.word	0x200006fc
 800339c:	20000bdc 	.word	0x20000bdc
 80033a0:	20000bec 	.word	0x20000bec
 80033a4:	20000bd8 	.word	0x20000bd8
 80033a8:	20000700 	.word	0x20000700
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <vTaskDelay+0x60>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <vTaskDelay+0x2e>
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	e7fe      	b.n	80033dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033de:	f000 f87f 	bl	80034e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033e2:	2100      	movs	r1, #0
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fcdf 	bl	8003da8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033ea:	f000 f887 	bl	80034fc <xTaskResumeAll>
 80033ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d107      	bne.n	8003406 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <vTaskDelay+0x64>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000bf8 	.word	0x20000bf8
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003426:	463a      	mov	r2, r7
 8003428:	1d39      	adds	r1, r7, #4
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f874 	bl	800251c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2300      	movs	r3, #0
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	460a      	mov	r2, r1
 8003446:	4920      	ldr	r1, [pc, #128]	; (80034c8 <vTaskStartScheduler+0xb0>)
 8003448:	4820      	ldr	r0, [pc, #128]	; (80034cc <vTaskStartScheduler+0xb4>)
 800344a:	f7ff fe1d 	bl	8003088 <xTaskCreateStatic>
 800344e:	4602      	mov	r2, r0
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <vTaskStartScheduler+0xb8>)
 8003452:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <vTaskStartScheduler+0xb8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e001      	b.n	8003466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800346c:	f000 fcf0 	bl	8003e50 <xTimerCreateTimerTask>
 8003470:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d115      	bne.n	80034a4 <vTaskStartScheduler+0x8c>
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <vTaskStartScheduler+0xbc>)
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <vTaskStartScheduler+0xc0>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <vTaskStartScheduler+0xc4>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800349e:	f001 f85b 	bl	8004558 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034a2:	e00d      	b.n	80034c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d109      	bne.n	80034c0 <vTaskStartScheduler+0xa8>
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e7fe      	b.n	80034be <vTaskStartScheduler+0xa6>
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	08004ce8 	.word	0x08004ce8
 80034cc:	08003ae9 	.word	0x08003ae9
 80034d0:	20000bf4 	.word	0x20000bf4
 80034d4:	20000bf0 	.word	0x20000bf0
 80034d8:	20000bdc 	.word	0x20000bdc
 80034dc:	20000bd4 	.word	0x20000bd4

080034e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <vTaskSuspendAll+0x18>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a03      	ldr	r2, [pc, #12]	; (80034f8 <vTaskSuspendAll+0x18>)
 80034ec:	6013      	str	r3, [r2, #0]
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000bf8 	.word	0x20000bf8

080034fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800350a:	4b41      	ldr	r3, [pc, #260]	; (8003610 <xTaskResumeAll+0x114>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <xTaskResumeAll+0x2a>
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	e7fe      	b.n	8003524 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003526:	f001 f887 	bl	8004638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <xTaskResumeAll+0x114>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3b01      	subs	r3, #1
 8003530:	4a37      	ldr	r2, [pc, #220]	; (8003610 <xTaskResumeAll+0x114>)
 8003532:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <xTaskResumeAll+0x114>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d162      	bne.n	8003602 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <xTaskResumeAll+0x118>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05e      	beq.n	8003602 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003544:	e02f      	b.n	80035a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003546:	4b34      	ldr	r3, [pc, #208]	; (8003618 <xTaskResumeAll+0x11c>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3318      	adds	r3, #24
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f89a 	bl	800268c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3304      	adds	r3, #4
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f895 	bl	800268c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <xTaskResumeAll+0x120>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d903      	bls.n	8003576 <xTaskResumeAll+0x7a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a2a      	ldr	r2, [pc, #168]	; (800361c <xTaskResumeAll+0x120>)
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a27      	ldr	r2, [pc, #156]	; (8003620 <xTaskResumeAll+0x124>)
 8003584:	441a      	add	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3304      	adds	r3, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f7ff f822 	bl	80025d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <xTaskResumeAll+0x128>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <xTaskResumeAll+0x12c>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <xTaskResumeAll+0x11c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1cb      	bne.n	8003546 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035b4:	f000 fb4a 	bl	8003c4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <xTaskResumeAll+0x130>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035c4:	f000 f844 	bl	8003650 <xTaskIncrementTick>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <xTaskResumeAll+0x12c>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f1      	bne.n	80035c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <xTaskResumeAll+0x130>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <xTaskResumeAll+0x12c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <xTaskResumeAll+0x134>)
 80035f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003602:	f001 f847 	bl	8004694 <vPortExitCritical>

	return xAlreadyYielded;
 8003606:	68bb      	ldr	r3, [r7, #8]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000bf8 	.word	0x20000bf8
 8003614:	20000bd0 	.word	0x20000bd0
 8003618:	20000b90 	.word	0x20000b90
 800361c:	20000bd8 	.word	0x20000bd8
 8003620:	20000700 	.word	0x20000700
 8003624:	200006fc 	.word	0x200006fc
 8003628:	20000be4 	.word	0x20000be4
 800362c:	20000be0 	.word	0x20000be0
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <xTaskGetTickCount+0x18>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003640:	687b      	ldr	r3, [r7, #4]
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	20000bd4 	.word	0x20000bd4

08003650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <xTaskIncrementTick+0x150>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 808d 	bne.w	800377e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003664:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <xTaskIncrementTick+0x154>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <xTaskIncrementTick+0x154>)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11f      	bne.n	80036b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <xTaskIncrementTick+0x158>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <xTaskIncrementTick+0x46>
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	e7fe      	b.n	8003694 <xTaskIncrementTick+0x44>
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <xTaskIncrementTick+0x158>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <xTaskIncrementTick+0x15c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <xTaskIncrementTick+0x158>)
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4a41      	ldr	r2, [pc, #260]	; (80037ac <xTaskIncrementTick+0x15c>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <xTaskIncrementTick+0x160>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <xTaskIncrementTick+0x160>)
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	f000 faca 	bl	8003c4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036b8:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <xTaskIncrementTick+0x164>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d34e      	bcc.n	8003760 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <xTaskIncrementTick+0x158>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <xTaskIncrementTick+0x80>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <xTaskIncrementTick+0x82>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <xTaskIncrementTick+0x164>)
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	601a      	str	r2, [r3, #0]
					break;
 80036de:	e03f      	b.n	8003760 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <xTaskIncrementTick+0x158>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d203      	bcs.n	8003700 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036f8:	4a2e      	ldr	r2, [pc, #184]	; (80037b4 <xTaskIncrementTick+0x164>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
						break;
 80036fe:	e02f      	b.n	8003760 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3304      	adds	r3, #4
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe ffc1 	bl	800268c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3318      	adds	r3, #24
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe ffb8 	bl	800268c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <xTaskIncrementTick+0x168>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d903      	bls.n	8003730 <xTaskIncrementTick+0xe0>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <xTaskIncrementTick+0x168>)
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <xTaskIncrementTick+0x16c>)
 800373e:	441a      	add	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f7fe ff45 	bl	80025d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <xTaskIncrementTick+0x170>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	429a      	cmp	r2, r3
 8003758:	d3b3      	bcc.n	80036c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800375a:	2301      	movs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800375e:	e7b0      	b.n	80036c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <xTaskIncrementTick+0x170>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4915      	ldr	r1, [pc, #84]	; (80037bc <xTaskIncrementTick+0x16c>)
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d907      	bls.n	8003788 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e004      	b.n	8003788 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <xTaskIncrementTick+0x174>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <xTaskIncrementTick+0x174>)
 8003786:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <xTaskIncrementTick+0x178>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003794:	697b      	ldr	r3, [r7, #20]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000bf8 	.word	0x20000bf8
 80037a4:	20000bd4 	.word	0x20000bd4
 80037a8:	20000b88 	.word	0x20000b88
 80037ac:	20000b8c 	.word	0x20000b8c
 80037b0:	20000be8 	.word	0x20000be8
 80037b4:	20000bf0 	.word	0x20000bf0
 80037b8:	20000bd8 	.word	0x20000bd8
 80037bc:	20000700 	.word	0x20000700
 80037c0:	200006fc 	.word	0x200006fc
 80037c4:	20000be0 	.word	0x20000be0
 80037c8:	20000be4 	.word	0x20000be4

080037cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <vTaskSwitchContext+0xa4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <vTaskSwitchContext+0xa8>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037e0:	e040      	b.n	8003864 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <vTaskSwitchContext+0xa8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <vTaskSwitchContext+0xac>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	e00f      	b.n	8003810 <vTaskSwitchContext+0x44>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <vTaskSwitchContext+0x3e>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	e7fe      	b.n	8003808 <vTaskSwitchContext+0x3c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3b01      	subs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	491a      	ldr	r1, [pc, #104]	; (800387c <vTaskSwitchContext+0xb0>)
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0e5      	beq.n	80037f0 <vTaskSwitchContext+0x24>
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <vTaskSwitchContext+0xb0>)
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3308      	adds	r3, #8
 8003846:	429a      	cmp	r2, r3
 8003848:	d104      	bne.n	8003854 <vTaskSwitchContext+0x88>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <vTaskSwitchContext+0xb4>)
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4a06      	ldr	r2, [pc, #24]	; (8003878 <vTaskSwitchContext+0xac>)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000bf8 	.word	0x20000bf8
 8003874:	20000be4 	.word	0x20000be4
 8003878:	20000bd8 	.word	0x20000bd8
 800387c:	20000700 	.word	0x20000700
 8003880:	200006fc 	.word	0x200006fc

08003884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d109      	bne.n	80038a8 <vTaskPlaceOnEventList+0x24>
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e7fe      	b.n	80038a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <vTaskPlaceOnEventList+0x44>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3318      	adds	r3, #24
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fe feb3 	bl	800261c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038b6:	2101      	movs	r1, #1
 80038b8:	6838      	ldr	r0, [r7, #0]
 80038ba:	f000 fa75 	bl	8003da8 <prvAddCurrentTaskToDelayedList>
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200006fc 	.word	0x200006fc

080038cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <vTaskPlaceOnEventListRestricted+0x26>
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e7fe      	b.n	80038f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <vTaskPlaceOnEventListRestricted+0x50>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3318      	adds	r3, #24
 80038f8:	4619      	mov	r1, r3
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7fe fe6b 	bl	80025d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68b8      	ldr	r0, [r7, #8]
 8003910:	f000 fa4a 	bl	8003da8 <prvAddCurrentTaskToDelayedList>
	}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200006fc 	.word	0x200006fc

08003920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <xTaskRemoveFromEventList+0x2a>
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e7fe      	b.n	8003948 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3318      	adds	r3, #24
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fe9c 	bl	800268c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <xTaskRemoveFromEventList+0xac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11d      	bne.n	8003998 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fe93 	bl	800268c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <xTaskRemoveFromEventList+0xb0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d903      	bls.n	800397a <xTaskRemoveFromEventList+0x5a>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <xTaskRemoveFromEventList+0xb0>)
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <xTaskRemoveFromEventList+0xb4>)
 8003988:	441a      	add	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3304      	adds	r3, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f7fe fe20 	bl	80025d6 <vListInsertEnd>
 8003996:	e005      	b.n	80039a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3318      	adds	r3, #24
 800399c:	4619      	mov	r1, r3
 800399e:	480e      	ldr	r0, [pc, #56]	; (80039d8 <xTaskRemoveFromEventList+0xb8>)
 80039a0:	f7fe fe19 	bl	80025d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <xTaskRemoveFromEventList+0xbc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d905      	bls.n	80039be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <xTaskRemoveFromEventList+0xc0>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e001      	b.n	80039c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000bf8 	.word	0x20000bf8
 80039d0:	20000bd8 	.word	0x20000bd8
 80039d4:	20000700 	.word	0x20000700
 80039d8:	20000b90 	.word	0x20000b90
 80039dc:	200006fc 	.word	0x200006fc
 80039e0:	20000be4 	.word	0x20000be4

080039e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <vTaskInternalSetTimeOutState+0x24>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <vTaskInternalSetTimeOutState+0x28>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	605a      	str	r2, [r3, #4]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000be8 	.word	0x20000be8
 8003a0c:	20000bd4 	.word	0x20000bd4

08003a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <xTaskCheckForTimeOut+0x24>
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e7fe      	b.n	8003a32 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <xTaskCheckForTimeOut+0x3e>
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e7fe      	b.n	8003a4c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a4e:	f000 fdf3 	bl	8004638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <xTaskCheckForTimeOut+0xb8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d102      	bne.n	8003a72 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	e023      	b.n	8003aba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <xTaskCheckForTimeOut+0xbc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d007      	beq.n	8003a8e <xTaskCheckForTimeOut+0x7e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	e015      	b.n	8003aba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d20b      	bcs.n	8003ab0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff9d 	bl	80039e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e004      	b.n	8003aba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003aba:	f000 fdeb 	bl	8004694 <vPortExitCritical>

	return xReturn;
 8003abe:	69fb      	ldr	r3, [r7, #28]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000bd4 	.word	0x20000bd4
 8003acc:	20000be8 	.word	0x20000be8

08003ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <vTaskMissedYield+0x14>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000be4 	.word	0x20000be4

08003ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003af0:	f000 f852 	bl	8003b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <prvIdleTask+0x28>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d9f9      	bls.n	8003af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <prvIdleTask+0x2c>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b0c:	e7f0      	b.n	8003af0 <prvIdleTask+0x8>
 8003b0e:	bf00      	nop
 8003b10:	20000700 	.word	0x20000700
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e00c      	b.n	8003b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <prvInitialiseTaskLists+0x60>)
 8003b30:	4413      	add	r3, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fd24 	bl	8002580 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b37      	cmp	r3, #55	; 0x37
 8003b42:	d9ef      	bls.n	8003b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b44:	480d      	ldr	r0, [pc, #52]	; (8003b7c <prvInitialiseTaskLists+0x64>)
 8003b46:	f7fe fd1b 	bl	8002580 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b4a:	480d      	ldr	r0, [pc, #52]	; (8003b80 <prvInitialiseTaskLists+0x68>)
 8003b4c:	f7fe fd18 	bl	8002580 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b50:	480c      	ldr	r0, [pc, #48]	; (8003b84 <prvInitialiseTaskLists+0x6c>)
 8003b52:	f7fe fd15 	bl	8002580 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b56:	480c      	ldr	r0, [pc, #48]	; (8003b88 <prvInitialiseTaskLists+0x70>)
 8003b58:	f7fe fd12 	bl	8002580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b5c:	480b      	ldr	r0, [pc, #44]	; (8003b8c <prvInitialiseTaskLists+0x74>)
 8003b5e:	f7fe fd0f 	bl	8002580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <prvInitialiseTaskLists+0x78>)
 8003b64:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <prvInitialiseTaskLists+0x64>)
 8003b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <prvInitialiseTaskLists+0x7c>)
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <prvInitialiseTaskLists+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000700 	.word	0x20000700
 8003b7c:	20000b60 	.word	0x20000b60
 8003b80:	20000b74 	.word	0x20000b74
 8003b84:	20000b90 	.word	0x20000b90
 8003b88:	20000ba4 	.word	0x20000ba4
 8003b8c:	20000bbc 	.word	0x20000bbc
 8003b90:	20000b88 	.word	0x20000b88
 8003b94:	20000b8c 	.word	0x20000b8c

08003b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b9e:	e019      	b.n	8003bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ba0:	f000 fd4a 	bl	8004638 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <prvCheckTasksWaitingTermination+0x4c>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fd6b 	bl	800268c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <prvCheckTasksWaitingTermination+0x50>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <prvCheckTasksWaitingTermination+0x50>)
 8003bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <prvCheckTasksWaitingTermination+0x54>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <prvCheckTasksWaitingTermination+0x54>)
 8003bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bca:	f000 fd63 	bl	8004694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f80e 	bl	8003bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <prvCheckTasksWaitingTermination+0x54>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e1      	bne.n	8003ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000ba4 	.word	0x20000ba4
 8003be8:	20000bd0 	.word	0x20000bd0
 8003bec:	20000bb8 	.word	0x20000bb8

08003bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fece 	bl	80049a8 <vPortFree>
				vPortFree( pxTCB );
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fecb 	bl	80049a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c12:	e017      	b.n	8003c44 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d103      	bne.n	8003c26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fec2 	bl	80049a8 <vPortFree>
	}
 8003c24:	e00e      	b.n	8003c44 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d009      	beq.n	8003c44 <prvDeleteTCB+0x54>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e7fe      	b.n	8003c42 <prvDeleteTCB+0x52>
	}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <prvResetNextTaskUnblockTime+0x40>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <prvResetNextTaskUnblockTime+0x14>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <prvResetNextTaskUnblockTime+0x16>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvResetNextTaskUnblockTime+0x44>)
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c6e:	e008      	b.n	8003c82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <prvResetNextTaskUnblockTime+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <prvResetNextTaskUnblockTime+0x44>)
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	20000b88 	.word	0x20000b88
 8003c90:	20000bf0 	.word	0x20000bf0

08003c94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <xTaskGetSchedulerState+0x34>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e008      	b.n	8003cba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <xTaskGetSchedulerState+0x38>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	e001      	b.n	8003cba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cba:	687b      	ldr	r3, [r7, #4]
	}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000bdc 	.word	0x20000bdc
 8003ccc:	20000bf8 	.word	0x20000bf8

08003cd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d054      	beq.n	8003d90 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <xTaskPriorityDisinherit+0xcc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d009      	beq.n	8003d04 <xTaskPriorityDisinherit+0x34>
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e7fe      	b.n	8003d02 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <xTaskPriorityDisinherit+0x50>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	e7fe      	b.n	8003d1e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	1e5a      	subs	r2, r3, #1
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d02c      	beq.n	8003d90 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d128      	bne.n	8003d90 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fca2 	bl	800268c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <xTaskPriorityDisinherit+0xd0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d903      	bls.n	8003d70 <xTaskPriorityDisinherit+0xa0>
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <xTaskPriorityDisinherit+0xd0>)
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <xTaskPriorityDisinherit+0xd4>)
 8003d7e:	441a      	add	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f7fe fc25 	bl	80025d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d90:	697b      	ldr	r3, [r7, #20]
	}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200006fc 	.word	0x200006fc
 8003da0:	20000bd8 	.word	0x20000bd8
 8003da4:	20000700 	.word	0x20000700

08003da8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <prvAddCurrentTaskToDelayedList+0x90>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <prvAddCurrentTaskToDelayedList+0x94>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fc64 	bl	800268c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d10a      	bne.n	8003de2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <prvAddCurrentTaskToDelayedList+0x94>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4819      	ldr	r0, [pc, #100]	; (8003e40 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ddc:	f7fe fbfb 	bl	80025d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003de0:	e026      	b.n	8003e30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <prvAddCurrentTaskToDelayedList+0x94>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d209      	bcs.n	8003e0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f7fe fc08 	bl	800261c <vListInsert>
}
 8003e0c:	e010      	b.n	8003e30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7fe fbfe 	bl	800261c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d202      	bcs.n	8003e30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000bd4 	.word	0x20000bd4
 8003e3c:	200006fc 	.word	0x200006fc
 8003e40:	20000bbc 	.word	0x20000bbc
 8003e44:	20000b8c 	.word	0x20000b8c
 8003e48:	20000b88 	.word	0x20000b88
 8003e4c:	20000bf0 	.word	0x20000bf0

08003e50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e5a:	f000 fac3 	bl	80043e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <xTimerCreateTimerTask+0x80>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d021      	beq.n	8003eaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e6e:	1d3a      	adds	r2, r7, #4
 8003e70:	f107 0108 	add.w	r1, r7, #8
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fb67 	bl	800254c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	9202      	str	r2, [sp, #8]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	460a      	mov	r2, r1
 8003e90:	4910      	ldr	r1, [pc, #64]	; (8003ed4 <xTimerCreateTimerTask+0x84>)
 8003e92:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <xTimerCreateTimerTask+0x88>)
 8003e94:	f7ff f8f8 	bl	8003088 <xTaskCreateStatic>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <xTimerCreateTimerTask+0x8c>)
 8003e9c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <xTimerCreateTimerTask+0x8c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <xTimerCreateTimerTask+0x74>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e7fe      	b.n	8003ec2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003ec4:	697b      	ldr	r3, [r7, #20]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000c2c 	.word	0x20000c2c
 8003ed4:	08004cf0 	.word	0x08004cf0
 8003ed8:	08003ff9 	.word	0x08003ff9
 8003edc:	20000c30 	.word	0x20000c30

08003ee0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <xTimerGenericCommand+0x2c>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	623b      	str	r3, [r7, #32]
 8003f0a:	e7fe      	b.n	8003f0a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <xTimerGenericCommand+0x94>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02a      	beq.n	8003f6a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	dc18      	bgt.n	8003f58 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f26:	f7ff feb5 	bl	8003c94 <xTaskGetSchedulerState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d109      	bne.n	8003f44 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <xTimerGenericCommand+0x94>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	f107 0110 	add.w	r1, r7, #16
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3c:	f7fe fcce 	bl	80028dc <xQueueGenericSend>
 8003f40:	6278      	str	r0, [r7, #36]	; 0x24
 8003f42:	e012      	b.n	8003f6a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <xTimerGenericCommand+0x94>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	f107 0110 	add.w	r1, r7, #16
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f7fe fcc4 	bl	80028dc <xQueueGenericSend>
 8003f54:	6278      	str	r0, [r7, #36]	; 0x24
 8003f56:	e008      	b.n	8003f6a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <xTimerGenericCommand+0x94>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	f107 0110 	add.w	r1, r7, #16
 8003f60:	2300      	movs	r3, #0
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	f7fe fdb4 	bl	8002ad0 <xQueueGenericSendFromISR>
 8003f68:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3728      	adds	r7, #40	; 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000c2c 	.word	0x20000c2c

08003f78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f82:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <prvProcessExpiredTimer+0x7c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fb7b 	bl	800268c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d121      	bne.n	8003fe2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	18d1      	adds	r1, r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f000 f8c8 	bl	8004140 <prvInsertTimerInActiveList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f7ff ff8d 	bl	8003ee0 <xTimerGenericCommand>
 8003fc6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <prvProcessExpiredTimer+0x6a>
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e7fe      	b.n	8003fe0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	6978      	ldr	r0, [r7, #20]
 8003fe8:	4798      	blx	r3
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000c24 	.word	0x20000c24

08003ff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f857 	bl	80040b8 <prvGetNextExpireTime>
 800400a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4619      	mov	r1, r3
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f803 	bl	800401c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004016:	f000 f8d5 	bl	80041c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800401a:	e7f1      	b.n	8004000 <prvTimerTask+0x8>

0800401c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004026:	f7ff fa5b 	bl	80034e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f866 	bl	8004100 <prvSampleTimeNow>
 8004034:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d130      	bne.n	800409e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <prvProcessTimerOrBlockTask+0x3c>
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	429a      	cmp	r2, r3
 8004048:	d806      	bhi.n	8004058 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800404a:	f7ff fa57 	bl	80034fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff91 	bl	8003f78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004056:	e024      	b.n	80040a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvProcessTimerOrBlockTask+0x90>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <prvProcessTimerOrBlockTask+0x94>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	f7fe ffcf 	bl	8003020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004082:	f7ff fa3b 	bl	80034fc <xTaskResumeAll>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <prvProcessTimerOrBlockTask+0x98>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
}
 800409c:	e001      	b.n	80040a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800409e:	f7ff fa2d 	bl	80034fc <xTaskResumeAll>
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000c28 	.word	0x20000c28
 80040b0:	20000c2c 	.word	0x20000c2c
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <prvGetNextExpireTime+0x44>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <prvGetNextExpireTime+0x44>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e001      	b.n	80040ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000c24 	.word	0x20000c24

08004100 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004108:	f7ff fa94 	bl	8003634 <xTaskGetTickCount>
 800410c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <prvSampleTimeNow+0x3c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d205      	bcs.n	8004124 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004118:	f000 f904 	bl	8004324 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e002      	b.n	800412a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <prvSampleTimeNow+0x3c>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004130:	68fb      	ldr	r3, [r7, #12]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000c34 	.word	0x20000c34

08004140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d812      	bhi.n	800418c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad2      	subs	r2, r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e01b      	b.n	80041b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <prvInsertTimerInActiveList+0x7c>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe fa49 	bl	800261c <vListInsert>
 800418a:	e012      	b.n	80041b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d206      	bcs.n	80041a2 <prvInsertTimerInActiveList+0x62>
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e007      	b.n	80041b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <prvInsertTimerInActiveList+0x80>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7fe fa35 	bl	800261c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041b2:	697b      	ldr	r3, [r7, #20]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000c28 	.word	0x20000c28
 80041c0:	20000c24 	.word	0x20000c24

080041c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	; 0x38
 80041c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041ca:	e099      	b.n	8004300 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da17      	bge.n	8004202 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	3304      	adds	r3, #4
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <prvProcessReceivedCommands+0x2e>
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e7fe      	b.n	80041f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	6850      	ldr	r0, [r2, #4]
 80041fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	4611      	mov	r1, r2
 8004200:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db7a      	blt.n	80042fe <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fa37 	bl	800268c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800421e:	463b      	mov	r3, r7
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff6d 	bl	8004100 <prvSampleTimeNow>
 8004226:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b09      	cmp	r3, #9
 800422c:	d868      	bhi.n	8004300 <prvProcessReceivedCommands+0x13c>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <prvProcessReceivedCommands+0x70>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	0800425d 	.word	0x0800425d
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800425d 	.word	0x0800425d
 8004240:	08004301 	.word	0x08004301
 8004244:	080042b7 	.word	0x080042b7
 8004248:	080042ed 	.word	0x080042ed
 800424c:	0800425d 	.word	0x0800425d
 8004250:	0800425d 	.word	0x0800425d
 8004254:	08004301 	.word	0x08004301
 8004258:	080042b7 	.word	0x080042b7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	18d1      	adds	r1, r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426a:	f7ff ff69 	bl	8004140 <prvInsertTimerInActiveList>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d045      	beq.n	8004300 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d13d      	bne.n	8004300 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	441a      	add	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	2100      	movs	r1, #0
 8004294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004296:	f7ff fe23 	bl	8003ee0 <xTimerGenericCommand>
 800429a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12e      	bne.n	8004300 <prvProcessReceivedCommands+0x13c>
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e7fe      	b.n	80042b4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <prvProcessReceivedCommands+0x114>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e7fe      	b.n	80042d6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	18d1      	adds	r1, r2, r3
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e6:	f7ff ff2b 	bl	8004140 <prvInsertTimerInActiveList>
					break;
 80042ea:	e009      	b.n	8004300 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80042f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f8:	f000 fb56 	bl	80049a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80042fc:	e000      	b.n	8004300 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80042fe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <prvProcessReceivedCommands+0x15c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1d39      	adds	r1, r7, #4
 8004306:	2200      	movs	r2, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fc75 	bl	8002bf8 <xQueueReceive>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f47f af5b 	bne.w	80041cc <prvProcessReceivedCommands+0x8>
	}
}
 8004316:	bf00      	nop
 8004318:	3730      	adds	r7, #48	; 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000c2c 	.word	0x20000c2c

08004324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800432a:	e044      	b.n	80043b6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <prvSwitchTimerLists+0xb8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004336:	4b29      	ldr	r3, [pc, #164]	; (80043dc <prvSwitchTimerLists+0xb8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3304      	adds	r3, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe f9a1 	bl	800268c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d12d      	bne.n	80043b6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d90e      	bls.n	800438a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <prvSwitchTimerLists+0xb8>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7fe f94a 	bl	800261c <vListInsert>
 8004388:	e015      	b.n	80043b6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800438a:	2300      	movs	r3, #0
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	2100      	movs	r1, #0
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fda3 	bl	8003ee0 <xTimerGenericCommand>
 800439a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <prvSwitchTimerLists+0x92>
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	e7fe      	b.n	80043b4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <prvSwitchTimerLists+0xb8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1b5      	bne.n	800432c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <prvSwitchTimerLists+0xb8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvSwitchTimerLists+0xbc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <prvSwitchTimerLists+0xb8>)
 80043cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043ce:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <prvSwitchTimerLists+0xbc>)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000c24 	.word	0x20000c24
 80043e0:	20000c28 	.word	0x20000c28

080043e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80043ea:	f000 f925 	bl	8004638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d120      	bne.n	8004438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80043f6:	4814      	ldr	r0, [pc, #80]	; (8004448 <prvCheckForValidListAndQueue+0x64>)
 80043f8:	f7fe f8c2 	bl	8002580 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80043fc:	4813      	ldr	r0, [pc, #76]	; (800444c <prvCheckForValidListAndQueue+0x68>)
 80043fe:	f7fe f8bf 	bl	8002580 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <prvCheckForValidListAndQueue+0x6c>)
 8004404:	4a10      	ldr	r2, [pc, #64]	; (8004448 <prvCheckForValidListAndQueue+0x64>)
 8004406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <prvCheckForValidListAndQueue+0x70>)
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <prvCheckForValidListAndQueue+0x68>)
 800440c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800440e:	2300      	movs	r3, #0
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <prvCheckForValidListAndQueue+0x74>)
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <prvCheckForValidListAndQueue+0x78>)
 8004416:	2110      	movs	r1, #16
 8004418:	200a      	movs	r0, #10
 800441a:	f7fe f9c9 	bl	80027b0 <xQueueGenericCreateStatic>
 800441e:	4602      	mov	r2, r0
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 8004422:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	490b      	ldr	r1, [pc, #44]	; (8004460 <prvCheckForValidListAndQueue+0x7c>)
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fdcc 	bl	8002fd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004438:	f000 f92c 	bl	8004694 <vPortExitCritical>
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000c2c 	.word	0x20000c2c
 8004448:	20000bfc 	.word	0x20000bfc
 800444c:	20000c10 	.word	0x20000c10
 8004450:	20000c24 	.word	0x20000c24
 8004454:	20000c28 	.word	0x20000c28
 8004458:	20000cd8 	.word	0x20000cd8
 800445c:	20000c38 	.word	0x20000c38
 8004460:	08004cf8 	.word	0x08004cf8

08004464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3b04      	subs	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800447c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b04      	subs	r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3b04      	subs	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004494:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <pxPortInitialiseStack+0x54>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3b14      	subs	r3, #20
 800449e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b20      	subs	r3, #32
 80044aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	080044bd 	.word	0x080044bd

080044bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <prvTaskExitError+0x4c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d009      	beq.n	80044e4 <prvTaskExitError+0x28>
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e7fe      	b.n	80044e2 <prvTaskExitError+0x26>
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044f6:	bf00      	nop
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0fc      	beq.n	80044f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	20000010 	.word	0x20000010
 800450c:	00000000 	.word	0x00000000

08004510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <pxCurrentTCBConst2>)
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	6808      	ldr	r0, [r1, #0]
 8004516:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800451a:	f380 8809 	msr	PSP, r0
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8811 	msr	BASEPRI, r0
 800452a:	f04e 0e0d 	orr.w	lr, lr, #13
 800452e:	4770      	bx	lr

08004530 <pxCurrentTCBConst2>:
 8004530:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004538:	4806      	ldr	r0, [pc, #24]	; (8004554 <prvPortStartFirstTask+0x1c>)
 800453a:	6800      	ldr	r0, [r0, #0]
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	f380 8808 	msr	MSP, r0
 8004542:	b662      	cpsie	i
 8004544:	b661      	cpsie	f
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	df00      	svc	0
 8004550:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004552:	bf00      	nop
 8004554:	e000ed08 	.word	0xe000ed08

08004558 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <xPortStartScheduler+0xcc>)
 8004560:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b29      	ldr	r3, [pc, #164]	; (8004628 <xPortStartScheduler+0xd0>)
 8004584:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004586:	4b29      	ldr	r3, [pc, #164]	; (800462c <xPortStartScheduler+0xd4>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458c:	e009      	b.n	80045a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800458e:	4b27      	ldr	r3, [pc, #156]	; (800462c <xPortStartScheduler+0xd4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	4a25      	ldr	r2, [pc, #148]	; (800462c <xPortStartScheduler+0xd4>)
 8004596:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d0ef      	beq.n	800458e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ae:	4b1f      	ldr	r3, [pc, #124]	; (800462c <xPortStartScheduler+0xd4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d009      	beq.n	80045ce <xPortStartScheduler+0x76>
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	e7fe      	b.n	80045cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <xPortStartScheduler+0xd4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <xPortStartScheduler+0xd4>)
 80045d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <xPortStartScheduler+0xd4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045e0:	4a12      	ldr	r2, [pc, #72]	; (800462c <xPortStartScheduler+0xd4>)
 80045e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <xPortStartScheduler+0xd8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <xPortStartScheduler+0xd8>)
 80045f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <xPortStartScheduler+0xd8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <xPortStartScheduler+0xd8>)
 80045fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004604:	f000 f8b0 	bl	8004768 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <xPortStartScheduler+0xdc>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800460e:	f7ff ff93 	bl	8004538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004612:	f7ff f8db 	bl	80037cc <vTaskSwitchContext>
	prvTaskExitError();
 8004616:	f7ff ff51 	bl	80044bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000e400 	.word	0xe000e400
 8004628:	20000d28 	.word	0x20000d28
 800462c:	20000d2c 	.word	0x20000d2c
 8004630:	e000ed20 	.word	0xe000ed20
 8004634:	20000010 	.word	0x20000010

08004638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <vPortEnterCritical+0x54>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a0d      	ldr	r2, [pc, #52]	; (800468c <vPortEnterCritical+0x54>)
 8004658:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <vPortEnterCritical+0x54>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10e      	bne.n	8004680 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <vPortEnterCritical+0x58>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <vPortEnterCritical+0x48>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	e7fe      	b.n	800467e <vPortEnterCritical+0x46>
	}
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000010 	.word	0x20000010
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <vPortExitCritical+0x48>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <vPortExitCritical+0x22>
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e7fe      	b.n	80046b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <vPortExitCritical+0x48>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <vPortExitCritical+0x48>)
 80046be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <vPortExitCritical+0x48>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <vPortExitCritical+0x3e>
 80046c8:	2300      	movs	r3, #0
 80046ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20000010 	.word	0x20000010

080046e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046e0:	f3ef 8009 	mrs	r0, PSP
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <pxCurrentTCBConst>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046f0:	6010      	str	r0, [r2, #0]
 80046f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80046f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046fa:	f380 8811 	msr	BASEPRI, r0
 80046fe:	f7ff f865 	bl	80037cc <vTaskSwitchContext>
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004716:	f380 8809 	msr	PSP, r0
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	4770      	bx	lr

08004720 <pxCurrentTCBConst>:
 8004720:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004740:	f7fe ff86 	bl	8003650 <xTaskIncrementTick>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <SysTick_Handler+0x3c>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortSetupTimerInterrupt+0x30>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <vPortSetupTimerInterrupt+0x34>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <vPortSetupTimerInterrupt+0x38>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <vPortSetupTimerInterrupt+0x3c>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <vPortSetupTimerInterrupt+0x40>)
 8004786:	3b01      	subs	r3, #1
 8004788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800478a:	4b03      	ldr	r3, [pc, #12]	; (8004798 <vPortSetupTimerInterrupt+0x30>)
 800478c:	2207      	movs	r2, #7
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	e000e010 	.word	0xe000e010
 800479c:	e000e018 	.word	0xe000e018
 80047a0:	20000004 	.word	0x20000004
 80047a4:	10624dd3 	.word	0x10624dd3
 80047a8:	e000e014 	.word	0xe000e014

080047ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047b2:	f3ef 8305 	mrs	r3, IPSR
 80047b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d913      	bls.n	80047e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047be:	4a15      	ldr	r2, [pc, #84]	; (8004814 <vPortValidateInterruptPriority+0x68>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <vPortValidateInterruptPriority+0x6c>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	7afa      	ldrb	r2, [r7, #11]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d209      	bcs.n	80047e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	e7fe      	b.n	80047e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <vPortValidateInterruptPriority+0x70>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <vPortValidateInterruptPriority+0x74>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d909      	bls.n	800480a <vPortValidateInterruptPriority+0x5e>
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	e7fe      	b.n	8004808 <vPortValidateInterruptPriority+0x5c>
	}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	e000e3f0 	.word	0xe000e3f0
 8004818:	20000d28 	.word	0x20000d28
 800481c:	e000ed0c 	.word	0xe000ed0c
 8004820:	20000d2c 	.word	0x20000d2c

08004824 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004830:	f7fe fe56 	bl	80034e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004834:	4b57      	ldr	r3, [pc, #348]	; (8004994 <pvPortMalloc+0x170>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800483c:	f000 f90c 	bl	8004a58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <pvPortMalloc+0x174>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f040 808c 	bne.w	8004966 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004854:	2208      	movs	r2, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d013      	beq.n	800488e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f023 0307 	bic.w	r3, r3, #7
 800486c:	3308      	adds	r3, #8
 800486e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <pvPortMalloc+0x6a>
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e7fe      	b.n	800488c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d068      	beq.n	8004966 <pvPortMalloc+0x142>
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <pvPortMalloc+0x178>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d863      	bhi.n	8004966 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800489e:	4b40      	ldr	r3, [pc, #256]	; (80049a0 <pvPortMalloc+0x17c>)
 80048a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <pvPortMalloc+0x17c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048a8:	e004      	b.n	80048b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d903      	bls.n	80048c6 <pvPortMalloc+0xa2>
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f1      	bne.n	80048aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048c6:	4b33      	ldr	r3, [pc, #204]	; (8004994 <pvPortMalloc+0x170>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d04a      	beq.n	8004966 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2208      	movs	r2, #8
 80048d6:	4413      	add	r3, r2
 80048d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1ad2      	subs	r2, r2, r3
 80048ea:	2308      	movs	r3, #8
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d91e      	bls.n	8004930 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <pvPortMalloc+0xf4>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	e7fe      	b.n	8004916 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800492a:	69b8      	ldr	r0, [r7, #24]
 800492c:	f000 f8f6 	bl	8004b1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <pvPortMalloc+0x178>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <pvPortMalloc+0x178>)
 800493c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800493e:	4b17      	ldr	r3, [pc, #92]	; (800499c <pvPortMalloc+0x178>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <pvPortMalloc+0x180>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d203      	bcs.n	8004952 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <pvPortMalloc+0x178>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <pvPortMalloc+0x180>)
 8004950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <pvPortMalloc+0x174>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	431a      	orrs	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004966:	f7fe fdc9 	bl	80034fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <pvPortMalloc+0x164>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e7fe      	b.n	8004986 <pvPortMalloc+0x162>
	return pvReturn;
 8004988:	69fb      	ldr	r3, [r7, #28]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3728      	adds	r7, #40	; 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20001938 	.word	0x20001938
 8004998:	20001944 	.word	0x20001944
 800499c:	2000193c 	.word	0x2000193c
 80049a0:	20001930 	.word	0x20001930
 80049a4:	20001940 	.word	0x20001940

080049a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d046      	beq.n	8004a48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049ba:	2308      	movs	r3, #8
 80049bc:	425b      	negs	r3, r3
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <vPortFree+0xa8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <vPortFree+0x42>
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e7fe      	b.n	80049e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <vPortFree+0x5e>
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	e7fe      	b.n	8004a04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <vPortFree+0xa8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d019      	beq.n	8004a48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d115      	bne.n	8004a48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortFree+0xa8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	401a      	ands	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a2c:	f7fe fd58 	bl	80034e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <vPortFree+0xac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <vPortFree+0xac>)
 8004a3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3e:	6938      	ldr	r0, [r7, #16]
 8004a40:	f000 f86c 	bl	8004b1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a44:	f7fe fd5a 	bl	80034fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a48:	bf00      	nop
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20001944 	.word	0x20001944
 8004a54:	2000193c 	.word	0x2000193c

08004a58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <prvHeapInit+0xac>)
 8004a66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3307      	adds	r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <prvHeapInit+0xac>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a90:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <prvHeapInit+0xb0>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a96:	4b1c      	ldr	r3, [pc, #112]	; (8004b08 <prvHeapInit+0xb0>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0307 	bic.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <prvHeapInit+0xb4>)
 8004ab8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <prvHeapInit+0xb4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <prvHeapInit+0xb4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <prvHeapInit+0xb4>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <prvHeapInit+0xb8>)
 8004ae6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <prvHeapInit+0xbc>)
 8004aee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <prvHeapInit+0xc0>)
 8004af2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004af6:	601a      	str	r2, [r3, #0]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000d30 	.word	0x20000d30
 8004b08:	20001930 	.word	0x20001930
 8004b0c:	20001938 	.word	0x20001938
 8004b10:	20001940 	.word	0x20001940
 8004b14:	2000193c 	.word	0x2000193c
 8004b18:	20001944 	.word	0x20001944

08004b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <prvInsertBlockIntoFreeList+0xa8>)
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e002      	b.n	8004b30 <prvInsertBlockIntoFreeList+0x14>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d8f7      	bhi.n	8004b2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d108      	bne.n	8004b5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d118      	bne.n	8004ba4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <prvInsertBlockIntoFreeList+0xac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d00d      	beq.n	8004b9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e008      	b.n	8004bac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <prvInsertBlockIntoFreeList+0xac>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e003      	b.n	8004bac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d002      	beq.n	8004bba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	20001930 	.word	0x20001930
 8004bc8:	20001938 	.word	0x20001938

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	2500      	movs	r5, #0
 8004bd0:	4e0c      	ldr	r6, [pc, #48]	; (8004c04 <__libc_init_array+0x38>)
 8004bd2:	4c0d      	ldr	r4, [pc, #52]	; (8004c08 <__libc_init_array+0x3c>)
 8004bd4:	1ba4      	subs	r4, r4, r6
 8004bd6:	10a4      	asrs	r4, r4, #2
 8004bd8:	42a5      	cmp	r5, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	f000 f82e 	bl	8004c3c <_init>
 8004be0:	2500      	movs	r5, #0
 8004be2:	4e0a      	ldr	r6, [pc, #40]	; (8004c0c <__libc_init_array+0x40>)
 8004be4:	4c0a      	ldr	r4, [pc, #40]	; (8004c10 <__libc_init_array+0x44>)
 8004be6:	1ba4      	subs	r4, r4, r6
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	42a5      	cmp	r5, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf4:	4798      	blx	r3
 8004bf6:	3501      	adds	r5, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bfe:	4798      	blx	r3
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08004d84 	.word	0x08004d84
 8004c08:	08004d84 	.word	0x08004d84
 8004c0c:	08004d84 	.word	0x08004d84
 8004c10:	08004d88 	.word	0x08004d88

08004c14 <memcpy>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	1e43      	subs	r3, r0, #1
 8004c18:	440a      	add	r2, r1
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	d100      	bne.n	8004c20 <memcpy+0xc>
 8004c1e:	bd10      	pop	{r4, pc}
 8004c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c28:	e7f7      	b.n	8004c1a <memcpy+0x6>

08004c2a <memset>:
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d100      	bne.n	8004c34 <memset+0xa>
 8004c32:	4770      	bx	lr
 8004c34:	f803 1b01 	strb.w	r1, [r3], #1
 8004c38:	e7f9      	b.n	8004c2e <memset+0x4>
	...

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
