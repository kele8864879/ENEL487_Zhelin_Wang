
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002814  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aac  08002aac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aac  08002aac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aac  08002aac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  08002ac0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002ac0  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a28e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001876  00000000  00000000  0002a2c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176dd  00000000  00000000  0002d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d9e  00000000  00000000  00044895  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089ec1  00000000  00000000  0004d633  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d74f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  000d7570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002908 	.word	0x08002908

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002908 	.word	0x08002908

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b089      	sub	sp, #36	; 0x24
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fd0d 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f915 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f9f1 	bl	8000564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000182:	f000 f99b 	bl	80004bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000186:	f000 f9c3 	bl	8000510 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800018a:	f000 f949 	bl	8000420 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim4);
 800018e:	4876      	ldr	r0, [pc, #472]	; (8000368 <main+0x1f8>)
 8000190:	f001 fcf4 	bl	8001b7c <HAL_TIM_Base_Start>

  strcpy((char*)cliBufferTX, "\x1b[2J");                                         /*clear the screen*/
 8000194:	4b75      	ldr	r3, [pc, #468]	; (800036c <main+0x1fc>)
 8000196:	4a76      	ldr	r2, [pc, #472]	; (8000370 <main+0x200>)
 8000198:	6810      	ldr	r0, [r2, #0]
 800019a:	6018      	str	r0, [r3, #0]
 800019c:	7912      	ldrb	r2, [r2, #4]
 800019e:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001a0:	4872      	ldr	r0, [pc, #456]	; (800036c <main+0x1fc>)
 80001a2:	f7ff ffdd 	bl	8000160 <strlen>
 80001a6:	4603      	mov	r3, r0
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ae:	496f      	ldr	r1, [pc, #444]	; (800036c <main+0x1fc>)
 80001b0:	4870      	ldr	r0, [pc, #448]	; (8000374 <main+0x204>)
 80001b2:	f001 ff88 	bl	80020c6 <HAL_UART_Transmit>

  strcpy((char*)cliBufferTX, "\x1b[10;r");                                       /*scroll window*/
 80001b6:	4b6d      	ldr	r3, [pc, #436]	; (800036c <main+0x1fc>)
 80001b8:	4a6f      	ldr	r2, [pc, #444]	; (8000378 <main+0x208>)
 80001ba:	6810      	ldr	r0, [r2, #0]
 80001bc:	6018      	str	r0, [r3, #0]
 80001be:	8891      	ldrh	r1, [r2, #4]
 80001c0:	7992      	ldrb	r2, [r2, #6]
 80001c2:	8099      	strh	r1, [r3, #4]
 80001c4:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001c6:	4869      	ldr	r0, [pc, #420]	; (800036c <main+0x1fc>)
 80001c8:	f7ff ffca 	bl	8000160 <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	4965      	ldr	r1, [pc, #404]	; (800036c <main+0x1fc>)
 80001d6:	4867      	ldr	r0, [pc, #412]	; (8000374 <main+0x204>)
 80001d8:	f001 ff75 	bl	80020c6 <HAL_UART_Transmit>

  strcpy((char*)cliBufferTX, "\x1b[10;0H");                                      /*position the cursor*/
 80001dc:	4a63      	ldr	r2, [pc, #396]	; (800036c <main+0x1fc>)
 80001de:	4b67      	ldr	r3, [pc, #412]	; (800037c <main+0x20c>)
 80001e0:	cb03      	ldmia	r3!, {r0, r1}
 80001e2:	6010      	str	r0, [r2, #0]
 80001e4:	6051      	str	r1, [r2, #4]
  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80001e6:	4861      	ldr	r0, [pc, #388]	; (800036c <main+0x1fc>)
 80001e8:	f7ff ffba 	bl	8000160 <strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f4:	495d      	ldr	r1, [pc, #372]	; (800036c <main+0x1fc>)
 80001f6:	485f      	ldr	r0, [pc, #380]	; (8000374 <main+0x204>)
 80001f8:	f001 ff65 	bl	80020c6 <HAL_UART_Transmit>

   strcpy((char*)cliBufferTX, "Testing CLI!\r\n");
 80001fc:	4a5b      	ldr	r2, [pc, #364]	; (800036c <main+0x1fc>)
 80001fe:	4b60      	ldr	r3, [pc, #384]	; (8000380 <main+0x210>)
 8000200:	4614      	mov	r4, r2
 8000202:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000204:	6020      	str	r0, [r4, #0]
 8000206:	6061      	str	r1, [r4, #4]
 8000208:	60a2      	str	r2, [r4, #8]
 800020a:	881a      	ldrh	r2, [r3, #0]
 800020c:	789b      	ldrb	r3, [r3, #2]
 800020e:	81a2      	strh	r2, [r4, #12]
 8000210:	73a3      	strb	r3, [r4, #14]
   HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000212:	4856      	ldr	r0, [pc, #344]	; (800036c <main+0x1fc>)
 8000214:	f7ff ffa4 	bl	8000160 <strlen>
 8000218:	4603      	mov	r3, r0
 800021a:	b29a      	uxth	r2, r3
 800021c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000220:	4952      	ldr	r1, [pc, #328]	; (800036c <main+0x1fc>)
 8000222:	4854      	ldr	r0, [pc, #336]	; (8000374 <main+0x204>)
 8000224:	f001 ff4f 	bl	80020c6 <HAL_UART_Transmit>

   HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	4956      	ldr	r1, [pc, #344]	; (8000384 <main+0x214>)
 800022c:	4851      	ldr	r0, [pc, #324]	; (8000374 <main+0x204>)
 800022e:	f001 ffdc 	bl	80021ea <HAL_UART_Receive_IT>
   i=0;
 8000232:	4b55      	ldr	r3, [pc, #340]	; (8000388 <main+0x218>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
   period=10000;
 8000238:	4b54      	ldr	r3, [pc, #336]	; (800038c <main+0x21c>)
 800023a:	f242 7210 	movw	r2, #10000	; 0x2710
 800023e:	801a      	strh	r2, [r3, #0]
   flag=0;
 8000240:	4b53      	ldr	r3, [pc, #332]	; (8000390 <main+0x220>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
   uint16_t counter=0,temp,timer;
 8000246:	2300      	movs	r3, #0
 8000248:	83fb      	strh	r3, [r7, #30]
   int8_t  j;
   char data[10],escape[10];
  while (1)
  {
      timer = __HAL_TIM_GET_COUNTER(&htim4);
 800024a:	4b47      	ldr	r3, [pc, #284]	; (8000368 <main+0x1f8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000250:	833b      	strh	r3, [r7, #24]
	  if(flag==3)
 8000252:	4b4f      	ldr	r3, [pc, #316]	; (8000390 <main+0x220>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b03      	cmp	r3, #3
 8000258:	d10e      	bne.n	8000278 <main+0x108>
	  	    {
	  		  if (!(timer%period))
 800025a:	4b4c      	ldr	r3, [pc, #304]	; (800038c <main+0x21c>)
 800025c:	881a      	ldrh	r2, [r3, #0]
 800025e:	8b3b      	ldrh	r3, [r7, #24]
 8000260:	fbb3 f1f2 	udiv	r1, r3, r2
 8000264:	fb02 f201 	mul.w	r2, r2, r1
 8000268:	1a9b      	subs	r3, r3, r2
 800026a:	b29b      	uxth	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	d103      	bne.n	8000278 <main+0x108>
	  	  	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000270:	2120      	movs	r1, #32
 8000272:	4848      	ldr	r0, [pc, #288]	; (8000394 <main+0x224>)
 8000274:	f000 fffd 	bl	8001272 <HAL_GPIO_TogglePin>

	  	    }



	  if(timer==0)
 8000278:	8b3b      	ldrh	r3, [r7, #24]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1e5      	bne.n	800024a <main+0xda>
	   {
		  counter++;
 800027e:	8bfb      	ldrh	r3, [r7, #30]
 8000280:	3301      	adds	r3, #1
 8000282:	83fb      	strh	r3, [r7, #30]
		  temp = counter;
 8000284:	8bfb      	ldrh	r3, [r7, #30]
 8000286:	83bb      	strh	r3, [r7, #28]
		  for( j=0;j<5;j++)
 8000288:	2300      	movs	r3, #0
 800028a:	76fb      	strb	r3, [r7, #27]
 800028c:	e023      	b.n	80002d6 <main+0x166>
		   {  data[4-j]=(temp%10)^0x30;
 800028e:	8bba      	ldrh	r2, [r7, #28]
 8000290:	4b41      	ldr	r3, [pc, #260]	; (8000398 <main+0x228>)
 8000292:	fba3 1302 	umull	r1, r3, r3, r2
 8000296:	08d9      	lsrs	r1, r3, #3
 8000298:	460b      	mov	r3, r1
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80002aa:	f1c3 0304 	rsb	r3, r3, #4
 80002ae:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80002b2:	b2d2      	uxtb	r2, r2
 80002b4:	f107 0120 	add.w	r1, r7, #32
 80002b8:	440b      	add	r3, r1
 80002ba:	f803 2c14 	strb.w	r2, [r3, #-20]
		      temp=temp/10;
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	4a35      	ldr	r2, [pc, #212]	; (8000398 <main+0x228>)
 80002c2:	fba2 2303 	umull	r2, r3, r2, r3
 80002c6:	08db      	lsrs	r3, r3, #3
 80002c8:	83bb      	strh	r3, [r7, #28]
		  for( j=0;j<5;j++)
 80002ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	3301      	adds	r3, #1
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	76fb      	strb	r3, [r7, #27]
 80002d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80002da:	2b04      	cmp	r3, #4
 80002dc:	ddd7      	ble.n	800028e <main+0x11e>
		   }

		  data[5]='\0';
 80002de:	2300      	movs	r3, #0
 80002e0:	747b      	strb	r3, [r7, #17]
		  strcpy((char*)escape, "\x1b[s");                                            /*保存光标*/
 80002e2:	463b      	mov	r3, r7
 80002e4:	4a2d      	ldr	r2, [pc, #180]	; (800039c <main+0x22c>)
 80002e6:	601a      	str	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, escape, strlen((char*)escape),1000);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff38 	bl	8000160 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	4639      	mov	r1, r7
 80002f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fa:	481e      	ldr	r0, [pc, #120]	; (8000374 <main+0x204>)
 80002fc:	f001 fee3 	bl	80020c6 <HAL_UART_Transmit>
	      strcpy((char*)escape, "\x1b[0;0H");                                         /*光标在0行0列*/
 8000300:	463b      	mov	r3, r7
 8000302:	4a27      	ldr	r2, [pc, #156]	; (80003a0 <main+0x230>)
 8000304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000308:	6018      	str	r0, [r3, #0]
 800030a:	3304      	adds	r3, #4
 800030c:	8019      	strh	r1, [r3, #0]
 800030e:	3302      	adds	r3, #2
 8000310:	0c0a      	lsrs	r2, r1, #16
 8000312:	701a      	strb	r2, [r3, #0]
   	      HAL_UART_Transmit(&huart3, escape, strlen((char*)escape),1000);
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff22 	bl	8000160 <strlen>
 800031c:	4603      	mov	r3, r0
 800031e:	b29a      	uxth	r2, r3
 8000320:	4639      	mov	r1, r7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	4813      	ldr	r0, [pc, #76]	; (8000374 <main+0x204>)
 8000328:	f001 fecd 	bl	80020c6 <HAL_UART_Transmit>
   	      HAL_UART_Transmit(&huart3, data, strlen((char*)data),1000);
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff15 	bl	8000160 <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	f107 010c 	add.w	r1, r7, #12
 800033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <main+0x204>)
 8000344:	f001 febf 	bl	80020c6 <HAL_UART_Transmit>
   	      strcpy((char*)escape, "\x1b[u");                                            /*恢复光标*/
 8000348:	463b      	mov	r3, r7
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <main+0x234>)
 800034c:	601a      	str	r2, [r3, #0]
   	      HAL_UART_Transmit(&huart3, escape, strlen((char*)escape),1000);
 800034e:	463b      	mov	r3, r7
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff05 	bl	8000160 <strlen>
 8000356:	4603      	mov	r3, r0
 8000358:	b29a      	uxth	r2, r3
 800035a:	4639      	mov	r1, r7
 800035c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <main+0x204>)
 8000362:	f001 feb0 	bl	80020c6 <HAL_UART_Transmit>
      timer = __HAL_TIM_GET_COUNTER(&htim4);
 8000366:	e770      	b.n	800024a <main+0xda>
 8000368:	2000002c 	.word	0x2000002c
 800036c:	200000b4 	.word	0x200000b4
 8000370:	08002920 	.word	0x08002920
 8000374:	20000074 	.word	0x20000074
 8000378:	08002928 	.word	0x08002928
 800037c:	08002930 	.word	0x08002930
 8000380:	08002938 	.word	0x08002938
 8000384:	20000184 	.word	0x20000184
 8000388:	20000180 	.word	0x20000180
 800038c:	20000198 	.word	0x20000198
 8000390:	2000017c 	.word	0x2000017c
 8000394:	40010800 	.word	0x40010800
 8000398:	cccccccd 	.word	0xcccccccd
 800039c:	00735b1b 	.word	0x00735b1b
 80003a0:	08002948 	.word	0x08002948
 80003a4:	00755b1b 	.word	0x00755b1b

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	; 0x40
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fa9d 	bl	80028f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2310      	movs	r3, #16
 80003d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 ff60 	bl	80012a4 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ea:	f000 fac9 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	230f      	movs	r3, #15
 80003f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80003fa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80003fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f001 f9cb 	bl	80017a4 <HAL_RCC_ClockConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000414:	f000 fab4 	bl	8000980 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3740      	adds	r7, #64	; 0x40
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM4_Init+0x94>)
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <MX_TIM4_Init+0x98>)
 8000440:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000444:	2263      	movs	r2, #99	; 0x63
 8000446:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_TIM4_Init+0x94>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000450:	f242 7210 	movw	r2, #10000	; 0x2710
 8000454:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_TIM4_Init+0x94>)
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000462:	4814      	ldr	r0, [pc, #80]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000464:	f001 fb3a 	bl	8001adc <HAL_TIM_Base_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 fa87 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000476:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	4619      	mov	r1, r3
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000480:	f001 fbc6 	bl	8001c10 <HAL_TIM_ConfigClockSource>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800048a:	f000 fa79 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_TIM4_Init+0x94>)
 800049c:	f001 fd68 	bl	8001f70 <HAL_TIMEx_MasterConfigSynchronization>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80004a6:	f000 fa6b 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	40000800 	.word	0x40000800

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <MX_USART2_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f001 fd9a 	bl	800202c <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 fa3f 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000019c 	.word	0x2000019c
 800050c:	40004400 	.word	0x40004400

08000510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_USART3_UART_Init+0x4c>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <MX_USART3_UART_Init+0x50>)
 8000518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_USART3_UART_Init+0x4c>)
 800051c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_USART3_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_USART3_UART_Init+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <MX_USART3_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_USART3_UART_Init+0x4c>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <MX_USART3_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_USART3_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_USART3_UART_Init+0x4c>)
 8000548:	f001 fd70 	bl	800202c <HAL_UART_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000552:	f000 fa15 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000074 	.word	0x20000074
 8000560:	40004800 	.word	0x40004800

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_GPIO_Init+0x5c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_GPIO_Init+0x5c>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x5c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <MX_GPIO_Init+0x60>)
 8000596:	f000 fe54 	bl	8001242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800059a:	2320      	movs	r3, #32
 800059c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4619      	mov	r1, r3
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <MX_GPIO_Init+0x60>)
 80005b2:	f000 fcd5 	bl	8000f60 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800

080005c8 <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	cliBufferTX[i] = cliBufferRX[0];
 80005d0:	4ba6      	ldr	r3, [pc, #664]	; (800086c <HAL_UART_RxCpltCallback+0x2a4>)
 80005d2:	f993 3000 	ldrsb.w	r3, [r3]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4ba5      	ldr	r3, [pc, #660]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 80005da:	7819      	ldrb	r1, [r3, #0]
 80005dc:	4ba5      	ldr	r3, [pc, #660]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80005de:	5499      	strb	r1, [r3, r2]
	if( cliBufferTX[i]=='\r')
 80005e0:	4ba2      	ldr	r3, [pc, #648]	; (800086c <HAL_UART_RxCpltCallback+0x2a4>)
 80005e2:	f993 3000 	ldrsb.w	r3, [r3]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4ba2      	ldr	r3, [pc, #648]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80005ea:	5c9b      	ldrb	r3, [r3, r2]
 80005ec:	2b0d      	cmp	r3, #13
 80005ee:	f040 816b 	bne.w	80008c8 <HAL_UART_RxCpltCallback+0x300>
	{
		cliBufferTX[i]='\0';
 80005f2:	4b9e      	ldr	r3, [pc, #632]	; (800086c <HAL_UART_RxCpltCallback+0x2a4>)
 80005f4:	f993 3000 	ldrsb.w	r3, [r3]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b9e      	ldr	r3, [pc, #632]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	5499      	strb	r1, [r3, r2]
		cliBufferRX[0]='\r';
 8000600:	4b9b      	ldr	r3, [pc, #620]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000602:	220d      	movs	r2, #13
 8000604:	701a      	strb	r2, [r3, #0]
		cliBufferRX[1]='\n';
 8000606:	4b9a      	ldr	r3, [pc, #616]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000608:	220a      	movs	r2, #10
 800060a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3,cliBufferRX,2,1000);
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	2202      	movs	r2, #2
 8000612:	4997      	ldr	r1, [pc, #604]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000614:	4898      	ldr	r0, [pc, #608]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000616:	f001 fd56 	bl	80020c6 <HAL_UART_Transmit>
		strcpy((char*)cliBufferRX, "\x1b[s");                                            /*保存光标*/
 800061a:	4b95      	ldr	r3, [pc, #596]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 800061c:	4a97      	ldr	r2, [pc, #604]	; (800087c <HAL_UART_RxCpltCallback+0x2b4>)
 800061e:	6810      	ldr	r0, [r2, #0]
 8000620:	6018      	str	r0, [r3, #0]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000622:	4893      	ldr	r0, [pc, #588]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000624:	f7ff fd9c 	bl	8000160 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	498f      	ldr	r1, [pc, #572]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000632:	4891      	ldr	r0, [pc, #580]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000634:	f001 fd47 	bl	80020c6 <HAL_UART_Transmit>
        strcpy((char*)cliBufferRX, "\x1b[9;0H");                                         /*光标在9行0列*/
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 800063a:	4a91      	ldr	r2, [pc, #580]	; (8000880 <HAL_UART_RxCpltCallback+0x2b8>)
 800063c:	6810      	ldr	r0, [r2, #0]
 800063e:	6018      	str	r0, [r3, #0]
 8000640:	8891      	ldrh	r1, [r2, #4]
 8000642:	7992      	ldrb	r2, [r2, #6]
 8000644:	8099      	strh	r1, [r3, #4]
 8000646:	719a      	strb	r2, [r3, #6]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000648:	4889      	ldr	r0, [pc, #548]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 800064a:	f7ff fd89 	bl	8000160 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	4986      	ldr	r1, [pc, #536]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000658:	4887      	ldr	r0, [pc, #540]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 800065a:	f001 fd34 	bl	80020c6 <HAL_UART_Transmit>
        strcpy((char*)cliBufferRX, "\x1b[1J");                                           /*擦除屏幕首部到光标位置*/
 800065e:	4b84      	ldr	r3, [pc, #528]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000660:	4a88      	ldr	r2, [pc, #544]	; (8000884 <HAL_UART_RxCpltCallback+0x2bc>)
 8000662:	6810      	ldr	r0, [r2, #0]
 8000664:	6018      	str	r0, [r3, #0]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	711a      	strb	r2, [r3, #4]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 800066a:	4881      	ldr	r0, [pc, #516]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 800066c:	f7ff fd78 	bl	8000160 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	497d      	ldr	r1, [pc, #500]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 800067a:	487f      	ldr	r0, [pc, #508]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 800067c:	f001 fd23 	bl	80020c6 <HAL_UART_Transmit>
        strcpy((char*)cliBufferRX, "\x1b[2;0H");                                         /*光标在0行0列*/
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000682:	4a81      	ldr	r2, [pc, #516]	; (8000888 <HAL_UART_RxCpltCallback+0x2c0>)
 8000684:	6810      	ldr	r0, [r2, #0]
 8000686:	6018      	str	r0, [r3, #0]
 8000688:	8891      	ldrh	r1, [r2, #4]
 800068a:	7992      	ldrb	r2, [r2, #6]
 800068c:	8099      	strh	r1, [r3, #4]
 800068e:	719a      	strb	r2, [r3, #6]
        HAL_UART_Transmit(&huart3, cliBufferRX, strlen((char*)cliBufferRX),1000);
 8000690:	4877      	ldr	r0, [pc, #476]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000692:	f7ff fd65 	bl	8000160 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	4974      	ldr	r1, [pc, #464]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 80006a0:	4875      	ldr	r0, [pc, #468]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 80006a2:	f001 fd10 	bl	80020c6 <HAL_UART_Transmit>
		if(strcmp(cliBufferTX,"turn")==0)
 80006a6:	4979      	ldr	r1, [pc, #484]	; (800088c <HAL_UART_RxCpltCallback+0x2c4>)
 80006a8:	4872      	ldr	r0, [pc, #456]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80006aa:	f7ff fd4f 	bl	800014c <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d123      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x134>
		  {  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b4:	2120      	movs	r1, #32
 80006b6:	4876      	ldr	r0, [pc, #472]	; (8000890 <HAL_UART_RxCpltCallback+0x2c8>)
 80006b8:	f000 fddb 	bl	8001272 <HAL_GPIO_TogglePin>
             flag=1;
 80006bc:	4b75      	ldr	r3, [pc, #468]	; (8000894 <HAL_UART_RxCpltCallback+0x2cc>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]

             strcpy((char*)cliBufferTX, "turn to open and close LED");
 80006c2:	4a6c      	ldr	r2, [pc, #432]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80006c4:	4b74      	ldr	r3, [pc, #464]	; (8000898 <HAL_UART_RxCpltCallback+0x2d0>)
 80006c6:	4615      	mov	r5, r2
 80006c8:	461c      	mov	r4, r3
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	6028      	str	r0, [r5, #0]
 80006ce:	6069      	str	r1, [r5, #4]
 80006d0:	60aa      	str	r2, [r5, #8]
 80006d2:	60eb      	str	r3, [r5, #12]
 80006d4:	cc03      	ldmia	r4!, {r0, r1}
 80006d6:	6128      	str	r0, [r5, #16]
 80006d8:	6169      	str	r1, [r5, #20]
 80006da:	8823      	ldrh	r3, [r4, #0]
 80006dc:	78a2      	ldrb	r2, [r4, #2]
 80006de:	832b      	strh	r3, [r5, #24]
 80006e0:	4613      	mov	r3, r2
 80006e2:	76ab      	strb	r3, [r5, #26]
             HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 80006e4:	4863      	ldr	r0, [pc, #396]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80006e6:	f7ff fd3b 	bl	8000160 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	4960      	ldr	r1, [pc, #384]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80006f4:	4860      	ldr	r0, [pc, #384]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 80006f6:	f001 fce6 	bl	80020c6 <HAL_UART_Transmit>
 80006fa:	e09e      	b.n	800083a <HAL_UART_RxCpltCallback+0x272>

		  }

		else if (strcmp(cliBufferTX,"query")==0)
 80006fc:	4967      	ldr	r1, [pc, #412]	; (800089c <HAL_UART_RxCpltCallback+0x2d4>)
 80006fe:	485d      	ldr	r0, [pc, #372]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000700:	f7ff fd24 	bl	800014c <strcmp>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d12e      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x1a0>
		  {
			flag=2;
 800070a:	4b62      	ldr	r3, [pc, #392]	; (8000894 <HAL_UART_RxCpltCallback+0x2cc>)
 800070c:	2202      	movs	r2, #2
 800070e:	601a      	str	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 8000710:	2120      	movs	r1, #32
 8000712:	485f      	ldr	r0, [pc, #380]	; (8000890 <HAL_UART_RxCpltCallback+0x2c8>)
 8000714:	f000 fd7e 	bl	8001214 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d113      	bne.n	8000746 <HAL_UART_RxCpltCallback+0x17e>
			  {

				strcpy((char *)cliBufferTX, "LED on");
 800071e:	4b55      	ldr	r3, [pc, #340]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000720:	4a5f      	ldr	r2, [pc, #380]	; (80008a0 <HAL_UART_RxCpltCallback+0x2d8>)
 8000722:	6810      	ldr	r0, [r2, #0]
 8000724:	6018      	str	r0, [r3, #0]
 8000726:	8891      	ldrh	r1, [r2, #4]
 8000728:	7992      	ldrb	r2, [r2, #6]
 800072a:	8099      	strh	r1, [r3, #4]
 800072c:	719a      	strb	r2, [r3, #6]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 800072e:	4851      	ldr	r0, [pc, #324]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000730:	f7ff fd16 	bl	8000160 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	494d      	ldr	r1, [pc, #308]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 800073e:	484e      	ldr	r0, [pc, #312]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000740:	f001 fcc1 	bl	80020c6 <HAL_UART_Transmit>
 8000744:	e079      	b.n	800083a <HAL_UART_RxCpltCallback+0x272>

			  }
			else
			  {
				strcpy((char *)cliBufferTX, "LED off");
 8000746:	4a4b      	ldr	r2, [pc, #300]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000748:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <HAL_UART_RxCpltCallback+0x2dc>)
 800074a:	cb03      	ldmia	r3!, {r0, r1}
 800074c:	6010      	str	r0, [r2, #0]
 800074e:	6051      	str	r1, [r2, #4]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 8000750:	4848      	ldr	r0, [pc, #288]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000752:	f7ff fd05 	bl	8000160 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	4945      	ldr	r1, [pc, #276]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000760:	4845      	ldr	r0, [pc, #276]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000762:	f001 fcb0 	bl	80020c6 <HAL_UART_Transmit>
 8000766:	e068      	b.n	800083a <HAL_UART_RxCpltCallback+0x272>

			  }
		   }
		else if (strcmp(cliBufferTX,"change")==0)
 8000768:	494f      	ldr	r1, [pc, #316]	; (80008a8 <HAL_UART_RxCpltCallback+0x2e0>)
 800076a:	4842      	ldr	r0, [pc, #264]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 800076c:	f7ff fcee 	bl	800014c <strcmp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d136      	bne.n	80007e4 <HAL_UART_RxCpltCallback+0x21c>
		   {  flag=3;
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <HAL_UART_RxCpltCallback+0x2cc>)
 8000778:	2203      	movs	r2, #3
 800077a:	601a      	str	r2, [r3, #0]
			  if(period==10000)
 800077c:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <HAL_UART_RxCpltCallback+0x2e4>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	f242 7210 	movw	r2, #10000	; 0x2710
 8000784:	4293      	cmp	r3, r2
 8000786:	d116      	bne.n	80007b6 <HAL_UART_RxCpltCallback+0x1ee>
		      {period=1000;
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <HAL_UART_RxCpltCallback+0x2e4>)
 800078a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800078e:	801a      	strh	r2, [r3, #0]
				strcpy((char *)cliBufferTX, "period:0.1s");
 8000790:	4a38      	ldr	r2, [pc, #224]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000792:	4b47      	ldr	r3, [pc, #284]	; (80008b0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000794:	4614      	mov	r4, r2
 8000796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000798:	6020      	str	r0, [r4, #0]
 800079a:	6061      	str	r1, [r4, #4]
 800079c:	60a2      	str	r2, [r4, #8]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 800079e:	4835      	ldr	r0, [pc, #212]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007a0:	f7ff fcde 	bl	8000160 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	4931      	ldr	r1, [pc, #196]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007ae:	4832      	ldr	r0, [pc, #200]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 80007b0:	f001 fc89 	bl	80020c6 <HAL_UART_Transmit>
 80007b4:	e041      	b.n	800083a <HAL_UART_RxCpltCallback+0x272>
		      }

		      else
		      {period=10000;
 80007b6:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <HAL_UART_RxCpltCallback+0x2e4>)
 80007b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007bc:	801a      	strh	r2, [r3, #0]
				strcpy((char *)cliBufferTX, "period:1s");
 80007be:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007c0:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <HAL_UART_RxCpltCallback+0x2ec>)
 80007c2:	cb03      	ldmia	r3!, {r0, r1}
 80007c4:	6010      	str	r0, [r2, #0]
 80007c6:	6051      	str	r1, [r2, #4]
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	8113      	strh	r3, [r2, #8]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char *) cliBufferTX),1000) ;
 80007cc:	4829      	ldr	r0, [pc, #164]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007ce:	f7ff fcc7 	bl	8000160 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	4926      	ldr	r1, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007dc:	4826      	ldr	r0, [pc, #152]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 80007de:	f001 fc72 	bl	80020c6 <HAL_UART_Transmit>
 80007e2:	e02a      	b.n	800083a <HAL_UART_RxCpltCallback+0x272>
		      }

		   }
		 else if (strcmp(cliBufferTX,"help")==0)
 80007e4:	4934      	ldr	r1, [pc, #208]	; (80008b8 <HAL_UART_RxCpltCallback+0x2f0>)
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007e8:	f7ff fcb0 	bl	800014c <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d113      	bne.n	800081a <HAL_UART_RxCpltCallback+0x252>
		  	  {
		    	  strcpy(( char*)cliBufferTX, " enter 'turn' to open and close LED\r\n enter 'query' to see the state of LED\r\n enter 'Change'to Change the period of the Blinking light\r\n enter 'help' to get help\r\n");
 80007f2:	4a20      	ldr	r2, [pc, #128]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HAL_UART_RxCpltCallback+0x2f4>)
 80007f6:	4610      	mov	r0, r2
 80007f8:	4619      	mov	r1, r3
 80007fa:	23a4      	movs	r3, #164	; 0xa4
 80007fc:	461a      	mov	r2, r3
 80007fe:	f002 f86f 	bl	80028e0 <memcpy>
			  	  HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000804:	f7ff fcac 	bl	8000160 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	4918      	ldr	r1, [pc, #96]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000814:	f001 fc57 	bl	80020c6 <HAL_UART_Transmit>
 8000818:	e00f      	b.n	800083a <HAL_UART_RxCpltCallback+0x272>
			  }
			 else
			  { strcpy(( char*)cliBufferTX, "error\r\n");
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <HAL_UART_RxCpltCallback+0x2f8>)
 800081e:	cb03      	ldmia	r3!, {r0, r1}
 8000820:	6010      	str	r0, [r2, #0]
 8000822:	6051      	str	r1, [r2, #4]
				HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000826:	f7ff fc9b 	bl	8000160 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	4910      	ldr	r1, [pc, #64]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000836:	f001 fc46 	bl	80020c6 <HAL_UART_Transmit>
			  }
        strcpy((char*)cliBufferTX, "\x1b[u");                                                 /*恢复光标*/
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <HAL_UART_RxCpltCallback+0x2fc>)
 800083e:	6810      	ldr	r0, [r2, #0]
 8000840:	6018      	str	r0, [r3, #0]
        HAL_UART_Transmit(&huart3, cliBufferTX, strlen((char*)cliBufferTX),1000);
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000844:	f7ff fc8c 	bl	8000160 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	4908      	ldr	r1, [pc, #32]	; (8000874 <HAL_UART_RxCpltCallback+0x2ac>)
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000854:	f001 fc37 	bl	80020c6 <HAL_UART_Transmit>
		i=0;
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <HAL_UART_RxCpltCallback+0x2a4>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	4903      	ldr	r1, [pc, #12]	; (8000870 <HAL_UART_RxCpltCallback+0x2a8>)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_UART_RxCpltCallback+0x2b0>)
 8000864:	f001 fcc1 	bl	80021ea <HAL_UART_Receive_IT>
		 HAL_UART_Transmit(&huart3,p,1,1000);
		 i++;
		 HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);

		}
}
 8000868:	e07b      	b.n	8000962 <HAL_UART_RxCpltCallback+0x39a>
 800086a:	bf00      	nop
 800086c:	20000180 	.word	0x20000180
 8000870:	20000184 	.word	0x20000184
 8000874:	200000b4 	.word	0x200000b4
 8000878:	20000074 	.word	0x20000074
 800087c:	08002950 	.word	0x08002950
 8000880:	08002954 	.word	0x08002954
 8000884:	0800295c 	.word	0x0800295c
 8000888:	08002964 	.word	0x08002964
 800088c:	0800296c 	.word	0x0800296c
 8000890:	40010800 	.word	0x40010800
 8000894:	2000017c 	.word	0x2000017c
 8000898:	08002974 	.word	0x08002974
 800089c:	08002990 	.word	0x08002990
 80008a0:	08002998 	.word	0x08002998
 80008a4:	080029a0 	.word	0x080029a0
 80008a8:	080029a8 	.word	0x080029a8
 80008ac:	20000198 	.word	0x20000198
 80008b0:	080029b0 	.word	0x080029b0
 80008b4:	080029bc 	.word	0x080029bc
 80008b8:	080029c8 	.word	0x080029c8
 80008bc:	080029d0 	.word	0x080029d0
 80008c0:	08002a74 	.word	0x08002a74
 80008c4:	08002a7c 	.word	0x08002a7c
	else if( cliBufferTX[i]=='\177')
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 80008ca:	f993 3000 	ldrsb.w	r3, [r3]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <HAL_UART_RxCpltCallback+0x3a8>)
 80008d2:	5c9b      	ldrb	r3, [r3, r2]
 80008d4:	2b7f      	cmp	r3, #127	; 0x7f
 80008d6:	d126      	bne.n	8000926 <HAL_UART_RxCpltCallback+0x35e>
		  p=&cliBufferTX[i];
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 80008da:	f993 3000 	ldrsb.w	r3, [r3]
 80008de:	461a      	mov	r2, r3
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <HAL_UART_RxCpltCallback+0x3a8>)
 80008e2:	4413      	add	r3, r2
 80008e4:	4a23      	ldr	r2, [pc, #140]	; (8000974 <HAL_UART_RxCpltCallback+0x3ac>)
 80008e6:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart3,p,1,1000);
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <HAL_UART_RxCpltCallback+0x3ac>)
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4821      	ldr	r0, [pc, #132]	; (8000978 <HAL_UART_RxCpltCallback+0x3b0>)
 80008f4:	f001 fbe7 	bl	80020c6 <HAL_UART_Transmit>
		  i--;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 80008fa:	f993 3000 	ldrsb.w	r3, [r3]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	3b01      	subs	r3, #1
 8000902:	b2db      	uxtb	r3, r3
 8000904:	b25a      	sxtb	r2, r3
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 8000908:	701a      	strb	r2, [r3, #0]
		  if(i<0) i=0;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 800090c:	f993 3000 	ldrsb.w	r3, [r3]
 8000910:	2b00      	cmp	r3, #0
 8000912:	da02      	bge.n	800091a <HAL_UART_RxCpltCallback+0x352>
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	4917      	ldr	r1, [pc, #92]	; (800097c <HAL_UART_RxCpltCallback+0x3b4>)
 800091e:	4816      	ldr	r0, [pc, #88]	; (8000978 <HAL_UART_RxCpltCallback+0x3b0>)
 8000920:	f001 fc63 	bl	80021ea <HAL_UART_Receive_IT>
}
 8000924:	e01d      	b.n	8000962 <HAL_UART_RxCpltCallback+0x39a>
		 p=&cliBufferTX[i];
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 8000928:	f993 3000 	ldrsb.w	r3, [r3]
 800092c:	461a      	mov	r2, r3
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_UART_RxCpltCallback+0x3a8>)
 8000930:	4413      	add	r3, r2
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_UART_RxCpltCallback+0x3ac>)
 8000934:	6013      	str	r3, [r2, #0]
		 HAL_UART_Transmit(&huart3,p,1,1000);
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_UART_RxCpltCallback+0x3ac>)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	2201      	movs	r2, #1
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <HAL_UART_RxCpltCallback+0x3b0>)
 8000942:	f001 fbc0 	bl	80020c6 <HAL_UART_Transmit>
		 i++;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 8000948:	f993 3000 	ldrsb.w	r3, [r3]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b25a      	sxtb	r2, r3
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_UART_RxCpltCallback+0x3a4>)
 8000956:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart3,cliBufferRX, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <HAL_UART_RxCpltCallback+0x3b4>)
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_UART_RxCpltCallback+0x3b0>)
 800095e:	f001 fc44 	bl	80021ea <HAL_UART_Receive_IT>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	20000180 	.word	0x20000180
 8000970:	200000b4 	.word	0x200000b4
 8000974:	20000028 	.word	0x20000028
 8000978:	20000074 	.word	0x20000074
 800097c:	20000184 	.word	0x20000184

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_MspInit+0x5c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_MspInit+0x5c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x5c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x5c>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x5c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x5c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_MspInit+0x60>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_MspInit+0x60>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010000 	.word	0x40010000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_TIM_Base_MspInit+0x34>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10b      	bne.n	8000a1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_TIM_Base_MspInit+0x38>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_TIM_Base_MspInit+0x38>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_TIM_Base_MspInit+0x38>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40000800 	.word	0x40000800
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_UART_MspInit+0x9c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d139      	bne.n	8000ac0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_UART_MspInit+0xa0>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_UART_MspInit+0xa0>)
 8000a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a56:	61d3      	str	r3, [r2, #28]
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_UART_MspInit+0xa0>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_UART_MspInit+0xa0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_UART_MspInit+0xa0>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_UART_MspInit+0xa0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <HAL_UART_MspInit+0xa4>)
 8000a92:	f000 fa65 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <HAL_UART_MspInit+0xa4>)
 8000aac:	f000 fa58 	bl	8000f60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2027      	movs	r0, #39	; 0x27
 8000ab6:	f000 f9a6 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aba:	2027      	movs	r0, #39	; 0x27
 8000abc:	f000 f9bf 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004800 	.word	0x40004800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <BusFault_Handler+0x4>

08000af2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f87e 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART3_IRQHandler+0x10>)
 8000b2e:	f001 fbb1 	bl	8002294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000074 	.word	0x20000074

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b4a:	e003      	b.n	8000b54 <LoopCopyDataInit>

08000b4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b52:	3104      	adds	r1, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b54:	480a      	ldr	r0, [pc, #40]	; (8000b80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b5c:	d3f6      	bcc.n	8000b4c <CopyDataInit>
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b60:	e002      	b.n	8000b68 <LoopFillZerobss>

08000b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b64:	f842 3b04 	str.w	r3, [r2], #4

08000b68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b6c:	d3f9      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b6e:	f7ff ffe5 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f001 fe91 	bl	8002898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b76:	f7ff fafb 	bl	8000170 <main>
  bx lr
 8000b7a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b7c:	08002ab4 	.word	0x08002ab4
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b8c:	200001e0 	.word	0x200001e0

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x28>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f923 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff feec 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f93b 	bl	8000e5a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f903 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_IncTick+0x20>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	200001dc 	.word	0x200001dc

08000c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_GetTick+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	200001dc 	.word	0x200001dc

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <__NVIC_EnableIRQ+0x34>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff90 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff2d 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff42 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff35 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d005      	beq.n	8000e96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e051      	b.n	8000f3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 020e 	bic.w	r2, r2, #14
 8000ea4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <HAL_DMA_Abort_IT+0xd0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d029      	beq.n	8000f14 <HAL_DMA_Abort_IT+0xa0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <HAL_DMA_Abort_IT+0xd4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d022      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x9c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <HAL_DMA_Abort_IT+0xd8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d01a      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x96>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_DMA_Abort_IT+0xdc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d012      	beq.n	8000f04 <HAL_DMA_Abort_IT+0x90>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_DMA_Abort_IT+0xe0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d00a      	beq.n	8000efe <HAL_DMA_Abort_IT+0x8a>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <HAL_DMA_Abort_IT+0xe4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d102      	bne.n	8000ef8 <HAL_DMA_Abort_IT+0x84>
 8000ef2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ef6:	e00e      	b.n	8000f16 <HAL_DMA_Abort_IT+0xa2>
 8000ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efc:	e00b      	b.n	8000f16 <HAL_DMA_Abort_IT+0xa2>
 8000efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f02:	e008      	b.n	8000f16 <HAL_DMA_Abort_IT+0xa2>
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	e005      	b.n	8000f16 <HAL_DMA_Abort_IT+0xa2>
 8000f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0e:	e002      	b.n	8000f16 <HAL_DMA_Abort_IT+0xa2>
 8000f10:	2310      	movs	r3, #16
 8000f12:	e000      	b.n	8000f16 <HAL_DMA_Abort_IT+0xa2>
 8000f14:	2301      	movs	r3, #1
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_DMA_Abort_IT+0xe8>)
 8000f18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	4798      	blx	r3
    } 
  }
  return status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020008 	.word	0x40020008
 8000f48:	4002001c 	.word	0x4002001c
 8000f4c:	40020030 	.word	0x40020030
 8000f50:	40020044 	.word	0x40020044
 8000f54:	40020058 	.word	0x40020058
 8000f58:	4002006c 	.word	0x4002006c
 8000f5c:	40020000 	.word	0x40020000

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e127      	b.n	80011c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8116 	bne.w	80011be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d034      	beq.n	8001004 <HAL_GPIO_Init+0xa4>
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d80d      	bhi.n	8000fba <HAL_GPIO_Init+0x5a>
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d02b      	beq.n	8000ffa <HAL_GPIO_Init+0x9a>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d804      	bhi.n	8000fb0 <HAL_GPIO_Init+0x50>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d031      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d01c      	beq.n	8000fe8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fae:	e048      	b.n	8001042 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d043      	beq.n	800103c <HAL_GPIO_Init+0xdc>
 8000fb4:	2b11      	cmp	r3, #17
 8000fb6:	d01b      	beq.n	8000ff0 <HAL_GPIO_Init+0x90>
          break;
 8000fb8:	e043      	b.n	8001042 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fba:	4a89      	ldr	r2, [pc, #548]	; (80011e0 <HAL_GPIO_Init+0x280>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d026      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fc0:	4a87      	ldr	r2, [pc, #540]	; (80011e0 <HAL_GPIO_Init+0x280>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d806      	bhi.n	8000fd4 <HAL_GPIO_Init+0x74>
 8000fc6:	4a87      	ldr	r2, [pc, #540]	; (80011e4 <HAL_GPIO_Init+0x284>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d020      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fcc:	4a86      	ldr	r2, [pc, #536]	; (80011e8 <HAL_GPIO_Init+0x288>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01d      	beq.n	800100e <HAL_GPIO_Init+0xae>
          break;
 8000fd2:	e036      	b.n	8001042 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fd4:	4a85      	ldr	r2, [pc, #532]	; (80011ec <HAL_GPIO_Init+0x28c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fda:	4a85      	ldr	r2, [pc, #532]	; (80011f0 <HAL_GPIO_Init+0x290>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d016      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fe0:	4a84      	ldr	r2, [pc, #528]	; (80011f4 <HAL_GPIO_Init+0x294>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0xae>
          break;
 8000fe6:	e02c      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	623b      	str	r3, [r7, #32]
          break;
 8000fee:	e028      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e023      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	3308      	adds	r3, #8
 8001000:	623b      	str	r3, [r7, #32]
          break;
 8001002:	e01e      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	330c      	adds	r3, #12
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e019      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001016:	2304      	movs	r3, #4
 8001018:	623b      	str	r3, [r7, #32]
          break;
 800101a:	e012      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001024:	2308      	movs	r3, #8
 8001026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	611a      	str	r2, [r3, #16]
          break;
 800102e:	e008      	b.n	8001042 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	615a      	str	r2, [r3, #20]
          break;
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2bff      	cmp	r3, #255	; 0xff
 8001046:	d801      	bhi.n	800104c <HAL_GPIO_Init+0xec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	e001      	b.n	8001050 <HAL_GPIO_Init+0xf0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3304      	adds	r3, #4
 8001050:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d802      	bhi.n	800105e <HAL_GPIO_Init+0xfe>
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x104>
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	3b08      	subs	r3, #8
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	210f      	movs	r1, #15
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	6a39      	ldr	r1, [r7, #32]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8096 	beq.w	80011be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <HAL_GPIO_Init+0x298>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_GPIO_Init+0x298>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <HAL_GPIO_Init+0x298>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010aa:	4a54      	ldr	r2, [pc, #336]	; (80011fc <HAL_GPIO_Init+0x29c>)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x2a0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x19e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x2a4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x19a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	; (8001208 <HAL_GPIO_Init+0x2a8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x196>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	; (800120c <HAL_GPIO_Init+0x2ac>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x192>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010fe:	2300      	movs	r3, #0
 8001100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001110:	493a      	ldr	r1, [pc, #232]	; (80011fc <HAL_GPIO_Init+0x29c>)
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4938      	ldr	r1, [pc, #224]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	43db      	mvns	r3, r3
 8001140:	4933      	ldr	r1, [pc, #204]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001142:	4013      	ands	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	492e      	ldr	r1, [pc, #184]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	43db      	mvns	r3, r3
 8001168:	4929      	ldr	r1, [pc, #164]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800116a:	4013      	ands	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	4924      	ldr	r1, [pc, #144]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	491f      	ldr	r1, [pc, #124]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001192:	4013      	ands	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	491a      	ldr	r1, [pc, #104]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60cb      	str	r3, [r1, #12]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4915      	ldr	r1, [pc, #84]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f47f aed0 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 80011d4:	bf00      	nop
 80011d6:	372c      	adds	r7, #44	; 0x2c
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	10210000 	.word	0x10210000
 80011e4:	10110000 	.word	0x10110000
 80011e8:	10120000 	.word	0x10120000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10320000 	.word	0x10320000
 80011f4:	10220000 	.word	0x10220000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	40010800 	.word	0x40010800
 8001204:	40010c00 	.word	0x40010c00
 8001208:	40011000 	.word	0x40011000
 800120c:	40011400 	.word	0x40011400
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001252:	787b      	ldrb	r3, [r7, #1]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800125e:	e003      	b.n	8001268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	041a      	lsls	r2, r3, #16
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	611a      	str	r2, [r3, #16]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43d9      	mvns	r1, r3
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	400b      	ands	r3, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e26c      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8087 	beq.w	80013d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c4:	4b92      	ldr	r3, [pc, #584]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d00c      	beq.n	80012ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d0:	4b8f      	ldr	r3, [pc, #572]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d112      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
 80012dc:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d10b      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d06c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x12c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d168      	bne.n	80013d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e246      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x76>
 800130c:	4b80      	ldr	r3, [pc, #512]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a7f      	ldr	r2, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e02e      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b78      	ldr	r3, [pc, #480]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a77      	ldr	r2, [pc, #476]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0xbc>
 8001346:	4b72      	ldr	r3, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a71      	ldr	r2, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6e      	ldr	r2, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6a      	ldr	r2, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a67      	ldr	r2, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc60 	bl	8000c44 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc5c 	bl	8000c44 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1fa      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xe4>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc4c 	bl	8000c44 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc48 	bl	8000c44 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1e6      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x10c>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x18c>
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1ba      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4939      	ldr	r1, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fc01 	bl	8000c44 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fbfd 	bl	8000c44 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e19b      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fbe0 	bl	8000c44 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fbdc 	bl	8000c44 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e17a      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03a      	beq.n	8001528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d019      	beq.n	80014ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_RCC_OscConfig+0x274>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbc0 	bl	8000c44 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbbc 	bl	8000c44 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e15a      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fada 	bl	8001aa0 <RCC_Delay>
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_RCC_OscConfig+0x274>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fba6 	bl	8000c44 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fa:	e00f      	b.n	800151c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fba2 	bl	8000c44 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d908      	bls.n	800151c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e140      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	42420000 	.word	0x42420000
 8001518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b9e      	ldr	r3, [pc, #632]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e9      	bne.n	80014fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a6 	beq.w	8001682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b97      	ldr	r3, [pc, #604]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b94      	ldr	r3, [pc, #592]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a93      	ldr	r2, [pc, #588]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b91      	ldr	r3, [pc, #580]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b8e      	ldr	r3, [pc, #568]	; (800179c <HAL_RCC_OscConfig+0x4f8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b8b      	ldr	r3, [pc, #556]	; (800179c <HAL_RCC_OscConfig+0x4f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a8a      	ldr	r2, [pc, #552]	; (800179c <HAL_RCC_OscConfig+0x4f8>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb63 	bl	8000c44 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff fb5f 	bl	8000c44 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0fd      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b81      	ldr	r3, [pc, #516]	; (800179c <HAL_RCC_OscConfig+0x4f8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x312>
 80015a8:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a7a      	ldr	r2, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e02d      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	e01c      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x356>
 80015e0:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a6c      	ldr	r2, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a69      	ldr	r2, [pc, #420]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a66      	ldr	r2, [pc, #408]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b64      	ldr	r3, [pc, #400]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a63      	ldr	r2, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fb13 	bl	8000c44 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff fb0f 	bl	8000c44 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0ab      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ee      	beq.n	8001622 <HAL_RCC_OscConfig+0x37e>
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fafd 	bl	8000c44 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff faf9 	bl	8000c44 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e095      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a47      	ldr	r2, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8081 	beq.w	800178e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	d061      	beq.n	800175c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d146      	bne.n	800172e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_RCC_OscConfig+0x4fc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff facd 	bl	8000c44 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fac9 	bl	8000c44 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e067      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d108      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	492d      	ldr	r1, [pc, #180]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a19      	ldr	r1, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	430b      	orrs	r3, r1
 80016fa:	4927      	ldr	r1, [pc, #156]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x4fc>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fa9d 	bl	8000c44 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fa99 	bl	8000c44 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e037      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x46a>
 800172c:	e02f      	b.n	800178e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_RCC_OscConfig+0x4fc>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fa86 	bl	8000c44 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fa82 	bl	8000c44 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e020      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x498>
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e013      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40007000 	.word	0x40007000
 80017a0:	42420060 	.word	0x42420060

080017a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0d0      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4965      	ldr	r1, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800180a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d040      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d115      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e073      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06b      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4936      	ldr	r1, [pc, #216]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff f9d6 	bl	8000c44 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff f9d2 	bl	8000c44 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e053      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d210      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0207 	bic.w	r2, r3, #7
 80018da:	4922      	ldr	r1, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4601      	mov	r1, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	fa21 f303 	lsr.w	r3, r1, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1cc>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1d0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f934 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000
 8001968:	40021000 	.word	0x40021000
 800196c:	08002a94 	.word	0x08002a94
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	b490      	push	{r4, r7}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001980:	1d3c      	adds	r4, r7, #4
 8001982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x46>
 80019b6:	e02d      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ba:	623b      	str	r3, [r7, #32]
      break;
 80019bc:	e02d      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ca:	4413      	add	r3, r2
 80019cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c5b      	lsrs	r3, r3, #17
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ea:	4413      	add	r3, r2
 80019ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f6:	fb02 f203 	mul.w	r2, r2, r3
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	e004      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	623b      	str	r3, [r7, #32]
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a16:	623b      	str	r3, [r7, #32]
      break;
 8001a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc90      	pop	{r4, r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	08002a80 	.word	0x08002a80
 8001a2c:	08002a90 	.word	0x08002a90
 8001a30:	40021000 	.word	0x40021000
 8001a34:	007a1200 	.word	0x007a1200
 8001a38:	003d0900 	.word	0x003d0900

08001a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000000 	.word	0x20000000

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a54:	f7ff fff2 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a58:	4601      	mov	r1, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08002aa4 	.word	0x08002aa4

08001a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a80:	4601      	mov	r1, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	0adb      	lsrs	r3, r3, #11
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08002aa4 	.word	0x08002aa4

08001aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <RCC_Delay+0x34>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <RCC_Delay+0x38>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0a5b      	lsrs	r3, r3, #9
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001abc:	bf00      	nop
  }
  while (Delay --);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e5a      	subs	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <RCC_Delay+0x1c>
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	10624dd3 	.word	0x10624dd3

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe ff74 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 f930 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_TIM_Base_Start+0x88>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00e      	beq.n	8001bc4 <HAL_TIM_Base_Start+0x48>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bae:	d009      	beq.n	8001bc4 <HAL_TIM_Base_Start+0x48>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_TIM_Base_Start+0x8c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_TIM_Base_Start+0x48>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_TIM_Base_Start+0x90>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d010      	beq.n	8001bf8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be6:	e007      	b.n	8001bf8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40012c00 	.word	0x40012c00
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40000800 	.word	0x40000800

08001c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_ConfigClockSource+0x18>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0a6      	b.n	8001d76 <HAL_TIM_ConfigClockSource+0x166>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d067      	beq.n	8001d30 <HAL_TIM_ConfigClockSource+0x120>
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d80b      	bhi.n	8001c7c <HAL_TIM_ConfigClockSource+0x6c>
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d073      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d802      	bhi.n	8001c72 <HAL_TIM_ConfigClockSource+0x62>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d06f      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001c70:	e078      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d06c      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
 8001c76:	2b30      	cmp	r3, #48	; 0x30
 8001c78:	d06a      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001c7a:	e073      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c7c:	2b70      	cmp	r3, #112	; 0x70
 8001c7e:	d00d      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x8c>
 8001c80:	2b70      	cmp	r3, #112	; 0x70
 8001c82:	d804      	bhi.n	8001c8e <HAL_TIM_ConfigClockSource+0x7e>
 8001c84:	2b50      	cmp	r3, #80	; 0x50
 8001c86:	d033      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0xe0>
 8001c88:	2b60      	cmp	r3, #96	; 0x60
 8001c8a:	d041      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001c8c:	e06a      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c92:	d066      	beq.n	8001d62 <HAL_TIM_ConfigClockSource+0x152>
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d017      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001c9a:	e063      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f000 f941 	bl	8001f32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	609a      	str	r2, [r3, #8]
      break;
 8001cc8:	e04c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f000 f92a 	bl	8001f32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cec:	609a      	str	r2, [r3, #8]
      break;
 8001cee:	e039      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f000 f8a1 	bl	8001e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2150      	movs	r1, #80	; 0x50
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f8f8 	bl	8001efe <TIM_ITRx_SetConfig>
      break;
 8001d0e:	e029      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f000 f8bf 	bl	8001ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2160      	movs	r1, #96	; 0x60
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f8e8 	bl	8001efe <TIM_ITRx_SetConfig>
      break;
 8001d2e:	e019      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f000 f881 	bl	8001e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f8d8 	bl	8001efe <TIM_ITRx_SetConfig>
      break;
 8001d4e:	e009      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f8cf 	bl	8001efe <TIM_ITRx_SetConfig>
        break;
 8001d60:	e000      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <TIM_Base_SetConfig+0xb8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00b      	beq.n	8001db0 <TIM_Base_SetConfig+0x30>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d007      	beq.n	8001db0 <TIM_Base_SetConfig+0x30>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <TIM_Base_SetConfig+0xbc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d003      	beq.n	8001db0 <TIM_Base_SetConfig+0x30>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <TIM_Base_SetConfig+0xc0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d108      	bne.n	8001dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <TIM_Base_SetConfig+0xb8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00b      	beq.n	8001de2 <TIM_Base_SetConfig+0x62>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d007      	beq.n	8001de2 <TIM_Base_SetConfig+0x62>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <TIM_Base_SetConfig+0xbc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <TIM_Base_SetConfig+0x62>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <TIM_Base_SetConfig+0xc0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d108      	bne.n	8001df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <TIM_Base_SetConfig+0xb8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d103      	bne.n	8001e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	615a      	str	r2, [r3, #20]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800

08001e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f023 0201 	bic.w	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f023 030a 	bic.w	r3, r3, #10
 8001e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	621a      	str	r2, [r3, #32]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f023 0210 	bic.w	r2, r3, #16
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	031b      	lsls	r3, r3, #12
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	621a      	str	r2, [r3, #32]
}
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f043 0307 	orr.w	r3, r3, #7
 8001f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	021a      	lsls	r2, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	609a      	str	r2, [r3, #8]
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e046      	b.n	8002016 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00e      	beq.n	8001fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd4:	d009      	beq.n	8001fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d004      	beq.n	8001fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10c      	bne.n	8002004 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800

0800202c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e03f      	b.n	80020be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fcea 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800206e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb83 	bl	800277c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08a      	sub	sp, #40	; 0x28
 80020ca:	af02      	add	r7, sp, #8
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d17c      	bne.n	80021e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_UART_Transmit+0x2c>
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e075      	b.n	80021e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_UART_Transmit+0x3e>
 8002100:	2302      	movs	r3, #2
 8002102:	e06e      	b.n	80021e2 <HAL_UART_Transmit+0x11c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2221      	movs	r2, #33	; 0x21
 8002116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800211a:	f7fe fd93 	bl	8000c44 <HAL_GetTick>
 800211e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002134:	d108      	bne.n	8002148 <HAL_UART_Transmit+0x82>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d104      	bne.n	8002148 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e003      	b.n	8002150 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002158:	e02a      	b.n	80021b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2200      	movs	r2, #0
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f9a7 	bl	80024b8 <UART_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e036      	b.n	80021e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10b      	bne.n	8002192 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002188:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	3302      	adds	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	e007      	b.n	80021a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1cf      	bne.n	800215a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f977 	bl	80024b8 <UART_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e006      	b.n	80021e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b20      	cmp	r3, #32
 8002202:	d140      	bne.n	8002286 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_UART_Receive_IT+0x26>
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e039      	b.n	8002288 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_UART_Receive_IT+0x38>
 800221e:	2302      	movs	r3, #2
 8002220:	e032      	b.n	8002288 <HAL_UART_Receive_IT+0x9e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2222      	movs	r2, #34	; 0x22
 8002246:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0220 	orr.w	r2, r2, #32
 8002280:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_UART_IRQHandler+0x52>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9cc 	bl	800267c <UART_Receive_IT>
      return;
 80022e4:	e0d1      	b.n	800248a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80b0 	beq.w	800244e <HAL_UART_IRQHandler+0x1ba>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_UART_IRQHandler+0x70>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80a5 	beq.w	800244e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_UART_IRQHandler+0x90>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_UART_IRQHandler+0xb0>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_UART_IRQHandler+0xd0>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00f      	beq.n	800238e <HAL_UART_IRQHandler+0xfa>
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_UART_IRQHandler+0xee>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	f043 0208 	orr.w	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d078      	beq.n	8002488 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_UART_IRQHandler+0x11c>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f966 	bl	800267c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf14      	ite	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	2300      	moveq	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_UART_IRQHandler+0x144>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d031      	beq.n	800243c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f8b7 	bl	800254c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_UART_IRQHandler+0x1fc>)
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fd2f 	bl	8000e74 <HAL_DMA_Abort_IT>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d016      	beq.n	800244a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002426:	4610      	mov	r0, r2
 8002428:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242a:	e00e      	b.n	800244a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f83a 	bl	80024a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002432:	e00a      	b.n	800244a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f836 	bl	80024a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800243a:	e006      	b.n	800244a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f832 	bl	80024a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002448:	e01e      	b.n	8002488 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244a:	bf00      	nop
    return;
 800244c:	e01c      	b.n	8002488 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_UART_IRQHandler+0x1d6>
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8a3 	bl	80025ae <UART_Transmit_IT>
    return;
 8002468:	e00f      	b.n	800248a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_UART_IRQHandler+0x1f6>
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8e4 	bl	800264c <UART_EndTransmit_IT>
    return;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002488:	bf00      	nop
  }
}
 800248a:	3720      	adds	r7, #32
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	08002587 	.word	0x08002587

08002494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c8:	e02c      	b.n	8002524 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d028      	beq.n	8002524 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80024d8:	f7fe fbb4 	bl	8000c44 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d21d      	bcs.n	8002524 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e00f      	b.n	8002544 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	429a      	cmp	r2, r3
 8002540:	d0c3      	beq.n	80024ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002562:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff ff80 	bl	80024a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b21      	cmp	r3, #33	; 0x21
 80025c0:	d13e      	bne.n	8002640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ca:	d114      	bne.n	80025f6 <UART_Transmit_IT+0x48>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d110      	bne.n	80025f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	1c9a      	adds	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	621a      	str	r2, [r3, #32]
 80025f4:	e008      	b.n	8002608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	1c59      	adds	r1, r3, #1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6211      	str	r1, [r2, #32]
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4619      	mov	r1, r3
 8002616:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002662:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff11 	bl	8002494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b22      	cmp	r3, #34	; 0x22
 800268e:	d170      	bne.n	8002772 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002698:	d117      	bne.n	80026ca <UART_Receive_IT+0x4e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d113      	bne.n	80026ca <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
 80026c8:	e026      	b.n	8002718 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d007      	beq.n	80026ee <UART_Receive_IT+0x72>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <UART_Receive_IT+0x80>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e008      	b.n	800270e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29b      	uxth	r3, r3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4619      	mov	r1, r3
 8002726:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002728:	2b00      	cmp	r3, #0
 800272a:	d120      	bne.n	800276e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0220 	bic.w	r2, r2, #32
 800273a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7fd ff2f 	bl	80005c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e002      	b.n	8002774 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027b6:	f023 030c 	bic.w	r3, r3, #12
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <UART_SetConfig+0x114>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027e4:	f7ff f948 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	e002      	b.n	80027f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027ec:	f7ff f930 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 80027f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <UART_SetConfig+0x118>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	0119      	lsls	r1, r3, #4
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb2 f2f3 	udiv	r2, r2, r3
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <UART_SetConfig+0x118>)
 800282a:	fba3 0302 	umull	r0, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	3332      	adds	r3, #50	; 0x32
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <UART_SetConfig+0x118>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	4419      	add	r1, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009a      	lsls	r2, r3, #2
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <UART_SetConfig+0x118>)
 8002862:	fba3 0302 	umull	r0, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <UART_SetConfig+0x118>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	440a      	add	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40013800 	.word	0x40013800
 8002894:	51eb851f 	.word	0x51eb851f

08002898 <__libc_init_array>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	2500      	movs	r5, #0
 800289c:	4e0c      	ldr	r6, [pc, #48]	; (80028d0 <__libc_init_array+0x38>)
 800289e:	4c0d      	ldr	r4, [pc, #52]	; (80028d4 <__libc_init_array+0x3c>)
 80028a0:	1ba4      	subs	r4, r4, r6
 80028a2:	10a4      	asrs	r4, r4, #2
 80028a4:	42a5      	cmp	r5, r4
 80028a6:	d109      	bne.n	80028bc <__libc_init_array+0x24>
 80028a8:	f000 f82e 	bl	8002908 <_init>
 80028ac:	2500      	movs	r5, #0
 80028ae:	4e0a      	ldr	r6, [pc, #40]	; (80028d8 <__libc_init_array+0x40>)
 80028b0:	4c0a      	ldr	r4, [pc, #40]	; (80028dc <__libc_init_array+0x44>)
 80028b2:	1ba4      	subs	r4, r4, r6
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	42a5      	cmp	r5, r4
 80028b8:	d105      	bne.n	80028c6 <__libc_init_array+0x2e>
 80028ba:	bd70      	pop	{r4, r5, r6, pc}
 80028bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c0:	4798      	blx	r3
 80028c2:	3501      	adds	r5, #1
 80028c4:	e7ee      	b.n	80028a4 <__libc_init_array+0xc>
 80028c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ca:	4798      	blx	r3
 80028cc:	3501      	adds	r5, #1
 80028ce:	e7f2      	b.n	80028b6 <__libc_init_array+0x1e>
 80028d0:	08002aac 	.word	0x08002aac
 80028d4:	08002aac 	.word	0x08002aac
 80028d8:	08002aac 	.word	0x08002aac
 80028dc:	08002ab0 	.word	0x08002ab0

080028e0 <memcpy>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	1e43      	subs	r3, r0, #1
 80028e4:	440a      	add	r2, r1
 80028e6:	4291      	cmp	r1, r2
 80028e8:	d100      	bne.n	80028ec <memcpy+0xc>
 80028ea:	bd10      	pop	{r4, pc}
 80028ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028f4:	e7f7      	b.n	80028e6 <memcpy+0x6>

080028f6 <memset>:
 80028f6:	4603      	mov	r3, r0
 80028f8:	4402      	add	r2, r0
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d100      	bne.n	8002900 <memset+0xa>
 80028fe:	4770      	bx	lr
 8002900:	f803 1b01 	strb.w	r1, [r3], #1
 8002904:	e7f9      	b.n	80028fa <memset+0x4>
	...

08002908 <_init>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr

08002914 <_fini>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	bf00      	nop
 8002918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291a:	bc08      	pop	{r3}
 800291c:	469e      	mov	lr, r3
 800291e:	4770      	bx	lr
